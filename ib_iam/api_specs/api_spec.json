{
  "swagger": "2.0",
  "host": "127.0.0.1:8000",
  "basePath": "/api/ib_iam/",
  "info": {
    "version": "1.0.0",
    "title": "Simple API",
    "description": "A simple API to learn how to write OpenAPI Specification"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "oauth": {
      "tokenUrl": "http://auth.ibtspl.com/oauth2/",
      "flow": "password",
      "scopes": {
        "read": "read users",
        "write": "create users",
        "update": "update users",
        "delete": "delete users"
      },
      "type": "oauth2"
    }
  },
  "security": [],
  "definitions": {
    "CommonHttpExceptionFields": {
      "type": "object",
      "properties": {
        "response": {
          "type": "string"
        },
        "http_status_code": {
          "type": "integer"
        }
      },
      "required": [
        "response",
        "http_status_code"
      ]
    },
    "UserNameAndEmail": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "email"
      ]
    },
    "UserDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/UserId"
        },
        {
          "$ref": "#/definitions/UserNameAndEmail"
        }
      ]
    },
    "EmployeeDetails": {
      "type": "object",
      "properties": {
        "employee_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "profile_pic_url": {
          "type": "string"
        }
      },
      "required": [
        "employee_id",
        "name"
      ]
    },
    "UserWithExtraFields": {
      "allOf": [
        {
          "$ref": "#/definitions/UserDetails"
        },
        {
          "type": "object",
          "properties": {
            "profile_pic_url": {
              "type": "string"
            },
            "is_admin": {
              "type": "boolean"
            }
          },
          "required": [
            "is_admin"
          ]
        }
      ]
    },
    "UserId": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "required": [
        "user_id"
      ]
    },
    "TeamDetails": {
      "type": "object",
      "properties": {
        "team_id": {
          "type": "string",
          "format": "uuid"
        },
        "team_name": {
          "type": "string"
        }
      },
      "required": [
        "team_id",
        "team_name"
      ]
    },
    "ListOfTeams": {
      "type": "object",
      "properties": {
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TeamDetails"
          }
        }
      },
      "required": [
        "teams"
      ]
    },
    "CompanyDetails": {
      "type": "object",
      "properties": {
        "company_id": {
          "type": "string"
        },
        "company_name": {
          "type": "string"
        }
      }
    },
    "RoleDetails": {
      "type": "object",
      "properties": {
        "role_id": {
          "type": "string"
        },
        "role_name": {
          "type": "string"
        }
      },
      "required": [
        "role_id",
        "role_name"
      ]
    },
    "ListOfRoles": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleDetails"
          }
        }
      },
      "required": [
        "roles"
      ]
    },
    "CompleteUserDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/UserDetails"
        },
        {
          "$ref": "#/definitions/ListOfTeams"
        },
        {
          "$ref": "#/definitions/ListOfRoles"
        },
        {
          "type": "object",
          "properties": {
            "company": {
              "$ref": "#/definitions/CompanyDetails"
            }
          },
          "required": [
            "company"
          ]
        }
      ]
    },
    "UsersDetails": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompleteUserDetails"
          }
        }
      },
      "required": [
        "users"
      ]
    },
    "ListOfUsersWithTotalUsersCount": {
      "allOf": [
        {
          "$ref": "#/definitions/UsersDetails"
        },
        {
          "type": "object",
          "properties": {
            "total": {
              "type": "integer",
              "format": "int64"
            }
          },
          "required": [
            "total"
          ]
        }
      ]
    },
    "UserWithCompanyWithTeamsAndRoles": {
      "allOf": [
        {
          "$ref": "#/definitions/UserNameAndEmail"
        },
        {
          "type": "object",
          "properties": {
            "company_id": {
              "type": "string",
              "format": "uuid"
            },
            "team_ids": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "role_ids": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "company_id",
            "role_ids",
            "team_ids"
          ]
        }
      ]
    },
    "Companies": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "format": "uuid"
          },
          "company_name": {
            "type": "string"
          }
        },
        "required": [
          "company_id",
          "company_name"
        ]
      }
    },
    "Roles": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/RoleDetails"
      }
    },
    "Teams": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/TeamDetails"
      }
    },
    "ConfigurationDetails": {
      "type": "object",
      "properties": {
        "companies": {
          "$ref": "#/definitions/Companies"
        },
        "roles": {
          "$ref": "#/definitions/Roles"
        },
        "teams": {
          "$ref": "#/definitions/Teams"
        }
      },
      "required": [
        "companies",
        "roles",
        "teams"
      ]
    },
    "MemberDetails": {
      "type": "object",
      "properties": {
        "member_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "profile_pic_url": {
          "type": "string"
        }
      },
      "required": [
        "member_id",
        "name"
      ]
    },
    "TeamNameAndDescription": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "TeamWithMembersDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/TeamNameAndDescription"
        },
        {
          "type": "object",
          "properties": {
            "team_id": {
              "type": "string"
            },
            "no_of_members": {
              "type": "integer"
            },
            "members": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MemberDetails"
              }
            }
          },
          "required": [
            "team_id",
            "no_of_members",
            "members"
          ]
        }
      ]
    },
    "CompanyNameLogoAndDescription": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "logo_url": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "CompanyDetailsWithEmployeeDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/CompanyNameLogoAndDescription"
        },
        {
          "type": "object",
          "properties": {
            "company_id": {
              "type": "string"
            },
            "employees": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployeeDetails"
              }
            }
          },
          "required": [
            "company_id",
            "employees"
          ]
        }
      ]
    },
    "TeamsWithTotalTeamsCount": {
      "type": "object",
      "properties": {
        "total_teams_count": {
          "type": "integer"
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TeamWithMembersDetails"
          }
        }
      },
      "required": [
        "total_teams_count",
        "teams"
      ]
    },
    "TeamWithUserIds": {
      "allOf": [
        {
          "$ref": "#/definitions/TeamNameAndDescription"
        },
        {
          "type": "object",
          "properties": {
            "user_ids": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "UserHasNoAccessException": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonHttpExceptionFields"
        },
        {
          "type": "object",
          "properties": {
            "res_status": {
              "type": "string",
              "enum": [
                "USER_HAS_NO_ACCESS"
              ]
            }
          },
          "required": [
            "res_status"
          ]
        }
      ]
    },
    "TeamNameAlreadyExistsOrDuplicateUserIdsException": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonHttpExceptionFields"
        },
        {
          "type": "object",
          "properties": {
            "res_status": {
              "type": "string",
              "enum": [
                "TEAM_NAME_ALREADY_EXISTS",
                "DUPLICATE_USER_IDS"
              ]
            }
          },
          "required": [
            "res_status"
          ]
        }
      ]
    },
    "TeamId": {
      "type": "object",
      "properties": {
        "team_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "required": [
        "team_id"
      ]
    },
    "CompanyWithEmployeeIds": {
      "allOf": [
        {
          "$ref": "#/definitions/CompanyNameLogoAndDescription"
        },
        {
          "type": "object",
          "properties": {
            "employee_ids": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "CompanyNameAlreadyExistsOrDuplicateUserIdsException": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonHttpExceptionFields"
        },
        {
          "type": "object",
          "properties": {
            "res_status": {
              "type": "string",
              "enum": [
                "COMPANY_NAME_ALREADY_EXISTS",
                "DUPLICATE_USER_IDS"
              ]
            }
          },
          "required": [
            "res_status"
          ]
        }
      ]
    },
    "CompanyId": {
      "type": "object",
      "properties": {
        "company_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "required": [
        "company_id"
      ]
    }
  },
  "parameters": {
    "UserIdPathParameter": {
      "name": "user_id",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "uuid"
    },
    "AddUserParameter": {
      "name": "add_user",
      "description": "Details of User to add",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/UserWithCompanyWithTeamsAndRoles"
      }
    },
    "UpdateUserParameter": {
      "name": "update_user",
      "description": "Update the User details",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/UserWithCompanyWithTeamsAndRoles"
      }
    },
    "UpdateUserProfileParameter": {
      "name": "UpdateUserProfile",
      "description": "Update User profile",
      "in": "body",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/UserNameAndEmail"
          },
          {
            "type": "object",
            "properties": {
              "profile_pic_url": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "UpdateUserPasswordParameter": {
      "name": "UpdateUserPassword",
      "description": "Update User password",
      "in": "body",
      "schema": {
        "type": "object",
        "properties": {
          "current_password": {
            "type": "string"
          },
          "new_password": {
            "type": "string"
          }
        }
      }
    },
    "LoginParameter": {
      "name": "login",
      "description": "email and password to login in database",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ]
      }
    },
    "SendResetPasswordLinkParameter": {
      "name": "send_reset_password_link",
      "description": "send reset password link to email",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      }
    },
    "ResetPasswordParameter": {
      "name": "reset_password",
      "description": "reset user password",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          }
        },
        "required": [
          "password"
        ]
      }
    },
    "LimitQueryParameter": {
      "name": "limit",
      "in": "query",
      "required": true,
      "type": "integer",
      "default": 5
    },
    "OffsetQueryParameter": {
      "name": "offset",
      "in": "query",
      "required": true,
      "type": "integer",
      "default": 0
    },
    "AddTeamParameter": {
      "name": "add_team",
      "in": "body",
      "required": true,
      "description": "parameters or details to create/add a team",
      "schema": {
        "$ref": "#/definitions/TeamWithUserIds"
      }
    },
    "TeamIdPathParameter": {
      "name": "team_id",
      "in": "path",
      "required": true,
      "description": "team_id to identify a team",
      "type": "string",
      "format": "uuid"
    },
    "UpdateTeamParameter": {
      "name": "update_team",
      "in": "body",
      "description": "details that are to be updated of a team",
      "schema": {
        "$ref": "#/definitions/TeamWithUserIds"
      }
    },
    "AddCompanyParameter": {
      "name": "add_team",
      "in": "body",
      "required": true,
      "description": "parameters or details to create/add a company",
      "schema": {
        "$ref": "#/definitions/CompanyWithEmployeeIds"
      }
    },
    "CompanyIdPathParameter": {
      "name": "company_id",
      "in": "path",
      "required": true,
      "description": "company_id to identify a company",
      "type": "string",
      "format": "uuid"
    },
    "UpdateCompanyParameter": {
      "name": "update_company",
      "in": "body",
      "description": "details that are to be updated of a company",
      "schema": {
        "$ref": "#/definitions/CompanyWithEmployeeIds"
      }
    }
  },
  "responses": {
    "ListOfUsersResponse": {
      "description": "list of users exist",
      "schema": {
        "$ref": "#/definitions/ListOfUsersWithTotalUsersCount"
      }
    },
    "UserDoesNotHavePermissionResponse": {
      "description": "Access Denied",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "USER_DOES_NOT_HAVE_PERMISSION",
                  "USER_DOES_NOT_HAVE_DELETE_PERMISSION"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "AddUserBadRequestResponse": {
      "description": "Failed to add user",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "INVALID_EMAIL",
                  "INVALID_NAME",
                  "USER_ALREADY_EXIST_WITH_THIS_EMAIL",
                  "NAME_MINIMUM_LENGTH_SHOULD_BE_FIVE_OR_MORE",
                  "NAME_SHOULD_NOT_CONTAINS_SPECIAL_CHARACTERS_AND_NUMBERS"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "EditUserBadRequestResponse": {
      "description": "Failed to add user",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "INVALID_EMAIL",
                  "EMPTY_NAME_IS_INVALID",
                  "NAME_MINIMUM_LENGTH_SHOULD_BE_FIVE_OR_MORE",
                  "NAME_SHOULD_NOT_CONTAINS_SPECIAL_CHARACTERS_AND_NUMBERS"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "NotFoundResponseForEditUser": {
      "description": "Edit User Not Found",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "INVALID_COMPANY_ID",
                  "INVALID_TEAM_IDS",
                  "INVALID_ROLE_IDS",
                  "USER_DOES_NOT_EXIST"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "NotFoundResponseForAddUser": {
      "description": "Edit User Not Found",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "INVALID_COMPANY_ID",
                  "INVALID_TEAM_IDS",
                  "INVALID_ROLE_IDS"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "BadRequestForUpdateUserProfileResponse": {
      "description": "Failed to add user",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "INVALID_EMAIL",
                  "EMPTY_NAME_IS_INVALID",
                  "EMAIL_ALREADY_IN_USE",
                  "NAME_MINIMUM_LENGTH_SHOULD_BE",
                  "NAME_SHOULD_NOT_CONTAINS_SPECIAL_CHARACTERS_AND_NUMBERS"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "BadRequestForUpdateUserPasswordResponse": {
      "description": "Failed to update user password",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "INVALID_CURRENT_PASSWORD",
                  "INVALID_NEW_PASSWORD",
                  "CURRENT_PASSWORD_MISMATCH"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "ConfigurationDetailsResponse": {
      "description": "Configuration Details",
      "schema": {
        "$ref": "#/definitions/ConfigurationDetails"
      }
    },
    "LoginSuccessResponse": {
      "description": "Success Response for login",
      "schema": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "expires_in_seconds": {
            "type": "integer",
            "format": "int64"
          },
          "is_admin": {
            "type": "boolean"
          }
        },
        "required": [
          "access_token",
          "refresh_token",
          "expires_in_seconds",
          "is_admin"
        ]
      }
    },
    "LoginBadRequestResponse": {
      "description": "login bad request response",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "INVALID_EMAIL"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "LoginNotFoundResponse": {
      "description": "login not found response",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "USER_ACCOUNT_DOES_NOT_EXIST",
                  "INCORRECT_PASSWORD"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "SendResetPasswordLinkBadRequestResponse": {
      "description": "send reset password link bad request response",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "INVALID_EMAIL"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "SendResetPasswordLinkNotFoundResponse": {
      "description": "send reset password link not found response",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "USER_ACCOUNT_DOES_NOT_EXIST"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "UpdatePasswordBadRequestResponse": {
      "description": "update password bad request response",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "TOKEN_HAS_EXPIRED",
                  "PASSWORD_MIN_LENGTH",
                  "PASSWORD_AT_LEAST_ONE_SPECIAL_CHARACTER"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "UpdatePasswordNotFoundResponse": {
      "description": "update password not found response",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "TOKEN_DOES_NOT_EXIST"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "GetUserProfileSuccessResponse": {
      "description": "get user profile success response",
      "schema": {
        "$ref": "#/definitions/UserWithExtraFields"
      }
    },
    "GetUserProfileBadRequestResponse": {
      "description": "get user profile bad request response",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "INVALID_USER_ID"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "GetUserProfileNotFoundResponse": {
      "description": "get user profile not found response",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "USER_ACCOUNT_DOES_NOT_EXIST"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "BadRequestForGetListOfTeamsResponse": {
      "description": "given limit or offset is not valid",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "INVALID_LIMIT",
                  "INVALID_OFFSET"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "UnauthorizedRequestForGetListOfTeamsResponse": {
      "description": "user has no access to see teams",
      "schema": {
        "$ref": "#/definitions/UserHasNoAccessException"
      }
    },
    "SuccessForGetListOfTeamsResponse": {
      "description": "returns list of teams",
      "schema": {
        "$ref": "#/definitions/TeamsWithTotalTeamsCount"
      }
    },
    "UnauthorizedForAddTeamResponse": {
      "description": "User has no access to add a team",
      "schema": {
        "$ref": "#/definitions/UserHasNoAccessException"
      }
    },
    "NotFoundForAddTeamResponse": {
      "description": "Requested users not found to add",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "INVALID_USER_IDS"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "BadRequestForAddTeamResponse": {
      "description": "Team name already exists or duplicate users has sent",
      "schema": {
        "$ref": "#/definitions/TeamNameAlreadyExistsOrDuplicateUserIdsException"
      }
    },
    "SuccessfullyCreatedForAddTeamResponse": {
      "description": "Team Created successfully",
      "schema": {
        "$ref": "#/definitions/TeamId"
      }
    },
    "BadRequestForUpdateTeamResponse": {
      "description": "Team name already exists or duplicate users has sent",
      "schema": {
        "$ref": "#/definitions/TeamNameAlreadyExistsOrDuplicateUserIdsException"
      }
    },
    "UnauthorizedForUpdateTeamResponse": {
      "description": "User has no access to update team",
      "schema": {
        "$ref": "#/definitions/UserHasNoAccessException"
      }
    },
    "NotFoundForUpdateTeamResponse": {
      "description": "Invalid team or Invalid Users sent",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "INVALID_TEAM_ID",
                  "INVALID_USER_IDS"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "SuccessForGetCompaniesResponse": {
      "description": "returns all companies with their employee details",
      "schema": {
        "type": "object",
        "properties": {
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CompanyDetailsWithEmployeeDetails"
            }
          }
        }
      }
    },
    "UnauthorizedForGetCompaniesResponse": {
      "description": "user has no access to see companies",
      "schema": {
        "$ref": "#/definitions/UserHasNoAccessException"
      }
    },
    "UnauthorizedForAddCompanyResponse": {
      "description": "User has no access to add a company",
      "schema": {
        "$ref": "#/definitions/UserHasNoAccessException"
      }
    },
    "NotFoundForAddCompanyResponse": {
      "description": "Requested users not found to add",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "INVALID_USER_IDS"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "BadRequestForAddCompanyResponse": {
      "description": "Company name already exists or duplicate users has sent",
      "schema": {
        "$ref": "#/definitions/CompanyNameAlreadyExistsOrDuplicateUserIdsException"
      }
    },
    "SuccessfullyCreatedForAddCompanyResponse": {
      "description": "Company Created successfully",
      "schema": {
        "$ref": "#/definitions/CompanyId"
      }
    },
    "NotFoundForDeleteCompanyResponse": {
      "description": "Requested company does not exist",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "INVALID_COMPANY_ID"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "UnauthorizedForDeleteCompanyResponse": {
      "description": "User has no access to delete a company",
      "schema": {
        "$ref": "#/definitions/UserHasNoAccessException"
      }
    },
    "BadRequestForUpdateCompanyResponse": {
      "description": "Company name already exists or duplicate users has sent",
      "schema": {
        "$ref": "#/definitions/CompanyNameAlreadyExistsOrDuplicateUserIdsException"
      }
    },
    "UnauthorizedForUpdateCompanyResponse": {
      "description": "User has no access to update company",
      "schema": {
        "$ref": "#/definitions/UserHasNoAccessException"
      }
    },
    "NotFoundForUpdateCompanyResponse": {
      "description": "Invalid company or Invalid Users sent",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "INVALID_COMPANY_ID",
                  "INVALID_USER_IDS"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "NotFoundForDeleteTeamResponse": {
      "description": "Requested team does not exist",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "INVALID_TEAM_ID"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    },
    "UnauthorizedForDeleteTeamResponse": {
      "description": "User has no access to delete a team",
      "schema": {
        "$ref": "#/definitions/UserHasNoAccessException"
      }
    },
    "UserDoesNotFoundResponse": {
      "description": "User Does Not Found Http Exception Response",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/CommonHttpExceptionFields"
          },
          {
            "type": "object",
            "properties": {
              "res_status": {
                "type": "string",
                "enum": [
                  "USER_DOES_NOT_EXIST"
                ]
              }
            },
            "required": [
              "res_status"
            ]
          }
        ]
      }
    }
  },
  "paths": {
    "/configuration_details/v1": {
      "get": {
        "summary": "Get Configuration Details",
        "description": "Get configuration details for add and edit user",
        "operationId": "get_configuration_details",
        "security": [
          {
            "oauth": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ConfigurationDetailsResponse"
          },
          "403": {
            "$ref": "#/responses/UserDoesNotHavePermissionResponse"
          }
        }
      }
    },
    "/users/v1/": {
      "get": {
        "summary": "Get List of Users",
        "description": "Get list of users",
        "operationId": "get_users",
        "security": [
          {
            "oauth": [
              "read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/OffsetQueryParameter"
          },
          {
            "$ref": "#/parameters/LimitQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListOfUsersResponse"
          },
          "403": {
            "$ref": "#/responses/UserDoesNotHavePermissionResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestForGetListOfTeamsResponse"
          }
        }
      }
    },
    "/users/create/v1/": {
      "post": {
        "summary": "Add User",
        "description": "Add user details",
        "operationId": "add_user",
        "security": [
          {
            "oauth": [
              "write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/AddUserParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "user added"
          },
          "400": {
            "$ref": "#/responses/AddUserBadRequestResponse"
          },
          "403": {
            "$ref": "#/responses/UserDoesNotHavePermissionResponse"
          },
          "404": {
            "$ref": "#/responses/NotFoundResponseForAddUser"
          }
        }
      }
    },
    "/users/{user_id}/v1/": {
      "put": {
        "summary": "Edit User",
        "description": "Edit user details",
        "operationId": "edit_user",
        "security": [
          {
            "oauth": [
              "write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/UpdateUserParameter"
          },
          {
            "$ref": "#/parameters/UserIdPathParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Edit User Successfully"
          },
          "400": {
            "$ref": "#/responses/EditUserBadRequestResponse"
          },
          "403": {
            "$ref": "#/responses/UserDoesNotHavePermissionResponse"
          },
          "404": {
            "$ref": "#/responses/NotFoundResponseForEditUser"
          }
        }
      },
      "delete": {
        "summary": "Delete User",
        "description": "Delete user details",
        "operationId": "delete_user",
        "security": [
          {
            "oauth": [
              "delete"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/UserIdPathParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "SuccessFully Delete User"
          },
          "403": {
            "$ref": "#/responses/UserDoesNotHavePermissionResponse"
          },
          "404": {
            "$ref": "#/responses/UserDoesNotFoundResponse"
          }
        }
      }
    },
    "/login/v1/": {
      "post": {
        "summary": "User Login",
        "description": "Login the use and return access token of user",
        "operationId": "user_login",
        "parameters": [
          {
            "$ref": "#/parameters/LoginParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LoginSuccessResponse"
          },
          "404": {
            "$ref": "#/responses/LoginNotFoundResponse"
          },
          "400": {
            "$ref": "#/responses/LoginBadRequestResponse"
          }
        }
      }
    },
    "/logout/v1/": {
      "post": {
        "summary": "User Logout",
        "description": "Logout the user from all devices",
        "operationId": "user_logout",
        "security": [
          {
            "oauth": [
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success Response"
          }
        }
      }
    },
    "/send/reset_password_link/v1/": {
      "post": {
        "summary": "Send User Reset Password Link",
        "description": "Send user reset password link to email",
        "operationId": "send_user_reset_password_link",
        "parameters": [
          {
            "$ref": "#/parameters/SendResetPasswordLinkParameter"
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/responses/SendResetPasswordLinkBadRequestResponse"
          },
          "404": {
            "$ref": "#/responses/SendResetPasswordLinkNotFoundResponse"
          },
          "200": {
            "description": "Success Response"
          }
        }
      }
    },
    "/reset_password/v1/": {
      "post": {
        "summary": "Reset User Password",
        "description": "Reset user password using token which we provided",
        "operationId": "reset_user_password",
        "security": [
          {
            "oauth": [
              "write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "user token with expires secs",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/ResetPasswordParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success Response"
          },
          "400": {
            "$ref": "#/responses/UpdatePasswordBadRequestResponse"
          },
          "404": {
            "$ref": "#/responses/UpdatePasswordNotFoundResponse"
          }
        }
      }
    },
    "/user_profile/v1/": {
      "get": {
        "summary": "Get User Profile",
        "description": "Get user profile details",
        "operationId": "get_user_profile",
        "security": [
          {
            "oauth": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetUserProfileSuccessResponse"
          },
          "400": {
            "$ref": "#/responses/GetUserProfileBadRequestResponse"
          },
          "404": {
            "$ref": "#/responses/GetUserProfileNotFoundResponse"
          }
        }
      }
    },
    "/teams/v1/": {
      "get": {
        "summary": "Get List of Teams",
        "description": "Returns a list containing all teams related to a user(admin).",
        "operationId": "get_list_of_teams",
        "security": [
          {
            "oauth": [
              "read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/LimitQueryParameter"
          },
          {
            "$ref": "#/parameters/OffsetQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SuccessForGetListOfTeamsResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestForGetListOfTeamsResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequestForGetListOfTeamsResponse"
          }
        }
      }
    },
    "/team/add/v1/": {
      "post": {
        "summary": "Add Team",
        "description": "Add the team",
        "operationId": "add_team",
        "security": [
          {
            "oauth": [
              "write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/AddTeamParameter"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/SuccessfullyCreatedForAddTeamResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestForAddTeamResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedForAddTeamResponse"
          },
          "404": {
            "$ref": "#/responses/NotFoundForAddTeamResponse"
          }
        }
      }
    },
    "/team/{team_id}/v1/": {
      "put": {
        "summary": "Update Team",
        "description": "Updates team details",
        "operationId": "update_team_details",
        "security": [
          {
            "oauth": [
              "write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/TeamIdPathParameter"
          },
          {
            "$ref": "#/parameters/UpdateTeamParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Team details updated Successfully"
          },
          "400": {
            "$ref": "#/responses/BadRequestForUpdateTeamResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedForUpdateTeamResponse"
          },
          "404": {
            "$ref": "#/responses/NotFoundForUpdateTeamResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete Team",
        "description": "Delete the team details",
        "operationId": "delete_team",
        "security": [
          {
            "oauth": [
              "delete"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/TeamIdPathParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Team deleted Successfully"
          },
          "404": {
            "$ref": "#/responses/NotFoundForDeleteTeamResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedForDeleteTeamResponse"
          }
        }
      }
    },
    "/companies/v1/": {
      "get": {
        "summary": "Get Companies",
        "description": "Returns all companies and related employee count, if accessed by admin",
        "operationId": "get_companies",
        "security": [
          {
            "oauth": [
              "read"
            ]
          }
        ],
        "parameters": [
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SuccessForGetCompaniesResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedForGetCompaniesResponse"
          }
        }
      }
    },
    "/company/add/v1/": {
      "post": {
        "summary": "Add Company",
        "description": "Add the company",
        "operationId": "add_company",
        "security": [
          {
            "oauth": [
              "write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/AddCompanyParameter"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/SuccessfullyCreatedForAddCompanyResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestForAddCompanyResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedForAddCompanyResponse"
          },
          "404": {
            "$ref": "#/responses/NotFoundForAddCompanyResponse"
          }
        }
      }
    },
    "/company/{company_id}/v1/": {
      "put": {
        "summary": "Update Company Details",
        "description": "Update company details",
        "operationId": "update_company_details",
        "security": [
          {
            "oauth": [
              "write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CompanyIdPathParameter"
          },
          {
            "$ref": "#/parameters/UpdateCompanyParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Company details updated Successfully"
          },
          "400": {
            "$ref": "#/responses/BadRequestForUpdateCompanyResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedForUpdateCompanyResponse"
          },
          "404": {
            "$ref": "#/responses/NotFoundForUpdateCompanyResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete Company",
        "description": "Delete the company",
        "operationId": "delete_company",
        "security": [
          {
            "oauth": [
              "delete"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CompanyIdPathParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Company deleted Successfully"
          },
          "404": {
            "$ref": "#/responses/NotFoundForDeleteCompanyResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedForDeleteCompanyResponse"
          }
        }
      }
    },
    "/user/profile/update/v1/": {
      "put": {
        "summary": "update user profile",
        "description": "updates user profile details",
        "operationId": "update_user_profile",
        "security": [
          {
            "oauth": [
              "write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/UpdateUserProfileParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "User Profile Updated Successfully"
          },
          "400": {
            "$ref": "#/responses/BadRequestForUpdateUserProfileResponse"
          }
        }
      }
    },
    "/user/password/update/v1/": {
      "put": {
        "summary": "update user password",
        "description": "updates user password",
        "operationId": "update_user_password",
        "security": [
          {
            "oauth": [
              "write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/UpdateUserPasswordParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "User Password Updated Successfully"
          },
          "400": {
            "$ref": "#/responses/BadRequestForUpdateUserPasswordResponse"
          }
        }
      }
    }
  }
}

from django.contrib.auth import validators
from django.core.exceptions import ValidationError
from django.core.validators import MinLengthValidator, MaxLengthValidator

from ib_users.exceptions.custom_exception_constants import \
    USERNAME_CAN_NOT_BE_EMPTY, USER_MAX_NAME_LENGTH_IS, USER_NAME_SPECIAL_CHARACTERS
from ib_users.constants.user_account_constants import UserAccountConstants
from ib_users.validators.base_validator import \
    CustomException, BaseValidator


class UsernameValidator(BaseValidator):

    @classmethod
    def validate(cls, value):
        try:
            cls._validate_username(value)
        except ValidationError as ve:
            raise CustomException.from_exception_message_and_code(ve.message, ve.code)

    @classmethod
    def _validate_username(cls, username):
        min_length_validator = cls.get_validator_with_limit_value(
            MinLengthValidator,
            limit_value=1,
            exception_message_DTO=USERNAME_CAN_NOT_BE_EMPTY)
        min_length_validator(username)

        max_length_validator = cls.get_validator_with_limit_value(
            MaxLengthValidator,
            limit_value=UserAccountConstants.MAX_USER_NAME_LENGTH,
            exception_message_DTO=USER_MAX_NAME_LENGTH_IS)
        max_length_validator(username)

        username_validator = validators.UnicodeUsernameValidator(
            message=USER_NAME_SPECIAL_CHARACTERS.message,
            code=USER_NAME_SPECIAL_CHARACTERS.code)
        username_validator(username)
from django.core.exceptions import ValidationError
from django.core.validators import MinLengthValidator, RegexValidator

from ib_users.exceptions.custom_exception_constants import \
    PASSWORD_MIN_LENGTH_IS, \
    PASSWORD_AT_LEAST_1_SPECIAL_CHARACTER
from ib_users.constants.user_account_constants import UserAccountConstants
from ib_users.validators.base_validator import \
    CustomException, BaseValidator


class PasswordValidator(BaseValidator):

    @classmethod
    def validate(cls, value):
        try:
            cls._validate_password(value)
        except ValidationError as ve:
            raise CustomException.from_exception_message_and_code(ve.message, ve.code)

    @classmethod
    def _validate_password(cls, password):
        min_length_validator = cls.get_validator_with_limit_value(
            MinLengthValidator,
            limit_value=UserAccountConstants.MIN_PASSWORD_LENGTH,
            exception_message_DTO=PASSWORD_MIN_LENGTH_IS)

        min_length_validator(password)

        special_character_existence_validator = RegexValidator(
            regex=r"[\W+]",
            message=PASSWORD_AT_LEAST_1_SPECIAL_CHARACTER.message,
            code=PASSWORD_AT_LEAST_1_SPECIAL_CHARACTER.code)
        special_character_existence_validator(password)

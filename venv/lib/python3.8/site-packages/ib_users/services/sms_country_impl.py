from ib_users.interactors.third_party.sms_sender import SMSSender
from ib_users.utils.dtos import PhoneNumberDTO


class SMSCountryImpl(SMSSender):
    def __init__(self, message_template: str):
        self.message_template = message_template

    def send_reset_password_link(self, phone_number_dto: PhoneNumberDTO,
                                 link: str):
        self.send_sms(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            msg=self.message_template.format(link=link)
        )

    def send_otp(self, country_code, phone_number, otp):
        self.send_sms(
            country_code=country_code,
            phone_number=phone_number,
            msg=self.message_template.format(otp=otp)
        )

    def send_sms(self, msg, country_code, phone_number):
        self._send_sms_using_sms_country(
            msg=msg,
            country_code=country_code,
            phone_number=phone_number
        )

    def _send_sms_using_sms_country(self, msg, country_code, phone_number):
        import urllib.request, urllib.parse
        import urllib.error
        from django.conf import settings

        message_type = 'N'
        delivery_report_value = "Y"
        sender_id = settings.DEFAULT_SMS_SENDER_ID

        mobile_numbers = ','.join(["+{}{}".format(country_code, phone_number)])
        msg = self.get_ascii_string(msg)
        msg = msg.strip()

        params = {'message': msg, 'mtype': message_type,
                  'dr': delivery_report_value,
                  'User': settings.SMS_COUNTRY_USERNAME,
                  'passwd': settings.SMS_COUNTRY_PASSWORD,
                  'mobilenumber': mobile_numbers, 'sid': sender_id}

        encoded_params = urllib.parse.urlencode(params)

        uri = "http://api.smscountry.com/SMSCwebservice_bulk.aspx?" + \
              encoded_params

        try:
            print(urllib.request.urlopen(uri).read())
        except Exception as e:
            print("Send OTP Error ---> ", e)
            pass

        return

    @classmethod
    def get_ascii_string(cls, char_sequence):
        if isinstance(char_sequence, int):
            return char_sequence
        if cls.is_null_or_empty(char_sequence) or not len(char_sequence):
            return ''
        return ''.join([i if ord(i) < 128 else '' for i in char_sequence])

    @staticmethod
    def is_null_or_empty(field_name):
        if field_name is not None and field_name.strip() != "":
            return False
        return True

from django.db import models
from django.core.exceptions import ValidationError

from ib_common.models import AbstractDateTimeModel

from ib_users.models.user_account import UserAccount
from ib_users.constants.user_profile.model_validators import \
    NAME_MAX_LENGTH, GENDER_MAX_LENGTH, PROFILE_PIC_URL_MAX_LENGTH, \
    PHONE_NUMBER_MAX_LENGTH, COUNTRY_CODE_MAX_LENGTH, EMAIL_MAX_LENGTH, \
    LANGUAGE_PREFERENCE_MAX_LENGTH


def validate_gender(gender):
    from ib_users.constants.user_profile.enums import \
        Gender
    if gender not in Gender.get_list_of_values():
        from ib_users.constants.user_profile.error_messages import \
            INVALID_GENDER
        raise ValidationError(INVALID_GENDER)


def validate_language(language):
    from ib_users.constants.user_profile.enums import \
        Language
    if language not in Language.get_list_of_values():
        from ib_users.constants.user_profile.error_messages import \
            INVALID_LANGUAGE
        raise ValidationError(INVALID_LANGUAGE)


class UserProfile(AbstractDateTimeModel):
    name = models.CharField(max_length=NAME_MAX_LENGTH,
                            null=True, blank=True, default='')
    gender = models.CharField(max_length=GENDER_MAX_LENGTH,
                              validators=[validate_gender], null=True,
                              blank=True)
    dob = models.DateField(null=True, blank=True)
    profile_pic_url = models.TextField(null=True, blank=True)
    phone_number = models.CharField(max_length=PHONE_NUMBER_MAX_LENGTH, null=True,
                                    blank=True)
    is_phone_number_verified = models.BooleanField(null=True, blank=True)
    country_code = models.CharField(max_length=COUNTRY_CODE_MAX_LENGTH,
                                    null=True, blank=True)
    email = models.EmailField(max_length=EMAIL_MAX_LENGTH, null=True,
                              blank=True)
    is_email_verified = models.BooleanField(null=True, blank=True)
    language_preference = models.CharField(
        max_length=LANGUAGE_PREFERENCE_MAX_LENGTH, validators=[
            validate_language], null=True, blank=True)
    account = models.OneToOneField(
        UserAccount, on_delete=models.CASCADE, related_name="profile"
    )

    class Meta:
        app_label = 'ib_users'

    def __str__(self):
        return "<UserProfile: {id}-{name}>".format(id=self.id, name=self.name)

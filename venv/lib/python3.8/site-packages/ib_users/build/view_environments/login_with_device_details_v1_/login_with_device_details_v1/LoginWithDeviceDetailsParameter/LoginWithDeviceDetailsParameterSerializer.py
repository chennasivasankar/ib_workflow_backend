from rest_framework import serializers

from django_swagger_utils.drf_server.utils.decorator.deserialize import deserialize
from django_swagger_utils.drf_server.utils.server_gen.type_file_utils import get_type_object
from django_swagger_utils.drf_server.utils.server_gen.type_file_utils import get_type_list_object
from django_swagger_utils.drf_server.fields.collection_format_field import CollectionFormatField


class LoginWithDeviceDetailsParameterType(object):
    def __init__(self, login_type, device_id, phone_number=None, country_code=None, username=None, email=None, social_access_token=None, social_secret_token=None, password=None,  **kwargs):
        self.login_type = login_type
        self.device_id = device_id
        self.phone_number = phone_number
        self.country_code = country_code
        self.username = username
        self.email = email
        self.social_access_token = social_access_token
        self.social_secret_token = social_secret_token
        self.password = password

    def __str__(self):
        from django_swagger_utils.drf_server.utils.server_gen.get_unicode_str import get_unicode_str
        return get_unicode_str(self).encode('utf-8')

    def __getitem__(self, item):
        return getattr(self, item)


class LoginWithDeviceDetailsParameterSerializer(serializers.Serializer):
    phone_number = serializers.CharField(required=False, allow_blank=True, allow_null=True)
    country_code = serializers.CharField(required=False, allow_blank=True, allow_null=True)
    username = serializers.CharField(required=False, allow_blank=True, allow_null=True)
    email = serializers.CharField(required=False, allow_blank=True, allow_null=True)
    social_access_token = serializers.CharField(required=False, allow_blank=True, allow_null=True)
    social_secret_token = serializers.CharField(required=False, allow_blank=True, allow_null=True)
    password = serializers.CharField(required=False, allow_blank=True, allow_null=True)
    device_id = serializers.CharField()
    login_type = serializers.ChoiceField(choices=(('LOGIN_WITH_USERNAME_AND_PASSWORD', 'LOGIN_WITH_USERNAME_AND_PASSWORD'), ('LOGIN_WITH_EMAIL_AND_PASSWORD', 'LOGIN_WITH_EMAIL_AND_PASSWORD'), ('LOGIN_WITH_PHONE_NUMBER_AND_PASSWORD', 'LOGIN_WITH_PHONE_NUMBER_AND_PASSWORD'), ('LOGIN_WITH_TWITTER', 'LOGIN_WITH_TWITTER'), ('LOGIN_WITH_FB', 'LOGIN_WITH_FB'), ('LOGIN_WITH_GOOGLE', 'LOGIN_WITH_GOOGLE'), ('LOGIN_WITH_EMAIL_AND_OTP', 'LOGIN_WITH_EMAIL_AND_OTP'), ('LOGIN_WITH_PHONE_NUMBER_AND_OTP', 'LOGIN_WITH_PHONE_NUMBER_AND_OTP')))

    def create(self, validated_data):
        return LoginWithDeviceDetailsParameterType(**validated_data)

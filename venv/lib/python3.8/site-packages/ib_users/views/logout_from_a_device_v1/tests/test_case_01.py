"""
Success
"""

from . import APP_NAME, OPERATION_NAME, REQUEST_METHOD, URL_SUFFIX
from ib_users.utils.custom_test_utils import CustomTestUtils
from ib_users.constants.user_account_constants import SocialAccountProviderType

REQUEST_BODY = """
{
    "device_id": "device_id_1000"
}
"""

TEST_CASE = {
    "request": {
        "path_params": {},
        "query_params": {},
        "header_params": {},
        "securities": {"oauth": {"tokenUrl": "http://auth.ibtspl.com/oauth2/",
                                 "flow": "password", "scopes": ["read", "write"], "type": "oauth2"}},

        "body": REQUEST_BODY,
    },
}



class TestCase01LogoutFromADeviceV1APITestCase(CustomTestUtils):
    app_name = APP_NAME
    operation_name = OPERATION_NAME
    request_method = REQUEST_METHOD
    url_suffix = URL_SUFFIX
    test_case_dict = TEST_CASE

    def _create_user(self, username, password, is_staff=False):
        return self.user_account_list[0]

    def _get_access_token(self, user, app, scope='read write update delete'):
        access_token_object = \
            super(TestCase01LogoutFromADeviceV1APITestCase, self)._get_access_token(
            user, app, scope
        )
        access_token_object.token = 'access_token_1'
        access_token_object.save()
        return access_token_object

    def setUp(self):
        super(TestCase01LogoutFromADeviceV1APITestCase, self).setUp()
        self.user_account_list = self.populate_user_account()

        self.foo_user = self.user_account_list[0]
        self.populate_user_social_account(
            data=[
                {
                    "user_account": self.foo_user,
                    "provider_type": SocialAccountProviderType.FACEBOOK.value,
                    "social_id": "qwerty"
                }
            ]
        )
        self.populate_user_login_device_details(
            data=[
                {
                    "user_account": self.foo_user,
                    "access_token": "access_token_1",
                    "device_id": "device_id_1000"
                }
            ]
        )


    def test_case(self):
        self.default_test_case() # Returns response object.
        # Which can be used for further response object checks.
        # Add database state checks here.
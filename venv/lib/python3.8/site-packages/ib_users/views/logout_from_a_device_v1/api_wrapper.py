from django_swagger_utils.drf_server.exceptions import BadRequest
from django_swagger_utils.drf_server.utils.decorator.interface_decorator \
    import validate_decorator

from ib_users.interactors import LogoutFromADevice
from ib_users.interactors.storages.user_login_device_details_storage import \
    UserDeviceLoginDTO
from ib_users.signals import logout_success
from ib_users.storages.oauth2_sql_storage import OAuth2SQLStorage
from ib_users.storages.user_login_device_details_sql_storage import \
    UserLoginDeviceDetailsSQLStorage
from ib_users.third_party.oauth_user_auth_tokens_service import \
    OAuthUserAuthTokensService
from ib_users.validators.base_validator import CustomException
from .validator_class import ValidatorClass


@validate_decorator(validator_class=ValidatorClass)
def api_wrapper(*args, **kwargs):
    user = kwargs['user']
    request_data = kwargs['request_data']
    access_token = kwargs['access_token']

    user_accounts_sql_storage = UserLoginDeviceDetailsSQLStorage()
    login_token_generator = OAuthUserAuthTokensService(
        oauth2_storage=OAuth2SQLStorage()
    )
    logout_interactor = LogoutFromADevice(user_accounts_sql_storage,
                                          login_token_generator)
    user_logout_dto = UserDeviceLoginDTO(user.user_id,
                                         request_data["device_id"],
                                         access_token)

    try:
        logout_interactor.logout(user_logout_dto)
    except CustomException as e:
        raise BadRequest(message=e.error_message, res_status=e.error_type)

    logout_success.send_robust(sender=None, user=user, device_ids=[
        user_logout_dto.device_id])

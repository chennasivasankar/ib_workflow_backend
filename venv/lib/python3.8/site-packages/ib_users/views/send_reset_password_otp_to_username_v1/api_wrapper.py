from django_swagger_utils.drf_server.exceptions import BadRequest
from django_swagger_utils.drf_server.utils.decorator.interface_decorator \
    import validate_decorator

from ib_users.constants.otp_verification_constants import VerificationType
from ib_users.constants.res_status_constants import ResStatusConstants
from ib_users.interactors.exceptions.user_credentials_exceptions import \
    AccountWithUsernameDoesntExistException, ContactDetailsNotPresentException
from ib_users.interactors.user_credentials.send_otp_username_interactor \
    import \
    SendOTPUsernameInteractor
from ib_users.interactors.verify_otp_through import VerifyThroughOTPInteractor
from ib_users.storages import UserAccountsSQLStorage
from ib_users.third_party.otp_service_impl import OTPServiceImpl
from ib_users.validators.base_validator import CustomException
from .validator_class import ValidatorClass


@validate_decorator(validator_class=ValidatorClass)
def api_wrapper(*args, **kwargs):
    request_data = kwargs['request_data']
    username = request_data['username']

    storage = UserAccountsSQLStorage()
    verify_otp_interactor = VerifyThroughOTPInteractor(
        VerificationType.RESET_PASSWORD_WITH_OTP)
    otp_service = OTPServiceImpl(verify_otp_interactor)
    interactor = SendOTPUsernameInteractor(
        storage=storage, otp_service=otp_service)

    try:
        interactor.send_otp_given_username(username=username)
    except CustomException as exception:
        raise BadRequest(message=exception.error_message,
                         res_status=exception.error_type)
    except AccountWithUsernameDoesntExistException as exception:
        raise BadRequest(message=exception.message,
                         res_status=ResStatusConstants.ACCOUNT_WITH_THIS_USERNAME_DOESNT_EXIST)
    except ContactDetailsNotPresentException as exception:
        raise BadRequest(message=exception.message,
                         res_status=ResStatusConstants.NO_CONTACT_DETAILS)
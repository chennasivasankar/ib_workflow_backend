from django_swagger_utils.drf_server.utils.decorator.interface_decorator \
    import validate_decorator
from .validator_class import ValidatorClass


@validate_decorator(validator_class=ValidatorClass)
def api_wrapper(*args, **kwargs):
    from ib_users.interactors.user_profile_interactor import UserProfileInteractor
    from ib_users.storages.user_profile_sql_storage import UserProfileSQLStorage
    from ib_users.presenters.user_profile_json_presenter import UserProfileJSONPresenter
    from ib_users.third_party.pyotp_provider import PyOTPProvider
    from ib_users.conf.settings import TIME_INTERVAL_FOR_GENERATED_USER_CODE_IN_SECONDS
    from ib_users.interactors.exceptions.user_profile import \
        InvalidUserException

    user = kwargs['user']

    storage = UserProfileSQLStorage()
    presenter = UserProfileJSONPresenter()

    interactor = UserProfileInteractor(storage=storage, presenter=presenter)

    otp_provider = PyOTPProvider()

    try:
        user_code = interactor.generate_time_based_code_for_user(
            otp_provider=otp_provider,
            user_id=user['user_id'],
            configured_time_in_seconds=TIME_INTERVAL_FOR_GENERATED_USER_CODE_IN_SECONDS
        )
    except InvalidUserException as error:
        from django_swagger_utils.drf_server.exceptions import BadRequest
        raise BadRequest(message=error.error_message, res_status=error.error_type)

    return user_code

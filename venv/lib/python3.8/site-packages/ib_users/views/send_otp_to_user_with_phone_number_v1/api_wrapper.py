from django_swagger_utils.drf_server.exceptions import BadRequest, \
    ExpectationFailed
from django_swagger_utils.drf_server.utils.decorator.interface_decorator \
    import validate_decorator

from ib_users.constants.otp_verification_constants import VerificationType
from ib_users.exceptions.otp_verification_exceptions import \
    PhoneNumberIsBlackListedException
from ib_users.interactors import SendOTPToUserGivenPhoneNumber
from ib_users.interactors.storages.user_accounts_storage import PhoneNumberDTO
from ib_users.interactors.verify_otp_through import VerifyThroughOTPInteractor
from ib_users.third_party.otp_service_impl import OTPServiceImpl
from ib_users.storages import UserAccountsSQLStorage
from ib_users.validators.base_validator import CustomException
from ib_users.validators.phone_number_validator_impl import \
    PhoneNumberValidatorImpl
from .validator_class import ValidatorClass


@validate_decorator(validator_class=ValidatorClass)
def api_wrapper(*args, **kwargs):
    request_data = kwargs['request_data']
    phone_number = request_data["phone_number"]
    country_code = request_data["country_code"]

    phone_number_dto = PhoneNumberDTO(phone_number=phone_number,
                                      country_code=country_code)

    verify_otp_interactor = VerifyThroughOTPInteractor(
        VerificationType.LOGIN_WITH_OTP)
    otp_sender_to_user = SendOTPToUserGivenPhoneNumber(
        storage=UserAccountsSQLStorage(),
        otp_service=OTPServiceImpl(verify_otp_interactor),
        phone_number_validator=PhoneNumberValidatorImpl())

    try:
        otp_sender_to_user.send_otp(phone_number_dto)
    except CustomException as e:
        raise BadRequest(message=e.error_message, res_status=e.error_type)
    except PhoneNumberIsBlackListedException as e:
        raise ExpectationFailed(
            message=e.message,
            res_status=e.error_type)

from django_swagger_utils.drf_server.exceptions import BadRequest
from django_swagger_utils.drf_server.utils.decorator.interface_decorator \
    import validate_decorator
from ib_users.constants.res_status_constants import ResStatusConstants
from ib_users.constants.user_account_constants import UserAccountConstants
from ib_users.exceptions.registration_exceptions import \
    AccountWithThisPhoneNumberAlreadyExistsException, \
    UsernameAlreadyExistsException
from ib_users.interactors.registration.phone_number_registration_interactor import \
    PhoneNumberRegistrationInteractor
from ib_users.interactors.registration.DTOs.registration_dtos import \
    CreateAccountWithPhoneNumberDTO
from ib_users.presenters.registration_json_presenter import \
    RegistrationJSONPresenter
from ib_users.storages import UserAccountsSQLStorage
from ib_users.validators.base_validator import CustomException
from ib_users.validators.phone_number_validator_impl import \
    PhoneNumberValidatorImpl
from .validator_class import ValidatorClass


@validate_decorator(validator_class=ValidatorClass)
def api_wrapper(*args, **kwargs):
    request_data = kwargs['request_data']
    phone_number = request_data['phone_number']
    country_code = request_data['country_code']
    username = request_data.get("username", None)
    password = request_data.get("password",
                                UserAccountConstants.DEFAULT_PASSWORD)

    interactor = PhoneNumberRegistrationInteractor(
        accounts_storage=UserAccountsSQLStorage(),
        presenter=RegistrationJSONPresenter(),
        phone_numbers_validator=PhoneNumberValidatorImpl()
    )

    create_account_dto = CreateAccountWithPhoneNumberDTO(
        phone_number=phone_number,
        country_code=country_code,
        password=password,
        username=username
    )

    try:
        return interactor.create_account_with_phone_number(
            create_account_dto)

    except CustomException as exception:
        raise BadRequest(message=exception.error_message,
                         res_status=exception.error_type)
    except UsernameAlreadyExistsException as exception:
        raise BadRequest(message=exception.message,
                         res_status=ResStatusConstants.USERNAME_ALREADY_USED)
    except AccountWithThisPhoneNumberAlreadyExistsException as exception:
        raise BadRequest(
            message=exception.message,
            res_status=ResStatusConstants.PHONE_NUMBER_ALREADY_USED)
from django_swagger_utils.drf_server.exceptions import BadRequest
from django_swagger_utils.drf_server.utils.decorator.interface_decorator \
    import validate_decorator

from ib_users.interactors import RefreshAuthTokens
from ib_users.presenters import UserLoginJSONPresenter
from ib_users.storages.user_login_device_details_sql_storage import \
    UserLoginDeviceDetailsSQLStorage
from ib_users.third_party.oauth_user_auth_tokens_service import \
    OAuthUserAuthTokensService
from ib_users.storages.oauth2_sql_storage import OAuth2SQLStorage
from ib_users.validators.base_validator import CustomException
from .validator_class import ValidatorClass
from ...storages import UserAccountsSQLStorage


@validate_decorator(validator_class=ValidatorClass)
def api_wrapper(*args, **kwargs):
    request_data = kwargs['request_data']
    refresh_token = request_data["refresh_token"]
    access_token = kwargs['access_token']

    oauth2_sql_storage = OAuth2SQLStorage()
    accounts_storage = UserAccountsSQLStorage()

    login_token_generator = OAuthUserAuthTokensService(
        oauth2_storage=oauth2_sql_storage)

    login_interactor = RefreshAuthTokens(
        login_token_generator=login_token_generator,
        presenter=UserLoginJSONPresenter(),
        storage=UserLoginDeviceDetailsSQLStorage(),
        accounts_storage=accounts_storage
    )

    try:
        success_response_json = login_interactor.refresh_tokens(
            refresh_token=refresh_token,
            access_token=access_token)
    except CustomException as e:
        raise BadRequest(message=e.error_message, res_status=e.error_type)
    return success_response_json

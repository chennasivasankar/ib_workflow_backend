from django_swagger_utils.drf_server.exceptions import BadRequest
from django_swagger_utils.drf_server.utils.decorator.interface_decorator \
    import validate_decorator

from ib_users.constants.otp_verification_constants import VerificationType
from ib_users.constants.res_status_constants import ResStatusConstants
from ib_users.interactors.exceptions.user_credentials_exceptions import \
    AccountWithEmailDoesntExistException
from ib_users.exceptions.otp_verification_exceptions import \
    InvalidOTPException
from ib_users.interactors.user_credentials.DTOs.user_credentials_dtos import \
    ResetPasswordWithOTPEmailDTO
from ib_users.interactors.user_credentials\
    .reset_password_with_otp_email_interactor import \
    ResetPasswordWithOTPEmailInteractor
from ib_users.interactors.verify_otp_through import VerifyThroughOTPInteractor
from ib_users.storages import UserAccountsSQLStorage
from ib_users.third_party.otp_service_impl import OTPServiceImpl
from ib_users.validators.base_validator import CustomException
from .validator_class import ValidatorClass


@validate_decorator(validator_class=ValidatorClass)
def api_wrapper(*args, **kwargs):
    request_data = kwargs['request_data']
    email = request_data['email']
    otp = request_data['otp']
    new_password = request_data['new_password']

    reset_password_dto = ResetPasswordWithOTPEmailDTO(
        email=email, otp=otp, new_password=new_password)

    storage = UserAccountsSQLStorage()
    verify_otp_interactor = VerifyThroughOTPInteractor(
        VerificationType.RESET_PASSWORD_WITH_OTP)
    interactor = ResetPasswordWithOTPEmailInteractor(
        storage=storage, otp_service=OTPServiceImpl(verify_otp_interactor))

    try:
        interactor.reset_password_with_otp_email(reset_password_dto=reset_password_dto)
    except CustomException as exception:
        raise BadRequest(message=exception.error_message,
                         res_status=exception.error_type)
    except AccountWithEmailDoesntExistException as exception:
        raise BadRequest(message=exception.message,
                         res_status=ResStatusConstants.ACCOUNT_WITH_THIS_EMAIL_DOESNT_EXIST)
    except InvalidOTPException as exception:
        raise BadRequest(message=exception.message,
                         res_status=ResStatusConstants.INVALID_OTP)

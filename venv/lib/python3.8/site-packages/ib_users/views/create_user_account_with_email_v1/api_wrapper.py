from django_swagger_utils.drf_server.exceptions import BadRequest
from django_swagger_utils.drf_server.utils.decorator.interface_decorator \
    import validate_decorator
from ib_users.constants.res_status_constants import ResStatusConstants
from ib_users.constants.user_account_constants import UserAccountConstants
from ib_users.interactors.registration.email_registration_interactor import \
    EmailRegistrationInteractor
from ib_users.exceptions.registration_exceptions import \
    AccountWithThisEmailAlreadyExistsException, UsernameAlreadyExistsException
from ib_users.interactors.registration.DTOs.registration_dtos import \
    CreateAccountWithEmailDTO
from ib_users.presenters.registration_json_presenter import \
    RegistrationJSONPresenter
from ib_users.storages import UserAccountsSQLStorage
from ib_users.validators.base_validator import CustomException
from .validator_class import ValidatorClass


@validate_decorator(validator_class=ValidatorClass)
def api_wrapper(*args, **kwargs):
    request_data = kwargs['request_data']
    email = request_data['email']
    username = request_data.get('username', None)
    password = request_data.get('password',
                                UserAccountConstants.DEFAULT_PASSWORD)

    storage = UserAccountsSQLStorage()
    presenter = RegistrationJSONPresenter()
    interactor = EmailRegistrationInteractor(
        accounts_storage=storage, presenter=presenter)

    create_account_dto = CreateAccountWithEmailDTO(
        email=email,
        password=password,
        username=username
    )

    try:
        return interactor.create_account_with_email(create_account_dto)
    except CustomException as exception:
        raise BadRequest(message=exception.error_message,
                         res_status=exception.error_type)
    except UsernameAlreadyExistsException as exception:
        raise BadRequest(message=exception.message,
                         res_status=ResStatusConstants.USERNAME_ALREADY_USED)
    except AccountWithThisEmailAlreadyExistsException as exception:
        raise BadRequest(message=exception.message,
                         res_status=ResStatusConstants.EMAIL_ALREADY_USED)

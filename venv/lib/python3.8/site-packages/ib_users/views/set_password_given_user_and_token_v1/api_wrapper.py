from django_swagger_utils.drf_server.exceptions import BadRequest
from django_swagger_utils.drf_server.utils.decorator.interface_decorator \
    import validate_decorator

from ib_users.constants.res_status_constants import ResStatusConstants
from ib_users.interactors.exceptions.user_credentials_exceptions import \
    InvalidTokenException, TokenExpiredException, InvalidUserIdException, \
    CurrentPasswordMismatchException
from ib_users.interactors.user_credentials\
    .set_password_given_user_token_interactor import \
    SetPasswordGivenUserTokenInteractor
from ib_users.storages import UserAccountsSQLStorage
from ib_users.storages.user_password_reset_token_storage_impl import \
    UserPasswordResetTokenStorageImpl
from ib_users.validators.base_validator import CustomException

from .validator_class import ValidatorClass


@validate_decorator(validator_class=ValidatorClass)
def api_wrapper(*args, **kwargs):
    request_data = kwargs['request_data']
    user_id = request_data['user_id']
    token = request_data['token']
    new_password = request_data['new_password']

    token_storage = UserPasswordResetTokenStorageImpl()
    accounts_storage = UserAccountsSQLStorage()
    interactor = SetPasswordGivenUserTokenInteractor(
        token_storage=token_storage, accounts_storage=accounts_storage)

    try:
        interactor.set_password_given_user_and_token(
            user_id=user_id, token=token, new_password=new_password)
    except CustomException as exception:
        raise BadRequest(message=exception.error_message,
                         res_status=exception.error_type)
    except InvalidUserIdException as exception:
        raise BadRequest(message=exception.message,
                         res_status=ResStatusConstants.INVALID_USER_ID)
    except InvalidTokenException as exception:
        raise BadRequest(message=exception.message,
                         res_status=ResStatusConstants.INVALID_TOKEN)
    except TokenExpiredException as exception:
        raise BadRequest(message=exception.message,
                         res_status=ResStatusConstants.TOKEN_EXPIRED)
    except CurrentPasswordMismatchException as exception:
        raise BadRequest(message=exception.message,
                         res_status=ResStatusConstants.CURRENT_PASSWORD_MISMATCH)
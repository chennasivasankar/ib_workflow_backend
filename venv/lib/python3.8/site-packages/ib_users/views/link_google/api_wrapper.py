from django_swagger_utils.drf_server.exceptions import BadRequest
from django_swagger_utils.drf_server.utils.decorator.interface_decorator \
    import validate_decorator

from ib_users.exceptions.user_account_exceptions import UserDoesNotExist, \
    InvalidAction, SocialAccountAlreadyTaken
from ib_users.interactors.user_account_interactor import UserAccountInteractor
from ib_users.storages import UserAccountsSQLStorage
from ib_users.storages.user_social_account_sql_storage import \
    UserSocialAccountsSQLStorage
from ib_users.validators.base_validator import CustomException
from .validator_class import ValidatorClass


@validate_decorator(validator_class=ValidatorClass)
def api_wrapper(*args, **kwargs):
    from ib_users.third_party.social_account.google_account import \
        GoogleAccount
    user = kwargs['user']
    request_data = kwargs['request_data']
    google_access_token = request_data['google_access_token']

    storage = UserAccountsSQLStorage()
    social_account_storage = UserSocialAccountsSQLStorage()
    user_account_interactor = UserAccountInteractor(
        account_storage=storage, social_account_storage=social_account_storage)

    try:
        user_account_interactor.link_social_account(
            user_id=user.user_id,
            social_account=GoogleAccount(),
            access_token=google_access_token
        )

    except CustomException as e:
        raise BadRequest(message=e.error_message, res_status=e.error_type)
    except (SocialAccountAlreadyTaken, UserDoesNotExist) as exception:
        raise BadRequest(message=exception.message,
                         res_status=exception.error_type)
    except InvalidAction as exception:
        raise BadRequest(message=exception.message,
                         res_status=exception.error_type)

from django_swagger_utils.drf_server.exceptions import BadRequest, \
    ExpectationFailed
from django_swagger_utils.drf_server.utils.decorator.interface_decorator \
    import validate_decorator

from ib_users.constants.otp_verification_constants import VerificationType
from ib_users.exceptions.otp_verification_exceptions import \
    EmailIsBlackListedException
from ib_users.interactors import SendOTPToUserGivenEmail
from ib_users.interactors.verify_otp_through import VerifyThroughOTPInteractor
from ib_users.third_party.otp_service_impl import OTPServiceImpl
from ib_users.storages import UserAccountsSQLStorage
from ib_users.validators.base_validator import CustomException
from .validator_class import ValidatorClass


@validate_decorator(validator_class=ValidatorClass)
def api_wrapper(*args, **kwargs):
    request_data = kwargs['request_data']
    email = request_data["email"]

    verify_otp_interactor = VerifyThroughOTPInteractor(
        VerificationType.LOGIN_WITH_OTP)
    otp_sender_to_user = SendOTPToUserGivenEmail(
        storage=UserAccountsSQLStorage(),
        otp_service=OTPServiceImpl(verify_otp_interactor))

    try:
        otp_sender_to_user.send_otp(email)
    except CustomException as e:
        raise BadRequest(message=e.error_message, res_status=e.error_type)
    except EmailIsBlackListedException as e:
        raise ExpectationFailed(
            message=e.message,
            res_status=e.error_type)
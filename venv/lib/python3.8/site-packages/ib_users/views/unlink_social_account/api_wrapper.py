from django_swagger_utils.drf_server.utils.decorator.interface_decorator \
    import validate_decorator

from ib_users.constants.user_account_constants import \
    SocialAccountProviderType
from ib_users.exceptions.custom_exception_constants import \
    INVALID_SOCIAL_PROVIDER_TYPE
from ib_users.storages import UserAccountsSQLStorage
from ib_users.storages.user_social_account_sql_storage import \
    UserSocialAccountsSQLStorage
from .validator_class import ValidatorClass
from django_swagger_utils.drf_server.exceptions import BadRequest


@validate_decorator(validator_class=ValidatorClass)
def api_wrapper(*args, **kwargs):
    user = kwargs['user']
    request_data = kwargs['request_data']
    social_provider = request_data['social_provider']

    storage = UserAccountsSQLStorage()
    user_social_account_storage = UserSocialAccountsSQLStorage()

    from ib_users.interactors.user_account_interactor import \
        UserAccountInteractor

    user_account_interactor = UserAccountInteractor(
        storage, user_social_account_storage)

    social_account = None
    if social_provider == SocialAccountProviderType.FACEBOOK.value:
        from ib_users.third_party.social_account.facebook_account import \
            FacebookAccount
        social_account = FacebookAccount()
    elif social_provider == SocialAccountProviderType.TWITTER.value:
        from ib_users.third_party.social_account.twitter_account import \
            TwitterAccount
        social_account = TwitterAccount()
    elif social_provider == SocialAccountProviderType.GOOGLE.value:
        from ib_users.third_party.social_account.google_account import \
            GoogleAccount
        social_account = GoogleAccount()
    else:
        raise BadRequest(message=INVALID_SOCIAL_PROVIDER_TYPE.message,
                         res_status=INVALID_SOCIAL_PROVIDER_TYPE.error_type)

    from ib_users.exceptions.user_account_exceptions import \
        InvalidAction
    try:
        user_account_interactor.unlink_social_account(
            user_id=user.user_id, social_account=social_account)
    except InvalidAction as exception:
        raise BadRequest(message=exception.message,
                         res_status=exception.error_type)
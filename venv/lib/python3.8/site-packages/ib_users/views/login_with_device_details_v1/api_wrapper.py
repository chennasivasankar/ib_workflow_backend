from django_swagger_utils.drf_server.exceptions import BadRequest
from django_swagger_utils.drf_server.utils.decorator.interface_decorator \
    import validate_decorator

from ib_users.exceptions.custom_exception_constants import INVALID_LOGIN_TYPE
from ib_users.exceptions.invalid_login_type_exception import \
    InvalidLoginTypeException
from ib_users.utils.views.login_controllers_common import \
    login_user_to_device, \
    get_login_interactor_and_login_dto_for_login_type
from .validator_class import ValidatorClass


@validate_decorator(validator_class=ValidatorClass)
def api_wrapper(*args, **kwargs):
    request_data = kwargs['request_data']
    login_type = request_data['login_type']
    device_id = request_data["device_id"]

    try:
        login_interactor, login_dto = \
            get_login_interactor_and_login_dto_for_login_type(
                login_type=login_type,
                request_data=request_data
            )
    except InvalidLoginTypeException:
        raise BadRequest(
            message=INVALID_LOGIN_TYPE.message,
            res_status=INVALID_LOGIN_TYPE.code)

    return login_user_to_device(
        login_interactor=login_interactor,
        login_dto=login_dto,
        device_id=device_id
    )

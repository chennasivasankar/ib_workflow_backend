from django_swagger_utils.drf_server.exceptions import BadRequest
from django_swagger_utils.drf_server.utils.decorator.interface_decorator \
    import validate_decorator

from ib_users.constants.res_status_constants import ResStatusConstants
from ib_users.interactors.exceptions.user_credentials_exceptions import \
    InvalidUserIdException
from ib_users.interactors.user_credentials.exceptions \
    .user_credentials_exceptions import \
    InvalidCurrentPasswordException, InvalidNewPasswordException
from ib_users.interactors.user_credentials.update_user_password_interactor \
    import \
    UpdateUserPasswordInteractor
from ib_users.storages import UserAccountsSQLStorage
from .validator_class import ValidatorClass


@validate_decorator(validator_class=ValidatorClass)
def api_wrapper(*args, **kwargs):
    user = kwargs['user']
    request_data = kwargs['request_data']
    current_password = request_data['current_password']
    new_password = request_data['new_password']

    storage = UserAccountsSQLStorage()
    interactor = UpdateUserPasswordInteractor(storage=storage)

    try:
        interactor.update_user_password(
            user_id=user.user_id,
            current_password=current_password,
            new_password=new_password
        )
    except InvalidCurrentPasswordException as exception:
        raise BadRequest(message=exception.message,
                         res_status=ResStatusConstants.INVALID_CURRENT_PASSWORD)
    except InvalidNewPasswordException as exception:
        raise BadRequest(message=exception.message,
                         res_status=ResStatusConstants.INVALID_NEW_PASSWORD)
    except InvalidUserIdException as exception:
        raise BadRequest(message=exception.message,
                         res_status=ResStatusConstants.INVALID_USER_ID)
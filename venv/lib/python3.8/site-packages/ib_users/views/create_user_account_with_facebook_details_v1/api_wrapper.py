from django_swagger_utils.drf_server.exceptions import BadRequest
from django_swagger_utils.drf_server.utils.decorator.interface_decorator \
    import validate_decorator

from ib_users.constants.res_status_constants import ResStatusConstants
from ib_users.constants.user_account_constants import SocialAccountProviderType
from ib_users.exceptions.registration_exceptions import \
    AccountWithSocialDetailsAlreadyExistsException, \
    InvalidSocialDetailsException
from ib_users.interactors import SocialRegistrationInteractor
from ib_users.presenters.registration_json_presenter import \
    RegistrationJSONPresenter
from ib_users.storages.user_social_account_sql_storage import \
    UserSocialAccountsSQLStorage
from ib_users.validators.base_validator import CustomException
from .validator_class import ValidatorClass


@validate_decorator(validator_class=ValidatorClass)
def api_wrapper(*args, **kwargs):
    from ib_users.third_party.social_account.facebook_account import \
        FacebookAccount
    request_data = kwargs['request_data']
    access_token = request_data['access_token']

    presenter = RegistrationJSONPresenter()
    interactor = SocialRegistrationInteractor(
        accounts_storage=UserSocialAccountsSQLStorage(),
        presenter=presenter,
        social_sdk=FacebookAccount())

    try:
        return interactor.create_account_with_social_details(
            social_provider=SocialAccountProviderType.FACEBOOK.value,
            access_token=access_token
        )

    except CustomException as e:
        raise BadRequest(message=e.error_message, res_status=e.error_type)
    except InvalidSocialDetailsException as e:
        raise BadRequest(message=e.message,
                         res_status=ResStatusConstants.INVALID_FB_DETAILS)
    except AccountWithSocialDetailsAlreadyExistsException as e:
        RegistrationJSONPresenter.handle_social_account_already_exists(e)


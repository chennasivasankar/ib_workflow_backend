from django_swagger_utils.drf_server.utils.decorator.interface_decorator \
    import validate_decorator
from .validator_class import ValidatorClass


@validate_decorator(validator_class=ValidatorClass)
def api_wrapper(*args, **kwargs):
    from ib_users.interactors.user_profile_interactor import UserProfileInteractor
    from ib_users.storages.user_profile_sql_storage import UserProfileSQLStorage
    from ib_users.presenters.user_profile_json_presenter import UserProfileJSONPresenter
    from ib_users.interactors.exceptions.user_profile import \
        InvalidUserException
    from ib_users.constants.otp_verification_constants import VerificationType
    from ib_users.interactors.verify_otp_through import VerifyThroughOTPInteractor
    from ib_users.storages import UserAccountsSQLStorage
    from ib_users.third_party.otp_service_impl import OTPServiceImpl

    user = kwargs['user']

    request_data = kwargs['request_data']

    otp = request_data['otp']

    storage = UserProfileSQLStorage()
    presenter = UserProfileJSONPresenter()
    otp_interactor = VerifyThroughOTPInteractor(VerificationType.VERIFY_EMAIL_WITH_OTP)

    interactor = UserProfileInteractor(storage=storage, presenter=presenter)

    accounts_storage = UserAccountsSQLStorage()
    try:
        interactor.verify_and_link_user_email_to_account(
            accounts_storage=accounts_storage,
            user_id=user.user_id,
            otp_service=OTPServiceImpl(otp_interactor),
            otp=otp)
    except InvalidUserException as error:
        from django_swagger_utils.drf_server.exceptions import BadRequest
        raise BadRequest(message=error.error_message,
                         res_status=error.error_type)

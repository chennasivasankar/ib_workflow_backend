from ib_users.constants.model_validators import OTP_MAX_LENGTH


class ExceptionMessage:
    GIVEN_PHONE_NUMBER_IS_BLACK_LISTED = 'Given phone number is black listed'
    GIVEN_PHONE_NUMBER_IS_NOT_BLACK_LISTED = \
        'Given phone number is not black listed'
    ENTER_A_VALID_PHONE_NUMBER = 'Enter a valid phone number'
    RETRY_AFTER_X_DURATION = 'Please retry after some time'
    PHONE_NUMBER_ALREADY_VERIFIED = 'Phone number already verified'
    EMAIL_ALREADY_VERIFIED = 'Email already verified'
    OTP_IS_EXPIRED = 'OTP is expired'
    ENTER_A_VALID_OTP = 'Enter a valid OTP'
    OTP_IS_EMPTY = 'OTP is empty'
    OTP_SHOULD_CONTAIN_ONLY_NUMBERS = 'OTP must contain only numbers'
    OTP_SHOULD_CONTAIN_X_DIGITS = 'OTP should contain {} digits' \
        .format(OTP_MAX_LENGTH)

    GIVEN_EMAIL_IS_BLACK_LISTED = 'Given email is black listed'
    ENTER_A_VALID_EMAIL = 'Enter a valid email'
    INVALID_VERIFICATION_TYPE = 'Invalid verification type'
    INVALID_PHONE_NUMBER_OR_EMAIL = 'Invalid phone number or email'


class ErrorType:
    PHONE_NUMBER_BLACKLISTED = "PHONE_NUMBER_BLACKLISTED"
    PHONE_NUMBER_IS_NOT_BLACKLISTED = "PHONE_NUMBER_IS_NOT_BLACKLISTED"
    EMAIL_BLACKLISTED = "EMAIL_BLACKLISTED"
    INVALID_PHONE_NUMBER = "INVALID_PHONE_NUMBER"
    RETRIES_LIMIT_EXCEEDED = "RETRIES_LIMIT_EXCEEDED"
    OTP_IS_EXPIRED = "OTP_IS_EXPIRED"
    INVALID_OTP = "INVALID_OTP"
    INVALID_EMAIL = 'INVALID_EMAIL'
    INVALID_VERIFICATION_TYPE = 'INVALID_VERIFICATION_TYPE'
    INVALID_PHONE_NUMBER_OR_EMAIL = 'INVALID_PHONE_NUMBER_OR_EMAIL'


class BaseException(Exception):
    def __init__(self, message: str, error_type: str):
        super().__init__(message)
        self.message = message
        self.error_type = error_type


class BlackListException(BaseException):
    def __init__(self, message: str, error_type: str):
        super().__init__(message, error_type)


class PhoneNumberIsBlackListedException(BaseException):
    def __init__(self, message: str, error_type: str):
        super().__init__(message, error_type)


class EmailIsBlackListedException(BaseException):
    def __init__(self, message: str, error_type: str):
        super().__init__(message, error_type)


class InvalidPhoneNumberException(BaseException):
    def __init__(self, message: str):
        super().__init__(message, error_type=ErrorType.INVALID_PHONE_NUMBER)


class MaxRetriesExceededException(BaseException):
    def __init__(self, message):
        super().__init__(message, error_type=ErrorType.RETRIES_LIMIT_EXCEEDED)
        self.message = message


class OTPExpiredException(BaseException):
    def __init__(self, message):
        super().__init__(message, error_type=ErrorType.OTP_IS_EXPIRED)
        self.message = message


class InvalidOTPException(BaseException):
    def __init__(self, message):
        super().__init__(message, error_type=ErrorType.INVALID_OTP)
        self.message = message


class InvalidEmailException(BaseException):
    def __init__(self, message):
        super().__init__(message, error_type=ErrorType.INVALID_EMAIL)
        self.message = message


class InvalidVerificationType(BaseException):
    def __init__(self, message=ExceptionMessage.INVALID_VERIFICATION_TYPE):
        super().__init__(message=message,
                         error_type=ErrorType.INVALID_VERIFICATION_TYPE)
        self.message = message


class InvalidPhoneNumberOrEmailException(BaseException):
    def __init__(self, message=ExceptionMessage.INVALID_PHONE_NUMBER_OR_EMAIL):
        super().__init__(message=message,
                         error_type=ErrorType.INVALID_PHONE_NUMBER_OR_EMAIL)
        self.message = message

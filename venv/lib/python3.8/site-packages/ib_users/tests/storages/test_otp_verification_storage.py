from datetime import datetime, timedelta
from freezegun import freeze_time
import pytest

from ib_users.constants.otp_verification_constants import OTPStatus, \
    VerificationType, OTP_MAX_RETRIES_COUNT, OTP_EXPIRY_TIME_IN_SEC
from ib_users.models import OTPVerification, OTPBlacklist, OTPWhitelist
from ib_users.storages.otp_verification_sql_storage import \
    OTPVerificationSQLStorage
from ib_users.utils.dtos import PhoneNumberDTO


class TestOTPVerificationStorage:

    @pytest.fixture
    def setup(self):
        otp_sql_storage = OTPVerificationSQLStorage()
        phone_number_dto = PhoneNumberDTO(
            country_code="+91",
            phone_number="9705896317"
        )
        otp = "123456"
        return otp_sql_storage, phone_number_dto, otp

    @pytest.mark.django_db
    @pytest.mark.parametrize('otp_status', [
        OTPStatus.NOT_REQUESTED,
        OTPStatus.ACTIVE,
        OTPStatus.EXPIRED
    ])
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP
    ])
    def test_get_otp_status(self, setup, otp_status: OTPStatus,
                            verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        if otp_status == OTPStatus.EXPIRED:
            OTPVerification.objects.create(
                country_code=phone_number_dto.country_code,
                phone_number=phone_number_dto.phone_number,
                otp=otp,
                expiry_datetime=datetime.now() - timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
                verification_type=verification_type.value
            )
        elif otp_status == OTPStatus.ACTIVE:
            OTPVerification.objects.create(
                country_code=phone_number_dto.country_code,
                phone_number=phone_number_dto.phone_number,
                otp=otp,
                expiry_datetime=datetime.now() + timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
                verification_type=verification_type.value
            )
        else:
            pass

        assert otp_sql_storage.get_otp_status(
            phone_number_dto=phone_number_dto,
            verification_type=verification_type
        ) is otp_status

    @pytest.mark.django_db
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP
    ])
    def test_update_otp_details_when_otp_is_expired(self, setup,
                            verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        OTPVerification.objects.create(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            otp=otp,
            expiry_datetime=datetime.now() -
                            timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value
        )

        new_otp = "654321"
        otp_sql_storage.update_otp_details(
            phone_number_dto=phone_number_dto,
            otp=new_otp,
            expiry_time_in_sec=OTP_EXPIRY_TIME_IN_SEC,
            verification_type=verification_type
        )

        otp_list = OTPVerification.objects.filter(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            verification_type=verification_type.value
        )
        assert otp_list.count() == 1
        assert otp_list[0].otp == new_otp

    @pytest.mark.django_db
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP
    ])
    @freeze_time("2019-06-05 10:00:00")
    def test_update_otp_details_when_otp_is_not_expired(self, setup,
                                        verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup

        OTPVerification.objects.create(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            otp=otp,
            expiry_datetime=datetime.now() + timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value
        )

        otp_sql_storage.update_otp_details(
            phone_number_dto=phone_number_dto,
            otp=otp,
            expiry_time_in_sec=OTP_EXPIRY_TIME_IN_SEC,
            verification_type=verification_type
        )

        updated_expiry_datetime = datetime.now() + \
               timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC)

        otp_list = OTPVerification.objects.filter(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            verification_type=verification_type.value
        )
        assert otp_list.count() == 1
        assert otp_list[0].otp == otp
        assert otp_list[0].expiry_datetime == updated_expiry_datetime

    @pytest.mark.django_db
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP
    ])
    def test_create_otp_verification_when_otp_is_not_requested(self, setup,
                                        verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup

        otp_sql_storage.create_otp_verification(
            phone_number_dto=phone_number_dto,
            otp=otp,
            expiry_time_in_sec=OTP_EXPIRY_TIME_IN_SEC,
            verification_type=verification_type
        )
        otp_list = OTPVerification.objects.filter(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            verification_type=verification_type.value
        )

        assert otp_list.count() == 1
        assert otp_list[0].otp == otp

    @pytest.mark.django_db
    @pytest.mark.parametrize('retries_count', [
        OTP_MAX_RETRIES_COUNT - 1,
        OTP_MAX_RETRIES_COUNT
    ])
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP
    ])
    def test_is_exceeded_max_retries_count(self, setup,
                                           retries_count: int,
                                           verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup

        OTPVerification.objects.create(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            otp=otp,
            expiry_datetime=datetime.now() +
                            timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value,
            retries_count=retries_count
        )

        is_exceeded = otp_sql_storage.is_exceeded_max_retries_count(
            phone_number_dto=phone_number_dto,
            verification_type=verification_type
        )

        if retries_count < OTP_MAX_RETRIES_COUNT:
            assert is_exceeded == False
        else:
            assert is_exceeded

    @pytest.mark.django_db
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP
    ])
    def test_get_otp_details(self, setup, verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup

        OTPVerification.objects.create(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            otp=otp,
            expiry_datetime=datetime.now() +
                            timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value
        )

        get_otp_details_dto = otp_sql_storage.get_otp_details(
            phone_number_dto=phone_number_dto,
            verification_type=verification_type
        )

        assert get_otp_details_dto.otp == otp

    @pytest.mark.django_db
    @pytest.mark.parametrize('otp_to_be_verified', [
        "123456",
        "998877"
    ])
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP
    ])
    def test_is_otp_matched(self, setup, otp_to_be_verified: str,
                                    verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        OTPVerification.objects.create(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            otp=otp,
            expiry_datetime=datetime.now() +
                            timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value
        )

        is_matched = otp_sql_storage.is_otp_matched(
            phone_number_dto=phone_number_dto,
            otp_to_be_verified=otp_to_be_verified,
            verification_type=verification_type
        )
        if otp_to_be_verified == otp:
            assert is_matched
        else:
            assert  is_matched == False

    @pytest.mark.django_db
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP
    ])
    def test_increase_retries_count_by_one(self, setup,
                                        verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        OTPVerification.objects.create(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            otp=otp,
            expiry_datetime=datetime.now() +
                            timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value
        )

        otp_sql_storage.increase_retries_count_by_one(
            phone_number_dto=phone_number_dto,
            verification_type=verification_type
        )

        created_otp = OTPVerification.objects.get(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            verification_type=verification_type.value
        )

        assert created_otp.retries_count == 1

    @pytest.mark.django_db
    @pytest.mark.parametrize('otp_status', [
        OTPStatus.NOT_REQUESTED,
        OTPStatus.ACTIVE,
        OTPStatus.EXPIRED
    ])
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP,
        VerificationType.VERIFY_EMAIL_WITH_OTP
    ])
    def test_get_otp_status_by_email(self, setup, otp_status: OTPStatus,
                                     verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        email = "tdd@testing.com"
        if otp_status == OTPStatus.EXPIRED:
            OTPVerification.objects.create(
                email=email,
                otp=otp,
                expiry_datetime=datetime.now() - timedelta(
                    seconds=OTP_EXPIRY_TIME_IN_SEC),
                verification_type=verification_type.value
            )
        elif otp_status == OTPStatus.ACTIVE:
            OTPVerification.objects.create(
                email=email,
                otp=otp,
                expiry_datetime=datetime.now() + timedelta(
                    seconds=OTP_EXPIRY_TIME_IN_SEC),
                verification_type=verification_type.value
            )
        assert otp_sql_storage.get_otp_status_by_email(
            email=email,
            verification_type=verification_type
        ) is otp_status

    @pytest.mark.django_db
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP,
        VerificationType.VERIFY_EMAIL_WITH_OTP
    ])
    def test_create_otp_verification_for_email_when_otp_is_not_requested(self,
                            setup, verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        email = "tdd@testing.com"
        otp_sql_storage.create_otp_verification_for_email(
            email=email,
            otp=otp,
            expiry_time_in_sec=OTP_EXPIRY_TIME_IN_SEC,
            verification_type=verification_type
        )
        otp_list = OTPVerification.objects.filter(
            email=email,
            verification_type=verification_type.value
        )

        assert otp_list.count() == 1
        assert otp_list[0].otp == otp

    @pytest.mark.django_db
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP,
        VerificationType.VERIFY_EMAIL_WITH_OTP
    ])
    def test_update_otp_details_by_email_when_otp_is_expired(self, setup,
                                        verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        email = "tdd@testing.com"
        OTPVerification.objects.create(
            email=email,
            otp=otp,
            expiry_datetime=datetime.now() -
                            timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value
        )

        new_otp = "654321"
        otp_sql_storage.update_otp_details_by_email(
            email=email,
            otp=new_otp,
            expiry_time_in_sec=OTP_EXPIRY_TIME_IN_SEC,
            verification_type=verification_type
        )

        otp_list = OTPVerification.objects.filter(
            email=email,
            verification_type=verification_type.value
        )
        assert otp_list.count() == 1
        assert otp_list[0].otp == new_otp

    @pytest.mark.django_db
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP,
        VerificationType.VERIFY_EMAIL_WITH_OTP
    ])
    @freeze_time("2019-06-05 10:00:00")
    def test_update_otp_details_by_email_when_otp_is_not_expired(self, setup,
                                    verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        email = "tdd@testing.com"
        OTPVerification.objects.create(
            email=email,
            otp=otp,
            expiry_datetime=datetime.now() + timedelta(
                seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value
        )

        otp_sql_storage.update_otp_details_by_email(
            email=email,
            otp=otp,
            expiry_time_in_sec=OTP_EXPIRY_TIME_IN_SEC,
            verification_type=verification_type
        )

        updated_expiry_datetime = datetime.now() + \
                                  timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC)

        otp_list = OTPVerification.objects.filter(
            email=email,
            verification_type=verification_type.value
        )
        assert otp_list.count() == 1
        assert otp_list[0].otp == otp
        assert otp_list[0].expiry_datetime == updated_expiry_datetime

    @pytest.mark.django_db
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP,
        VerificationType.VERIFY_EMAIL_WITH_OTP
    ])
    def test_get_otp_details_by_email(self, setup,
                                      verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        email = "tdd@testing.com"
        OTPVerification.objects.create(
            email=email,
            otp=otp,
            expiry_datetime=datetime.now() +
                            timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value
        )

        get_otp_details_dto = otp_sql_storage.get_otp_details_by_email(
            email=email,
            verification_type=verification_type
        )

        assert get_otp_details_dto.otp == otp

    @pytest.mark.django_db
    @pytest.mark.parametrize('retries_count', [
        OTP_MAX_RETRIES_COUNT - 1,
        OTP_MAX_RETRIES_COUNT
    ])
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP,
        VerificationType.VERIFY_EMAIL_WITH_OTP
    ])
    def test_is_exceeded_max_retries_count_for_email(self, setup,
                                       retries_count: int,
                                       verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        email = "tdd@testing.com"

        OTPVerification.objects.create(
            email=email,
            otp=otp,
            expiry_datetime=datetime.now() +
                            timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value,
            retries_count=retries_count
        )

        is_exceeded = otp_sql_storage.is_exceeded_max_retries_count_for_email(
            email=email,
            verification_type=verification_type
        )

        if retries_count < OTP_MAX_RETRIES_COUNT:
            assert is_exceeded == False
        else:
            assert is_exceeded

    @pytest.mark.django_db
    @pytest.mark.parametrize('otp_to_be_verified', [
        "123456",
        "998877"
    ])
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP,
        VerificationType.VERIFY_EMAIL_WITH_OTP
    ])
    def test_is_otp_matched_for_email(self, setup, otp_to_be_verified: str,
                            verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        email = "tdd@testing.com"
        OTPVerification.objects.create(
            email=email,
            otp=otp,
            expiry_datetime=datetime.now() +
                            timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value
        )

        is_matched = otp_sql_storage.is_otp_matched_for_email(
            email=email,
            otp_to_be_verified=otp_to_be_verified,
            verification_type=verification_type
        )
        if otp_to_be_verified == otp:
            assert is_matched
        else:
            assert is_matched == False

    @pytest.mark.django_db
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP,
        VerificationType.VERIFY_EMAIL_WITH_OTP
    ])
    def test_increase_retries_count_by_one_for_email(self, setup,
                                           verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        email = "tdd@testing.com"
        OTPVerification.objects.create(
            email=email,
            otp=otp,
            expiry_datetime=datetime.now() +
                            timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value
        )

        otp_sql_storage.increase_retries_count_by_one_for_email(
            email=email,
            verification_type=verification_type
        )

        created_otp = OTPVerification.objects.get(
            email=email,
            verification_type=verification_type.value
        )

        assert created_otp.retries_count == 1

    @pytest.mark.django_db
    @pytest.mark.parametrize('is_whitelisted', [
        True,
        False
    ])
    def test_is_phone_number_whitelisted(self, setup, is_whitelisted: bool):
        otp_sql_storage, phone_number_dto, otp = setup

        if is_whitelisted:
            OTPWhitelist.objects.create(
                country_code=phone_number_dto.country_code,
                phone_number=phone_number_dto.phone_number
            )

        assert otp_sql_storage.is_phone_number_whitelisted(
            phone_number_dto=phone_number_dto
        ) is is_whitelisted

    @pytest.mark.django_db
    @pytest.mark.parametrize('is_whitelisted', [
        True,
        False
    ])
    def test_is_email_whitelisted(self, setup, is_whitelisted: bool):
        otp_sql_storage, phone_number_dto, otp = setup

        email = "sample@gmail.com"
        if is_whitelisted:
            OTPWhitelist.objects.create(
                email=email
            )

        assert otp_sql_storage.is_email_whitelisted(
            email=email
        ) is is_whitelisted

    @pytest.mark.django_db
    def test_get_configured_otp_for_phone_number(self, setup):
        otp_sql_storage, phone_number_dto, otp = setup

        otp_obj = OTPWhitelist.objects.create(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            otp=otp
        )

        get_otp_details_dto = otp_sql_storage.\
            get_configured_otp_for_phone_number(
                phone_number_dto=phone_number_dto
            )
        assert otp_obj.otp == get_otp_details_dto.otp

    @pytest.mark.django_db
    def test_get_configured_otp_for_email(self, setup):
        otp_sql_storage, phone_number_dto, otp = setup

        email="sample@gmail.com"
        otp_obj = OTPWhitelist.objects.create(
            email=email,
            otp=otp
        )

        get_otp_details_dto = otp_sql_storage.get_configured_otp_for_email \
            (email=email)
        assert otp_obj.otp == get_otp_details_dto.otp

    @pytest.mark.django_db
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP,
        VerificationType.VERIFY_EMAIL_WITH_OTP
    ])
    def test_reset_retries_count(self, setup,
                                 verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        otp_obj = OTPVerification.objects.create(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            otp=otp,
            retries_count=1,
            expiry_datetime=datetime.now() +
                            timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value
        )

        assert otp_obj.retries_count == 1
        otp_sql_storage.reset_retries_count(
            phone_number_dto=phone_number_dto,
            verification_type=verification_type
        )
        otp_obj = OTPVerification.objects.get(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            verification_type=verification_type.value
        )
        assert otp_obj.retries_count == 0

    @pytest.mark.django_db
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP,
        VerificationType.VERIFY_EMAIL_WITH_OTP
    ])
    def test_reset_retries_count_for_email(self, setup,
                                 verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        email = "sample@gmail.com"
        otp_obj = OTPVerification.objects.create(
            email=email,
            otp=otp,
            retries_count=1,
            expiry_datetime=datetime.now() +
                            timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value
        )

        assert otp_obj.retries_count == 1
        otp_sql_storage.reset_retries_count_for_email(
            email=email,
            verification_type=verification_type
        )
        otp_obj = OTPVerification.objects.get(
            email=email,
            verification_type=verification_type.value
        )
        assert otp_obj.retries_count == 0

    @pytest.mark.django_db
    @pytest.mark.parametrize('otp_status', [
        OTPStatus.NOT_REQUESTED,
        OTPStatus.ACTIVE,
        OTPStatus.EXPIRED
    ])
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP
    ])
    def test_get_otp_status_for_user_id(self, setup, otp_status: OTPStatus,
                            verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        user_id = "1"
        if otp_status == OTPStatus.EXPIRED:
            OTPVerification.objects.create(
                user_id=user_id,
                otp=otp,
                expiry_datetime=datetime.now() - timedelta(
                    seconds=OTP_EXPIRY_TIME_IN_SEC),
                verification_type=verification_type.value
            )
        elif otp_status == OTPStatus.ACTIVE:
            OTPVerification.objects.create(
                user_id=user_id,
                otp=otp,
                expiry_datetime=datetime.now() + timedelta(
                    seconds=OTP_EXPIRY_TIME_IN_SEC),
                verification_type=verification_type.value
            )
        else:
            pass

        assert otp_sql_storage.get_otp_status_by_user_id(
            user_id=user_id,
            verification_type=verification_type
        ) is otp_status

    @pytest.mark.django_db
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP,
        VerificationType.VERIFY_EMAIL_WITH_OTP
    ])
    def test_update_otp_details_by_user_id_when_otp_is_expired(self, setup,
                                             verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        user_id = "1"
        OTPVerification.objects.create(
            user_id=user_id,
            otp=otp,
            expiry_datetime=datetime.now() -
                            timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value
        )

        new_otp = "654321"
        otp_sql_storage.update_otp_details_by_user_id(
            user_id=user_id,
            otp=new_otp,
            expiry_time_in_sec=OTP_EXPIRY_TIME_IN_SEC,
            verification_type=verification_type
        )

        otp_list = OTPVerification.objects.filter(
            user_id=user_id,
            verification_type=verification_type.value
        )
        assert otp_list.count() == 1
        assert otp_list[0].otp == new_otp

    @pytest.mark.django_db
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP,
        VerificationType.VERIFY_EMAIL_WITH_OTP
    ])
    @freeze_time("2019-06-05 10:00:00")
    def test_update_otp_details_by_user_id_when_otp_is_not_expired(self, setup,
                                 verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        user_id = "1"
        OTPVerification.objects.create(
            user_id=user_id,
            otp=otp,
            expiry_datetime=datetime.now() + timedelta(
                seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value
        )

        otp_sql_storage.update_otp_details_by_user_id(
            user_id=user_id,
            otp=otp,
            expiry_time_in_sec=OTP_EXPIRY_TIME_IN_SEC,
            verification_type=verification_type
        )

        updated_expiry_datetime = datetime.now() + \
                                  timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC)

        otp_list = OTPVerification.objects.filter(
            user_id=user_id,
            verification_type=verification_type.value
        )
        assert otp_list.count() == 1
        assert otp_list[0].otp == otp
        assert otp_list[0].expiry_datetime == updated_expiry_datetime

    @pytest.mark.django_db
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP,
        VerificationType.VERIFY_EMAIL_WITH_OTP
    ])
    def test_create_otp_verification_for_user_id_when_otp_is_not_requested(
                                self,
                                 setup,
                                 verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        user_id = "1"
        otp_sql_storage.create_otp_verification_by_user_id(
            user_id=user_id,
            otp=otp,
            expiry_time_in_sec=OTP_EXPIRY_TIME_IN_SEC,
            verification_type=verification_type
        )
        otp_list = OTPVerification.objects.filter(
            user_id=user_id,
            verification_type=verification_type.value
        )

        assert otp_list.count() == 1
        assert otp_list[0].otp == otp

    @pytest.mark.django_db
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP,
        VerificationType.VERIFY_EMAIL_WITH_OTP
    ])
    def test_get_otp_details_by_user_id(self, setup,
                                      verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        user_id = "1"
        OTPVerification.objects.create(
            user_id=user_id,
            otp=otp,
            expiry_datetime=datetime.now() +
                            timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value
        )

        get_otp_details_dto = otp_sql_storage.get_otp_details_by_user_id(
            user_id=user_id,
            verification_type=verification_type
        )

        assert get_otp_details_dto.otp == otp

    @pytest.mark.django_db
    @pytest.mark.parametrize('otp_to_be_verified', [
        "123456",
        "998877"
    ])
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP,
        VerificationType.VERIFY_EMAIL_WITH_OTP
    ])
    def test_is_otp_matched_for_user_id(self, setup, otp_to_be_verified: str,
                            verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        user_id = "1"
        OTPVerification.objects.create(
            user_id=user_id,
            otp=otp,
            expiry_datetime=datetime.now() +
                            timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value
        )

        is_matched = otp_sql_storage.is_otp_matched_for_user_id(
            user_id=user_id,
            otp_to_be_verified=otp_to_be_verified,
            verification_type=verification_type
        )
        if otp_to_be_verified == otp:
            assert is_matched
        else:
            assert is_matched == False

    @pytest.mark.django_db
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP,
        VerificationType.VERIFY_EMAIL_WITH_OTP
    ])
    def test_increase_retries_count_by_one_for_user_id(self, setup,
                                                     verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        user_id = "1"
        OTPVerification.objects.create(
            user_id=user_id,
            otp=otp,
            expiry_datetime=datetime.now() +
                            timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value
        )

        otp_sql_storage.increase_retries_count_by_one_for_user_id(
            user_id=user_id,
            verification_type=verification_type
        )

        created_otp = OTPVerification.objects.get(
            user_id=user_id,
            verification_type=verification_type.value
        )

        assert created_otp.retries_count == 1

    @pytest.mark.django_db
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP,
        VerificationType.VERIFY_EMAIL_WITH_OTP
    ])
    def test_reset_retries_count_for_user_id(self, setup,
                               verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        user_id = "1"
        otp_obj = OTPVerification.objects.create(
            user_id=user_id,
            otp=otp,
            retries_count=1,
            expiry_datetime=datetime.now() +
                            timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value
        )

        assert otp_obj.retries_count == 1
        otp_sql_storage.reset_retries_count_for_user_id(
            user_id=user_id,
            verification_type=verification_type
        )
        otp_obj = OTPVerification.objects.get(
            user_id=user_id,
            verification_type=verification_type.value
        )
        assert otp_obj.retries_count == 0

    @pytest.mark.django_db
    @pytest.mark.parametrize('retries_count', [
        OTP_MAX_RETRIES_COUNT - 1,
        OTP_MAX_RETRIES_COUNT
    ])
    @pytest.mark.parametrize('verification_type', [
        VerificationType.LOGIN_WITH_OTP,
        VerificationType.REGISTRATION_WITH_OTP,
        VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP
    ])
    def test_is_exceeded_max_retries_count_for_user_id(self, setup,
                                       retries_count: int,
                                       verification_type: VerificationType):
        otp_sql_storage, phone_number_dto, otp = setup
        user_id = "1"

        OTPVerification.objects.create(
            user_id=user_id,
            otp=otp,
            expiry_datetime=datetime.now() +
                            timedelta(seconds=OTP_EXPIRY_TIME_IN_SEC),
            verification_type=verification_type.value,
            retries_count=retries_count
        )

        is_exceeded = otp_sql_storage.\
            is_exceeded_max_retries_count_for_user_id(
                user_id=user_id,
                verification_type=verification_type
            )

        if retries_count < OTP_MAX_RETRIES_COUNT:
            assert is_exceeded == False
        else:
            assert is_exceeded

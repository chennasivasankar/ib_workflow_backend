import pytest

from ib_users.models import OTPBlacklist
from ib_users.storages.otp_blacklist_storage_impl import \
    OTPBlacklistStorageImpl
from ib_users.utils.dtos import PhoneNumberDTO


class TestOTPBlacklistStorage:

    @pytest.fixture
    def setup(self):
        blacklist_storage = OTPBlacklistStorageImpl()
        return blacklist_storage

    @pytest.mark.django_db
    def test_add_phone_number_to_blacklist(self, setup):
        blacklist_storage = setup
        phone_number_dto = PhoneNumberDTO(
            country_code="+91",
            phone_number="966123398"
        )

        blacklist_storage.add_phone_number_to_black_list \
            (phone_number_dto=phone_number_dto)

        otp_blacklist_obj = ""
        try:
            otp_blacklist_obj = OTPBlacklist.objects.get(
                country_code=phone_number_dto.country_code,
                phone_number=phone_number_dto.phone_number
            )
        except OTPBlacklist.DoesNotExist:
            pass

        assert otp_blacklist_obj.country_code == phone_number_dto.country_code
        assert otp_blacklist_obj.phone_number == phone_number_dto.phone_number

    @pytest.mark.django_db
    def test_add_email_to_black_list(self, setup):
        blacklist_storage = setup
        email = "smaple@gmail.com"

        blacklist_storage.add_email_to_blacklist(email=email)

        otp_blacklist_obj = ""
        try:
            otp_blacklist_obj = OTPBlacklist.objects.get(
                email=email
            )
        except OTPBlacklist.DoesNotExist:
            pass

        assert otp_blacklist_obj.email == email

    @pytest.mark.django_db
    def test_remove_phone_numbers_from_blacklist(self, setup):
        blacklist_storage = setup

        first_phone_number_dto = PhoneNumberDTO(
            country_code="+91",
            phone_number="966123398"
        )
        second_phone_number_dto = PhoneNumberDTO(
            country_code="+91",
            phone_number="966123398"
        )
        OTPBlacklist.objects.create(
            country_code=first_phone_number_dto.country_code,
            phone_number=first_phone_number_dto.phone_number
        )
        OTPBlacklist.objects.create(
            country_code=second_phone_number_dto.country_code,
            phone_number=second_phone_number_dto.phone_number
        )

        phone_numbers_dto_list = [
            first_phone_number_dto, second_phone_number_dto
        ]

        blacklist_storage.remove_phone_numbers_from_blacklist(
            phone_number_dtos=phone_numbers_dto_list
        )
        for phone_number_dto in phone_numbers_dto_list:
            otp_blacklist = OTPBlacklist.objects.filter(
                country_code=phone_number_dto.country_code,
                phone_number=phone_number_dto.phone_number
            )
            assert otp_blacklist.count() == 0

    @pytest.mark.django_db
    def test_remove_emails_from_blacklist(self, setup):
        blacklist_storage = setup

        emails = [
            "sample@gmail.com",
            "sample1@gmail.com"
        ]
        OTPBlacklist.objects.create(email=emails[0])
        OTPBlacklist.objects.create(email=emails[1])

        blacklist_storage.remove_emails_from_blacklist(emails=emails)
        for email in emails:
            otp_blacklist = OTPBlacklist.objects.filter(email=email)
            assert otp_blacklist.count() == 0

    @pytest.mark.django_db
    @pytest.mark.parametrize('is_blacklisted', [
        True,
        False
    ])
    def test_is_phone_number_blacklisted(self, setup, is_blacklisted: bool):
        blacklist_storage = setup
        phone_number_dto = PhoneNumberDTO(
            country_code="+91",
            phone_number="9866123399"
        )

        if is_blacklisted:
            OTPBlacklist.objects.create(
                country_code=phone_number_dto.country_code,
                phone_number=phone_number_dto.phone_number
            )

        assert blacklist_storage.is_phone_number_blacklisted(
            phone_number_dto=phone_number_dto
        ) is is_blacklisted

    @pytest.mark.django_db
    @pytest.mark.parametrize('is_blacklisted', [
        True,
        False
    ])
    def test_is_email_blacklisted(self, setup, is_blacklisted: bool):
        blacklist_storage = setup
        email = "tdd@testing.com"

        if is_blacklisted:
            OTPBlacklist.objects.create(email=email)

        assert blacklist_storage.is_email_blacklisted(
            email=email
        ) is is_blacklisted

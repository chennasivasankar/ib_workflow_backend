import uuid

import pytest
from freezegun import freeze_time

from ib_users.constants.user_account_constants import UserAccountConstants
from ib_users.exceptions.custom_exception_constants import \
    NOT_REGISTERED_USER, INCORRECT_PASSWORD
from ib_users.exceptions.registration_exceptions import \
    AccountWithThisPhoneNumberAlreadyExistsException, \
    AccountWithThisEmailAlreadyExistsException, UsernameAlreadyExistsException
from ib_users.interactors.registration.DTOs.registration_dtos import \
    CreateAccountWithPhoneNumberDTO, CreateAccountWithEmailDTO
from ib_users.interactors.storages.user_accounts_storage import \
    PhoneNumberAndPasswordDTO, UserNameAndPasswordDTO, \
    EmailAndPasswordDTO, PhoneNumberDTO, UserAccountDTO
from ib_users.models import UserAccount
from ib_users.storages import UserAccountsSQLStorage
from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException


class TestUserLoginWithUsername:
    @pytest.mark.django_db
    def test_get_user_id_given_username_and_password_when_user_is_not_registered(
            self):
        from ib_users.storages import UserAccountsSQLStorage

        user_accounts_sql_storage = UserAccountsSQLStorage()
        with pytest.raises(CustomException) as invalid_exception:
            user_accounts_sql_storage.get_user_id_given_username_and_password(
                UserNameAndPasswordDTO("user_name", "pwd!@#%^&"))

        TestsUtils.assert_custom_exception(NOT_REGISTERED_USER,
                                           invalid_exception)

    @pytest.mark.django_db
    def test_get_user_id_given_username_and_password_when_incorrect_password(
            self):
        from ib_users.storages import UserAccountsSQLStorage

        username = "user_name"
        UserAccountCreationForTestCases.create_user_with_username(
            username=username, password="hellocheat@")

        user_accounts_sql_storage = UserAccountsSQLStorage()
        with pytest.raises(CustomException) as invalid_exception:
            user_accounts_sql_storage.get_user_id_given_username_and_password(
                UserNameAndPasswordDTO(username, "pwd!@#%^&"))

        TestsUtils.assert_custom_exception(INCORRECT_PASSWORD,
                                           invalid_exception)

    @pytest.mark.django_db
    def test_get_user_id_given_username_and_password_with_correct_credentials(
            self):
        from ib_users.storages import UserAccountsSQLStorage

        user_login_dto = UserNameAndPasswordDTO("user_name", "pwd!@#%^&")
        user_account_obj = UserAccountCreationForTestCases.create_user_with_username(
            username=user_login_dto.username,
            password=user_login_dto.password)

        user_accounts_sql_storage = UserAccountsSQLStorage()
        user_id = user_accounts_sql_storage.get_user_id_given_username_and_password(
            user_login_dto)

        assert user_id == str(user_account_obj.user_id)


class TestUserLoginWithEmail:
    @pytest.mark.django_db
    def test_get_user_id_given_email_and_password_when_user_is_not_registered(
            self):
        from ib_users.storages import UserAccountsSQLStorage

        user_accounts_sql_storage = UserAccountsSQLStorage()
        with pytest.raises(CustomException) as invalid_exception:
            user_accounts_sql_storage.get_user_id_given_email_and_password(
                EmailAndPasswordDTO("jim@gmail.com", "pwd!@#%^&"))

        TestsUtils.assert_custom_exception(NOT_REGISTERED_USER,
                                           invalid_exception)

    @pytest.mark.django_db
    def test_get_user_id_given_email_and_password_when_incorrect_password(
            self):
        from ib_users.storages import UserAccountsSQLStorage

        email = "jim@gmail.com"
        UserAccountCreationForTestCases.create_user_with_email(email=email,
                                                               password="hellocheat@")

        user_accounts_sql_storage = UserAccountsSQLStorage()
        with pytest.raises(CustomException) as invalid_exception:
            user_accounts_sql_storage.get_user_id_given_email_and_password(
                EmailAndPasswordDTO(email, "pwd!@#%^&"))

        TestsUtils.assert_custom_exception(INCORRECT_PASSWORD,
                                           invalid_exception)

    @pytest.mark.django_db
    def test_get_user_id_given_email_and_password_with_correct_credentials(
            self):
        from ib_users.storages import UserAccountsSQLStorage

        email_login_dto = EmailAndPasswordDTO("jim@gmail.com", "pwd!@#%^&")
        user_account_obj = UserAccountCreationForTestCases.create_user_with_email(
            email=email_login_dto.email,
            password=email_login_dto.password)

        user_accounts_sql_storage = UserAccountsSQLStorage()
        user_id = user_accounts_sql_storage.get_user_id_given_email_and_password(
            email_login_dto)

        assert user_id == str(user_account_obj.user_id)


class TestUserLoginWithPhoneNumber:
    @pytest.mark.django_db
    def test_get_user_id_given_phone_number_and_password_when_user_is_not_registered(
            self):
        from ib_users.storages import UserAccountsSQLStorage

        user_accounts_sql_storage = UserAccountsSQLStorage()
        phone_number_DTO = PhoneNumberDTO("+91", "9012345678")
        with pytest.raises(CustomException) as invalid_exception:
            user_accounts_sql_storage.get_user_id_given_phone_number_and_password(
                PhoneNumberAndPasswordDTO(phone_number_DTO, "pwd!@#%^&"))

        TestsUtils.assert_custom_exception(NOT_REGISTERED_USER,
                                           invalid_exception)

    @pytest.mark.django_db
    def test_get_user_id_given_phone_number_and_password_when_incorrect_password(
            self):
        from ib_users.storages import UserAccountsSQLStorage

        phone_number_DTO = PhoneNumberDTO("+91", "9012345678")
        UserAccountCreationForTestCases.create_user_with_phone_number(
            phone_number_DTO=phone_number_DTO,
            password="hellocheat@")

        user_accounts_sql_storage = UserAccountsSQLStorage()
        with pytest.raises(CustomException) as invalid_exception:
            user_accounts_sql_storage.get_user_id_given_phone_number_and_password(
                PhoneNumberAndPasswordDTO(phone_number_DTO, "pwd!@#%^&"))

        TestsUtils.assert_custom_exception(INCORRECT_PASSWORD,
                                           invalid_exception)

    @pytest.mark.django_db
    def test_get_user_id_given_phone_number_and_password_with_correct_credentials(
            self):
        from ib_users.storages import UserAccountsSQLStorage

        phone_number_DTO = PhoneNumberDTO("+91", "9012345678")

        phone_number_and_password_DTO = PhoneNumberAndPasswordDTO(
            phone_number_DTO, "pwd!@#%^&")
        user_account_obj = UserAccountCreationForTestCases.create_user_with_phone_number(
            phone_number_DTO=phone_number_DTO,
            password=phone_number_and_password_DTO.password)

        user_accounts_sql_storage = UserAccountsSQLStorage()
        user_id = user_accounts_sql_storage.get_user_id_given_phone_number_and_password(
            phone_number_and_password_DTO)

        assert user_id == str(user_account_obj.user_id)


class TestUserLoginWithEmailAndOTP:
    @pytest.mark.django_db
    def test_get_user_id_given_email_user_is_not_registered(
            self):
        from ib_users.storages import UserAccountsSQLStorage

        user_accounts_sql_storage = UserAccountsSQLStorage()
        with pytest.raises(CustomException) as invalid_exception:
            user_accounts_sql_storage.get_user_id_given_email("jim@gmail.com")

        TestsUtils.assert_custom_exception(NOT_REGISTERED_USER,
                                           invalid_exception)

    @pytest.mark.django_db
    def test_get_user_id_given_email(
            self):
        from ib_users.storages import UserAccountsSQLStorage

        email_login_dto = EmailAndPasswordDTO("jim@gmail.com", "pwd!@#%^&")
        user_account_obj = UserAccountCreationForTestCases.create_user_with_email(
            email=email_login_dto.email,
            password=email_login_dto.password)

        user_accounts_sql_storage = UserAccountsSQLStorage()
        user_id = user_accounts_sql_storage.get_user_id_given_email(
            email_login_dto.email)

        assert user_id == str(user_account_obj.user_id)


class TestUserLoginWithPhoneNumberAndOTP:
    @pytest.mark.django_db
    def test_get_user_id_given_phone_number_is_not_registered(
            self):
        from ib_users.storages import UserAccountsSQLStorage
        phone_number_dto = PhoneNumberDTO("+91", "9505892754")

        user_accounts_sql_storage = UserAccountsSQLStorage()
        with pytest.raises(CustomException) as invalid_exception:
            user_accounts_sql_storage.get_user_id_given_phone_number(
                phone_number_dto)

        TestsUtils.assert_custom_exception(NOT_REGISTERED_USER,
                                           invalid_exception)

    @pytest.mark.django_db
    def test_get_user_id_given_phone_number(
            self):
        from ib_users.storages import UserAccountsSQLStorage

        phone_number_dto = PhoneNumberDTO("+91", "9505892754")
        user_account_obj = UserAccountCreationForTestCases.create_user_with_phone_number(
            phone_number_DTO=phone_number_dto,
            password="password&123")

        user_accounts_sql_storage = UserAccountsSQLStorage()
        user_id = user_accounts_sql_storage.get_user_id_given_phone_number(
            phone_number_dto)

        assert user_id == str(user_account_obj.user_id)


class TestEmailAndPhoneNumberGetters:

    @pytest.mark.django_db
    def test_get_user_details_to_send_otp_given_not_registered_email(self):
        from ib_users.storages import UserAccountsSQLStorage
        user_accounts_sql_storage = UserAccountsSQLStorage()

        with pytest.raises(CustomException) as invalid_exception:
            user_accounts_sql_storage.get_user_details_to_send_otp_given_email(
                "javvaji@gmail.com")

        TestsUtils.assert_custom_exception(NOT_REGISTERED_USER,
                                           invalid_exception)

    @freeze_time("1993-10-30 11:30:00")
    @pytest.mark.django_db
    @pytest.mark.parametrize("email, password, phone_number_dto",
                             [("javvaji@gmail.com", "hello@mypassword",
                               PhoneNumberDTO("+91", "9505892754")),
                              ("javvaji@gmail.com", "hello@mypassword",
                               PhoneNumberDTO("+91", "")),
                              ("javvaji@gmail.com", "hello@mypassword",
                               PhoneNumberDTO("", "9505892754")),
                              ("javvaji@gmail.com", "hello@mypassword",
                               PhoneNumberDTO("", ""))])
    def test_get_user_id_given_email_registered_email(self, email, password,
                                                      phone_number_dto: PhoneNumberDTO):
        from ib_users.storages import UserAccountsSQLStorage

        user_account_obj = UserAccountCreationForTestCases.create_user_with_multiple_fields(
            username=uuid.uuid4(),
            email=email,
            password=password,
            phone_number_DTO=phone_number_dto)

        user_accounts_sql_storage = UserAccountsSQLStorage()
        otp_send_to_dto = user_accounts_sql_storage.get_user_details_to_send_otp_given_email(
            email)

        assert otp_send_to_dto.user_id == str(user_account_obj.user_id)
        assert otp_send_to_dto.email == email
        assert otp_send_to_dto.phone_number.__eq__(phone_number_dto)

    @pytest.mark.django_db
    def test_get_user_details_to_send_otp_given_not_registered_phone_number(
            self):
        from ib_users.storages import UserAccountsSQLStorage
        user_accounts_sql_storage = UserAccountsSQLStorage()
        phone_number_dto = PhoneNumberDTO("+91", "1111111111")

        with pytest.raises(CustomException) as invalid_exception:
            user_accounts_sql_storage.get_user_details_to_send_otp_given_phone_number(
                phone_number_dto)

        TestsUtils.assert_custom_exception(NOT_REGISTERED_USER,
                                           invalid_exception)

    @freeze_time("1993-10-30 11:30:00")
    @pytest.mark.django_db
    @pytest.mark.parametrize("email, password, phone_number_dto",
                             [("", "hello@mypassword",
                               PhoneNumberDTO("+91", "9505892754")),
                              ("javvaji@gmail.com", "hello@mypassword",
                               PhoneNumberDTO("+91", "9505892754"))])
    def test_get_user_id_given_registered_phone_number(self, email, password,
                                                       phone_number_dto: PhoneNumberDTO):
        from ib_users.storages import UserAccountsSQLStorage

        user_account_obj = UserAccountCreationForTestCases.create_user_with_multiple_fields(
            username=uuid.uuid4(),
            email=email,
            password=password,
            phone_number_DTO=phone_number_dto)

        user_accounts_sql_storage = UserAccountsSQLStorage()
        otp_send_to_dto = user_accounts_sql_storage.get_user_details_to_send_otp_given_phone_number(
            phone_number_dto)

        assert otp_send_to_dto.user_id == str(user_account_obj.user_id)
        assert otp_send_to_dto.email == email
        assert otp_send_to_dto.phone_number.__eq__(phone_number_dto)


class TestUserAccountActiveness:

    @pytest.mark.parametrize("is_user_active", [False, True])
    @pytest.mark.django_db
    def test_is_user_account_active(self, is_user_active):
        from ib_users.storages import UserAccountsSQLStorage
        user_accounts_sql_storage = UserAccountsSQLStorage()

        user = UserAccountCreationForTestCases.create_user_with_username(
            username="username",
            password="password@#$",
            is_active=is_user_active)
        obtained_is_user_active = user_accounts_sql_storage.is_user_account_active(
            user.user_id)
        assert obtained_is_user_active == is_user_active


class UserAccountCreationForTestCases:
    @staticmethod
    def create_user_with_username(username, password, is_active=True):
        user_account = UserAccount(username=username, is_active=is_active)
        return UserAccountCreationForTestCases._set_password_and_save(
            user_account, password)

    @staticmethod
    def create_user_with_email(email, password, is_active=True):
        user_account = UserAccount(email=email, is_active=is_active)
        return UserAccountCreationForTestCases._set_password_and_save(
            user_account, password)

    @staticmethod
    def create_user_with_phone_number(phone_number_DTO: PhoneNumberDTO,
                                      password,
                                      is_active=True):
        user_account = UserAccount(phone_number=phone_number_DTO.phone_number,
                                   country_code=phone_number_DTO.country_code,
                                   is_active=is_active)
        return UserAccountCreationForTestCases._set_password_and_save(
            user_account, password)

    @staticmethod
    def create_user_with_multiple_fields(username, email,
                                         phone_number_DTO: PhoneNumberDTO,
                                         password,
                                         is_active=True):
        user_account = UserAccount(username=username,
                                   email=email,
                                   phone_number=phone_number_DTO.phone_number,
                                   country_code=phone_number_DTO.country_code,
                                   is_active=is_active)
        return UserAccountCreationForTestCases._set_password_and_save(
            user_account, password)

    @staticmethod
    def _set_password_and_save(user_account: UserAccount, password):
        user_account.set_password(password)
        user_account.save()
        return user_account


@pytest.mark.django_db
def test_is_user_id_exists():
    username = "Maneesh"
    user_account_sql_storage = UserAccountsSQLStorage()
    user = UserAccount.objects.create(username=username)

    is_user_exists = user_account_sql_storage.is_user_id_exists(
        user_id=user.user_id
    )

    assert is_user_exists


@pytest.mark.django_db
def test_is_username_exists():
    username = "anesh"
    user_account_sql_storage = UserAccountsSQLStorage()
    user = UserAccount.objects.create(username=username)

    is_username_exists = user_account_sql_storage.is_username_exists(
        username=user.username
    )

    assert is_username_exists


@pytest.mark.django_db
def test_update_username():
    username = "bob"
    new_username = "bobby"
    user_account_sql_storage = UserAccountsSQLStorage()
    user = UserAccount.objects.create(username=username)

    expected_user_account_dto = UserAccountDTO(
        user_id=str(user.user_id),
        username=new_username
    )

    update_username_response = user_account_sql_storage.update_username(
        current_username=username, new_username=new_username)
    updated_user = UserAccount.objects.get(username=new_username)

    assert updated_user.username == new_username

    assert update_username_response == expected_user_account_dto


@pytest.mark.django_db
def test_is_given_user_deactivated():
    username = "bob"
    user_account_sql_storage = UserAccountsSQLStorage()
    user = UserAccount.objects.create(username=username)

    is_user_deactivated = user_account_sql_storage.is_user_account_deactivated(
        user_id=user.user_id)

    assert is_user_deactivated is False


@pytest.mark.django_db
def test_activate_user():
    username = "bob"
    user_account_sql_storage = UserAccountsSQLStorage()
    user = UserAccount.objects.create(username=username,is_active=False)
    user_account_sql_storage.activate_user(
        user_id=str(user.user_id))

    activated_user = UserAccount.objects.get(user_id=user.user_id)

    assert activated_user.is_active


@pytest.mark.django_db
def test_deactivate_user():
    username = "bob"
    user_account_sql_storage = UserAccountsSQLStorage()
    user = UserAccount.objects.create(username=username)

    user_account_sql_storage.deactivate_user_account(
        user_id=user.user_id)

    deactivated_user = UserAccount.objects.get(user_id=user.user_id)

    assert deactivated_user.is_active is False


@pytest.mark.django_db
@pytest.mark.parametrize('username,password', [
    ("praneetha", "iBC@2091")])
def test_create_account_with_username(username, password):
    user_accounts_storage_impl = UserAccountsSQLStorage()
    user_id = user_accounts_storage_impl.create_account_with_username(
        username, password)
    registered_user_account = UserAccount.objects.get(pk=user_id)
    assert registered_user_account.username == username
    assert registered_user_account.check_password(password)


@pytest.mark.django_db
@pytest.mark.parametrize('username', ["praneetha"])
def test_check_username_is_registered_username_registered(username):
    UserAccount.objects.create(username=username, password="iBC@2091")
    user_accounts_storage_impl = UserAccountsSQLStorage()
    with pytest.raises(UsernameAlreadyExistsException):
        user_accounts_storage_impl.check_user_exists_with_username(username)


@pytest.mark.django_db
@pytest.mark.parametrize('email,password', [
    ("praneetha@gmail.com", "iBC@2091")])
def test_create_account_with_email(email, password):
    user_accounts_storage_impl = UserAccountsSQLStorage()

    create_account_dto = CreateAccountWithEmailDTO(
        email=email, password=password)
    user_id = user_accounts_storage_impl.create_account_with_email(
        create_account_dto)
    registered_user_account = UserAccount.objects.get(pk=user_id)
    assert registered_user_account.email == email
    assert registered_user_account.check_password(password)


@pytest.mark.django_db
@pytest.mark.parametrize('email,password,username', [
    ("praneetha@gmail.com", "iBC@2091", "praneetha")])
def test_create_account_with_email_and_username(email, password, username):
    user_accounts_storage_impl = UserAccountsSQLStorage()

    create_account_dto = CreateAccountWithEmailDTO(
        email=email, password=password, username=username)
    user_id = user_accounts_storage_impl.create_account_with_email(
        create_account_dto)
    registered_user_account = UserAccount.objects.get(pk=user_id)
    assert registered_user_account.email == email
    assert registered_user_account.check_password(password)
    assert registered_user_account.username == username


@pytest.mark.django_db
@pytest.mark.parametrize('email,is_registered', [
    ("praneetha@ibhubs.co", True),
    ("pranee@ibhubs.co", False)])
def test_check_email_is_registered(email, is_registered):
    user_accounts_storage_impl = UserAccountsSQLStorage()
    if is_registered:
        UserAccount.objects.create(email=email, password="iBC@2091")
    try:
        user_accounts_storage_impl.check_user_exists_with_email(email)
    except AccountWithThisEmailAlreadyExistsException:
        assert is_registered == True
    else:
        assert is_registered == False


@pytest.mark.django_db
@pytest.mark.parametrize('phone_number,country_code,password', [
    ("9866546440", "+91", "iBC@2091")])
def test_create_account_with_phone_number(
        phone_number, country_code, password):
    user_accounts_storage_impl = UserAccountsSQLStorage()

    create_account_dto = CreateAccountWithPhoneNumberDTO(
        phone_number=phone_number,
        country_code=country_code,
        password=password
    )
    user_id = user_accounts_storage_impl.create_account_with_phone_number(
        create_account_dto)
    registered_user_account = UserAccount.objects.get(pk=user_id)
    assert registered_user_account.phone_number == phone_number
    assert registered_user_account.country_code == country_code
    assert registered_user_account.check_password(password)


@pytest.mark.django_db
@pytest.mark.parametrize('phone_number,country_code,password,username', [
    ("9866546440", "+91", "iBC@2091", "praneetha")])
def test_create_account_with_phone_number_and_username(
        phone_number, country_code, password, username):
    user_accounts_storage_impl = UserAccountsSQLStorage()

    create_account_dto = CreateAccountWithPhoneNumberDTO(
        phone_number=phone_number,
        country_code=country_code,
        password=password,
        username=username
    )
    user_id = user_accounts_storage_impl.create_account_with_phone_number(
        create_account_dto)
    registered_user_account = UserAccount.objects.get(pk=user_id)
    assert registered_user_account.phone_number == phone_number
    assert registered_user_account.country_code == country_code
    assert registered_user_account.check_password(password)
    assert registered_user_account.username == username


@pytest.mark.django_db
@pytest.mark.parametrize('phone_number,country_code', [
    ("9866546440", "+91")])
def test_check_phone_number_is_registered(phone_number, country_code):
    user_accounts_storage_impl = UserAccountsSQLStorage()
    UserAccount.objects.create(
        phone_number=phone_number, country_code=country_code,
        password="iBC@2091")
    phone_number_dto = PhoneNumberDTO(phone_number=phone_number,
                                      country_code=country_code)
    with pytest.raises(AccountWithThisPhoneNumberAlreadyExistsException):
        user_accounts_storage_impl.check_user_exists_with_phone_number(
            phone_number_dto=phone_number_dto)


@pytest.mark.django_db
@pytest.mark.parametrize('phone_number,country_code', [
    ("9866546440", "+91")])
def test_link_email_to_user(phone_number, country_code):
    user_account_obj = UserAccount.objects.create(
        phone_number=phone_number,
        country_code=country_code,
        password="iBC@2091")

    user_accounts_storage_impl = UserAccountsSQLStorage()
    email = "javvaji@lolmail.com"
    user_accounts_storage_impl.link_email_to_user(
        str(user_account_obj.user_id), email=email)

    user_account_obj.refresh_from_db()

    assert user_account_obj.email == email


@pytest.mark.django_db
def test_link_phone_number_to_user():
    user_account_obj = UserAccount.objects.create(
        email="javvaji@tollywood.co",
        password="iBC@2091")

    phone_number_dto = PhoneNumberDTO(phone_number="9866546440",
                                      country_code="+91")

    user_accounts_storage_impl = UserAccountsSQLStorage()
    user_accounts_storage_impl.link_phone_number_to_user(
        str(user_account_obj.user_id), phone_number_dto=phone_number_dto)

    user_account_obj.refresh_from_db()

    assert user_account_obj.phone_number == phone_number_dto.phone_number
    assert user_account_obj.country_code == phone_number_dto.country_code


@pytest.mark.django_db
@pytest.mark.parametrize('new_password', ['iBC@1234'])
def test_update_user_password(new_password):
    user_account = UserAccount()
    user_account.save()
    user_accounts_storage_impl = UserAccountsSQLStorage()
    user_accounts_storage_impl.update_user_password(str(user_account.user_id),
                                                    new_password)

    user_account = UserAccount.objects.get(user_id=user_account.user_id)
    assert user_account.check_password(new_password)
    assert user_account.is_password_reset == True

@pytest.mark.django_db
@pytest.mark.parametrize('new_password', ['iBC@1234'])
def test_update_user_password_invalid_user_id(new_password):
    user_accounts_storage_impl = UserAccountsSQLStorage()
    from ib_users.interactors.exceptions.user_credentials_exceptions import \
        InvalidUserIdException
    with pytest.raises(InvalidUserIdException):
        user_accounts_storage_impl.update_user_password(str(uuid.uuid4()),
                                                        new_password)


@pytest.mark.django_db
@pytest.mark.parametrize('current_password', ['iBC@1234'])
def test_check_current_password_matches(current_password):
    user_account = UserAccount()
    user_account.set_password(current_password)
    user_account.save()
    user_accounts_storage_impl = UserAccountsSQLStorage()
    user_accounts_storage_impl.check_current_password_matches(
        user_id=str(user_account.user_id), current_password=current_password)


@pytest.mark.django_db
@pytest.mark.parametrize('current_password', ['iBC@1234'])
def test_check_current_password_matches_doesnot_match(current_password):
    user_account = UserAccount()
    user_account.set_password("iBC@9999")
    user_account.save()
    user_accounts_storage_impl = UserAccountsSQLStorage()
    from ib_users.interactors.exceptions.user_credentials_exceptions import \
        CurrentPasswordMismatchException
    with pytest.raises(CurrentPasswordMismatchException):
        user_accounts_storage_impl.check_current_password_matches(
            user_id=str(user_account.user_id),
            current_password=current_password)


@pytest.mark.django_db
@pytest.mark.parametrize('current_password', ['iBC@1234'])
def test_check_current_password_matches_invalid_user_id(current_password):
    user_accounts_storage_impl = UserAccountsSQLStorage()
    from ib_users.interactors.exceptions.user_credentials_exceptions import \
        InvalidUserIdException
    with pytest.raises(InvalidUserIdException):
        user_accounts_storage_impl.check_current_password_matches(
            user_id=str(uuid.uuid4()), current_password=current_password)


@pytest.mark.django_db
@pytest.mark.parametrize('current_password,is_changed', [
    ("iBC@1999", True),
    (UserAccountConstants.DEFAULT_PASSWORD, False)])
def test_is_default_password_changed(current_password, is_changed):
    user_account = UserAccount(is_password_reset=is_changed)
    user_account.set_password(current_password)
    user_account.save()

    user_accounts_storage_impl = UserAccountsSQLStorage()
    return_value = user_accounts_storage_impl.is_default_password_changed(
        user_id=str(user_account.user_id))
    assert is_changed == return_value


@pytest.mark.django_db
def test_is_default_password_changed():
    user_account = UserAccount(is_password_reset=False)
    user_account.set_password(UserAccountConstants.DEFAULT_PASSWORD)
    user_account.save()

    user_accounts_storage_impl = UserAccountsSQLStorage()
    user_accounts_storage_impl.update_user_password(
        user_id=str(user_account.user_id),
        new_password=UserAccountConstants.DEFAULT_PASSWORD)

    return_value = user_accounts_storage_impl.is_default_password_changed(
        user_id=str(user_account.user_id))
    assert return_value == True

@pytest.mark.django_db
def test_get_user_given_username():
    username = "praneetha"
    user_account = UserAccount(username=username)
    user_account.save()

    user_accounts_storage_impl = UserAccountsSQLStorage()
    return_value = user_accounts_storage_impl.get_user_given_username(
        username=username)
    assert user_account == return_value


@pytest.mark.django_db
def test_get_user_given_username_doesnt_exist():
    user_accounts_storage_impl = UserAccountsSQLStorage()
    from ib_users.interactors.exceptions.user_credentials_exceptions import \
        AccountWithUsernameDoesntExistException
    with pytest.raises(AccountWithUsernameDoesntExistException):
        user_accounts_storage_impl.get_user_given_username(
            username="praneetha")


@pytest.mark.django_db
def test_get_user_given_email():
    email = "praneetha@gmail.com"
    user_account = UserAccount(email=email)
    user_account.save()

    user_accounts_storage_impl = UserAccountsSQLStorage()
    return_value = user_accounts_storage_impl.get_user_given_email(
        email=email)
    assert user_account == return_value


@pytest.mark.django_db
def test_get_user_given_email_doesnt_exist():
    user_accounts_storage_impl = UserAccountsSQLStorage()
    from ib_users.interactors.exceptions.user_credentials_exceptions import \
        AccountWithEmailDoesntExistException
    with pytest.raises(AccountWithEmailDoesntExistException):
        user_accounts_storage_impl.get_user_given_email(
            email="praneetha@gmail.com")


@pytest.mark.django_db
def test_get_user_given_phone_number():
    phone_number = '9866546440'
    country_code = '+91'
    phone_number_dto = PhoneNumberDTO(phone_number=phone_number,
                                      country_code=country_code)

    user_account = UserAccount(phone_number=phone_number,
                               country_code=country_code)
    user_account.save()

    user_accounts_storage_impl = UserAccountsSQLStorage()
    return_value = user_accounts_storage_impl.get_user_given_phone_number(
        phone_number_dto=phone_number_dto)
    assert user_account == return_value


@pytest.mark.django_db
def test_check_account_with_phone_number_exists_doesnt_exist():
    phone_number_dto = PhoneNumberDTO(phone_number="9866546440",
                                      country_code="+91")

    user_accounts_storage_impl = UserAccountsSQLStorage()
    from ib_users.interactors.exceptions.user_credentials_exceptions import \
        AccountWithPhoneNumberDoesntExistException
    with pytest.raises(AccountWithPhoneNumberDoesntExistException):
        user_accounts_storage_impl.get_user_given_phone_number(
            phone_number_dto=phone_number_dto)

@pytest.mark.django_db
@pytest.mark.parametrize("username,phone_number,country_code,email",[
    ("praneetha", "", "", ""), ("praneetha", "", "", "pranee@gmail.com"),
    ("praneetha", "9866546440", "+91", ""),
    ("praneetha", "9866546440", "+91", "pranee@gmail.com")])
def test_get_user_details_to_send_otp_given_username(
        username, phone_number, country_code, email):
    user_account = UserAccount(
        username=username, email=email, phone_number=phone_number,
        country_code=country_code)
    user_account.save()

    user_accounts_storage_impl = UserAccountsSQLStorage()
    contact_details = user_accounts_storage_impl.get_user_details_to_send_otp_given_username(
        username)
    assert contact_details.email == email
    assert contact_details.phone_number == PhoneNumberDTO(phone_number,
                                                          country_code)
    assert contact_details.user_id == user_account.user_id

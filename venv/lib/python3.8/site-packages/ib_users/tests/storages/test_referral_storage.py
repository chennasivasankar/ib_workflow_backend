from uuid import UUID

import pytest

from ib_users.constants.referral_constants import REFERRAL_LIMIT
from ib_users.interactors.storages.referrals_storage import ReferralDTO
from ib_users.models import ReferralDetails, UserAccount
from ib_users.storages.referrals_storage_impl import ReferralsSQLStorage


@pytest.mark.django_db
def test_get_referral_details():
    referral_code = "sadf"

    referral_storage = ReferralsSQLStorage()

    referrer_user_id = UUID(int=2)
    referrer_username = 'Test'
    referrer_referral_code = 'UHKDLK'

    referrer_account = UserAccount.objects. \
        create(user_id=referrer_user_id, username=referrer_username)
    referrer_details = ReferralDetails.objects.create(
        referral_code=referrer_referral_code,
        referral_limit=REFERRAL_LIMIT,
        user_account_id=referrer_account.user_id
    )

    username = "Maneesh"
    user = UserAccount.objects.create(username=username)

    ReferralDetails.objects.create(
        referral_code=referral_code,
        referral_limit=REFERRAL_LIMIT,
        user_account_id=user.user_id,
        referred_by_id=referrer_details.id
    )

    expected_DTO = ReferralDTO(
        user_id=user.user_id,
        referral_limit=REFERRAL_LIMIT
    )

    referral_DTO = referral_storage.get_referral_details(
        referral_code=referral_code
    )

    assert expected_DTO == referral_DTO


@pytest.mark.django_db
def test_is_referral_code_linked_to_user():
    referral_code = "sadf"

    referral_storage = ReferralsSQLStorage()

    referrer_user_id = UUID(int=2)
    referrer_username = 'Test'
    referrer_referral_code = 'UHKDLK'

    referrer_account = UserAccount.objects. \
        create(user_id=referrer_user_id, username=referrer_username)
    referrer_details = ReferralDetails.objects.create(
        referral_code=referrer_referral_code,
        referral_limit=REFERRAL_LIMIT,
        user_account_id=referrer_account.user_id
    )

    username = "Maneesh"
    user = UserAccount.objects.create(username=username)

    ReferralDetails.objects.create(
        referral_code=referral_code,
        referral_limit=REFERRAL_LIMIT,
        user_account_id=user.user_id,
        referred_by_id=referrer_details.id
    )

    is_referral_linked = referral_storage.is_referral_code_linked_to_user(
        referral_code=referral_code)

    assert is_referral_linked is True


@pytest.mark.django_db
def test_get_referrer_id():

    referral_storage = ReferralsSQLStorage()

    referrer_user_id = UUID(int=2)
    referrer_username = 'Test'
    referrer_referral_code = 'UHKDLK'

    referrer_account = UserAccount.objects. \
        create(user_id=referrer_user_id, username=referrer_username)
    referrer_details = ReferralDetails.objects.create(
        referral_code=referrer_referral_code,
        referral_limit=REFERRAL_LIMIT,
        user_account_id=referrer_account.user_id
    )

    referral_code = "sadf"
    username = "Maneesh"
    user_id = UUID(int=3)
    user = UserAccount.objects.create(user_id=user_id, username=username)

    ReferralDetails.objects.create(
        referral_code=referral_code,
        referral_limit=REFERRAL_LIMIT,
        user_account_id=user.user_id,
        referred_by_id=referrer_details.id
    )

    referrer_user_id = referral_storage.get_referrer_id(
        user_id=user.user_id)

    assert referrer_user_id == referrer_account.user_id


@pytest.mark.django_db
def test_is_referrer_exists():
    referral_user_id = 1
    referral_user_code = 'R95KDL'
    referral_user_name = 'referral_user_name'

    referrer_user_id = 2
    referrer_username = 'referrer_username'
    referrer_referral_code = 'UHKDLK'

    referrer_account = UserAccount.objects. \
        create(user_id=referrer_user_id, username=referrer_username)
    referrer_details = ReferralDetails.objects.create(
        referral_code=referrer_referral_code,
        referral_limit=REFERRAL_LIMIT,
        user_account_id=referrer_account.user_id
    )
    referral = UserAccount.objects.create(user_id=referral_user_id,
                                          username=referral_user_name)
    ReferralDetails.objects.create(
        referral_code=referral_user_code,
        referral_limit=REFERRAL_LIMIT,
        user_account=referral,
        referred_by_id=referrer_details.id
    )

    referral_storage = ReferralsSQLStorage()
    is_linked_to_referral = referral_storage.is_referrer_exists(
        user_id=referral_user_id)
    assert is_linked_to_referral


@pytest.mark.django_db
def test_is_referrer_exists_when_referrer_does_not_exists():
    given_user_id = 1
    test_referral_code = 'R95KDL'
    test_username = 'test_username'

    user = UserAccount.objects.create(user_id=given_user_id,
                                      username=test_username)
    ReferralDetails.objects.create(
        referral_code=test_referral_code,
        referral_limit=REFERRAL_LIMIT,
        user_account=user
    )

    referral_storage = ReferralsSQLStorage()
    is_linked_to_referral = referral_storage.is_referrer_exists(
        user_id=given_user_id)
    assert not is_linked_to_referral


@pytest.mark.django_db
def test_get_referral_code():
    from ib_users.storages.referrals_storage_impl import ReferralsSQLStorage

    user_id = 1
    username = 'test_username'
    test_referral_code = 'R485KD'
    user = UserAccount.objects.create(user_id=user_id, username=username)

    referrals_storage = ReferralsSQLStorage()

    referral_limit = 10
    referral_details = ReferralDetails.objects.create \
        (referral_code=test_referral_code, referral_limit=referral_limit,
         user_account=user)
    user_referral_code = referrals_storage \
        .get_referral_code(user_id=user_id)
    assert referral_details.referral_code == user_referral_code


@pytest.mark.django_db
def test_get_referral_code_when_user_not_exists():
    from ib_users.storages.referrals_storage_impl import ReferralsSQLStorage
    from ib_users.exceptions.referral_exceptions import \
        ReferralDetailsDoesNotExist
    with pytest.raises(ReferralDetailsDoesNotExist):
        referrals_storage = ReferralsSQLStorage()
        user_id = str(UUID(int=1))
        referrals_storage \
            .get_referral_code(user_id=user_id)


@pytest.mark.django_db
def test_is_referral_limit_reached():
    from ib_users.storages.referrals_storage_impl import ReferralsSQLStorage

    user_id = str(UUID(int=1))
    username = 'test_username' + str(user_id)

    user2_id = str(UUID(int=2))
    username2 = 'test_username' + str(user2_id)

    referral_limit = 1
    referral_code = 'R485DK'
    user2_referral_code = 'KLDLKS'

    UserAccount.objects.create(user_id=user_id, username=username)
    user1_referral_details = ReferralDetails.objects.create(
        referral_limit=referral_limit,
        referral_code=referral_code,
        user_account_id=user_id)

    UserAccount.objects.create(user_id=user2_id, username=username2)
    ReferralDetails.objects.create(referral_limit=referral_limit,
                                   referral_code=user2_referral_code,
                                   user_account_id=user2_id,
                                   referred_by_id=user1_referral_details.id)

    storage = ReferralsSQLStorage()

    is_limit_reached = storage.is_referral_limit_reached(user_id=user_id)
    assert is_limit_reached


@pytest.mark.django_db
def test_is_referral_limit_reached_when_limit_not_reached():
    from ib_users.storages.referrals_storage_impl import ReferralsSQLStorage

    user_id = str(UUID(int=1))
    username = 'test_username' + str(user_id)

    referral_limit = 1
    referral_code = 'R485DK'

    UserAccount.objects.create(user_id=user_id, username=username)
    ReferralDetails.objects.create \
        (referral_limit=referral_limit, referral_code=referral_code,
         user_account_id=user_id)

    storage = ReferralsSQLStorage()

    is_limit_reached = storage.is_referral_limit_reached(user_id=user_id)
    assert not is_limit_reached


@pytest.mark.django_db
def test_link_user_with_referrer():
    # Doubt: Whether we need to write testcases for these kind of crud operations
    referrer_user_id = str(UUID(int=1))
    referrer_username = 'referrer_username' + str(referrer_user_id)

    referrer = UserAccount.objects.create(user_id=referrer_user_id,
                                          username=referrer_username)
    referrer_refer_limit = 10
    referrer_referral_code = 'KDKJDK'
    referrer_referral_details = ReferralDetails.objects. \
        create(referral_limit=referrer_refer_limit,
               referral_code=referrer_referral_code,
               user_account_id=referrer_user_id
               )

    referral_user_id = str(UUID(int=2))
    referral_username = 'referral_username' + str(referral_user_id)
    referral_refer_limit = 10
    referral_referral_code = 'R5849K'

    referral = UserAccount.objects.create(user_id=referral_user_id,
                                          username=referral_username)

    ReferralDetails.objects. \
        create(referral_limit=referral_refer_limit,
               referral_code=referral_referral_code,
               user_account_id=referral_user_id
               )
    storage = ReferralsSQLStorage()

    storage.link_user_with_referrer(user_id=referral_user_id,
                                    referral_code=referrer_referral_code)

    referral_details = ReferralDetails.objects.get(
        user_account_id=referral_user_id)
    referral_details.refresh_from_db()
    assert referral_details.referred_by_id == referrer_referral_details.id

@pytest.mark.django_db
def test_set_new_referral_codes():
    referral_codes = ["123456","234561","345612"]

    storage = ReferralsSQLStorage()
    created_referral_details_dtos =storage.create_new_referral_codes(referral_codes=referral_codes)

    assert len(referral_codes) == len(created_referral_details_dtos)


@pytest.mark.django_db
def test_create_referral_details():

    user_id = UUID(int=1)
    username = 'test_username'
    referral_code ='KKLJSO'

    UserAccount.objects.\
        create(user_id=user_id,
               username=username
               )

    storage = ReferralsSQLStorage()
    referral_details_id = storage.\
        create_referral_details(user_id=user_id,referral_code=referral_code)
    referral_details = ReferralDetails.objects.get(user_account_id=user_id)
    assert referral_details_id == referral_details.id
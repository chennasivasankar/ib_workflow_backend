import uuid

import pytest
from datetime import datetime, timedelta

from ib_users.models import UserAccount
from ib_users.models.user_password_reset_token import UserPasswordResetToken
from ib_users.storages.user_password_reset_token_storage_impl import \
    UserPasswordResetTokenStorageImpl


class TestUserPasswordResetTokenStorageImpl:
    @pytest.fixture
    def create_user_account(self):
        return UserAccount.objects.create().user_id

    @pytest.mark.django_db
    def test_store_reset_password_token(self, create_user_account):
        token = "abc"
        expiry_time = 3600

        user_uuid = create_user_account
        storage = UserPasswordResetTokenStorageImpl()
        storage.store_reset_password_token(user_id=str(user_uuid), token=token,
                                           expiry_time_in_seconds=expiry_time)
        user_token = UserPasswordResetToken.objects.get(
            user_id=user_uuid)
        assert user_token.user_id == user_uuid
        assert user_token.token == token
        diff_seconds = int((user_token.expires_at - datetime.now() - timedelta(
            seconds=expiry_time)).total_seconds())
        assert diff_seconds == 0

    @pytest.mark.django_db
    def test_is_reset_password_token_active_is_active(self,
                                                     create_user_account):
        user_uuid = create_user_account
        user_token = UserPasswordResetToken.objects.create(user_id=user_uuid,
                                              token="abc",
                                              expires_at=datetime.now() +
                                                         timedelta(seconds=60))
        storage = UserPasswordResetTokenStorageImpl()
        is_active, token = storage.is_reset_password_token_active(user_id=str(
            user_uuid))
        assert is_active == True
        assert token == user_token.token

    @pytest.mark.django_db
    def test_is_reset_password_token_active_is_inactive(self,
                                                        create_user_account):
        user_uuid = create_user_account
        UserPasswordResetToken.objects.create(
            user_id=user_uuid,
            token="abc",
            expires_at=datetime.now() + timedelta(seconds=-60))

        storage = UserPasswordResetTokenStorageImpl()
        is_active, token = storage.is_reset_password_token_active(user_id=str(
            user_uuid))
        assert is_active == False
        assert token == ""

    @pytest.mark.django_db
    def test_is_reset_password_token_active_is_not_present(self,
                                                        create_user_account):
        user_uuid = create_user_account

        storage = UserPasswordResetTokenStorageImpl()
        is_active, token = storage.is_reset_password_token_active(user_id=str(
            user_uuid))
        assert is_active == False
        assert token == ""

    @pytest.mark.django_db
    def test_verify_token(self, create_user_account):
        user_uuid = create_user_account
        token = "abc"
        UserPasswordResetToken.objects.create(
            user_id=user_uuid,
            token=token,
            expires_at=datetime.now() + timedelta(seconds=60))

        storage = UserPasswordResetTokenStorageImpl()
        storage.verify_token(user_id=user_uuid, token=token)

    @pytest.mark.django_db
    def test_verify_token_token_not_present(self, create_user_account):
        user_uuid = create_user_account
        token = "abc"

        storage = UserPasswordResetTokenStorageImpl()

        from ib_users.interactors.exceptions.user_credentials_exceptions \
            import InvalidTokenException
        with pytest.raises(InvalidTokenException):
            storage.verify_token(user_id=user_uuid, token=token)

    @pytest.mark.django_db
    def test_verify_token_token_mismatch(self, create_user_account):
        user_uuid = create_user_account
        token = "abc"
        UserPasswordResetToken.objects.create(
            user_id=user_uuid,
            token="xyz",
            expires_at=datetime.now() + timedelta(seconds=60))

        storage = UserPasswordResetTokenStorageImpl()

        from ib_users.interactors.exceptions.user_credentials_exceptions \
            import InvalidTokenException
        with pytest.raises(InvalidTokenException):
            storage.verify_token(user_id=user_uuid, token=token)

    @pytest.mark.django_db
    def test_verify_token_token_expired(self, create_user_account):
        user_uuid = create_user_account
        token = "abc"
        UserPasswordResetToken.objects.create(
            user_id=user_uuid,
            token=token,
            expires_at=datetime.now() + timedelta(seconds=-60))

        storage = UserPasswordResetTokenStorageImpl()

        from ib_users.interactors.exceptions.user_credentials_exceptions \
            import TokenExpiredException
        with pytest.raises(TokenExpiredException):
            storage.verify_token(user_id=user_uuid, token=token)

    # @pytest.mark.django_db
    # def test_update_expiry_time(self, create_user_account):
    #     user_uuid = create_user_account
    #     user_token = UserPasswordResetToken.objects.create(
    #         user_id=user_uuid,
    #         token="abc",
    #         expires_at=datetime.now() + timedelta(seconds=3600))
    #
    #     storage = UserPasswordResetTokenStorageImpl()
    #     storage.update_expiry_time(user_id=str(
    #         user_uuid), expiry_time_in_seconds=120)
    #     user_token = UserPasswordResetToken.objects.get(user_id=user_uuid)
    #     expiry_date_time = datetime.now() + timedelta(seconds=7200)
    #     diff_seconds = int((expiry_date_time -
    #                      user_token.expires_at).total_seconds())
    #     print(expiry_date_time)
    #     print(user_token.expires_at)
    #     print(diff_seconds)
    #     # assert diff_seconds == 0
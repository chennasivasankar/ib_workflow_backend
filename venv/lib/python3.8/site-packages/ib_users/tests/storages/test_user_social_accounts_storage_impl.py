import pytest

from ib_users.constants.user_account_constants import \
    SocialAccountProviderType
from ib_users.exceptions.custom_exception_constants import GOOGLE_NOT_LINKED, \
    FB_NOT_LINKED, TWITTER_NOT_LINKED
from ib_users.exceptions.registration_exceptions import \
    AccountWithSocialDetailsAlreadyExistsException
from ib_users.interactors.storages.user_accounts_storage import PhoneNumberDTO
from ib_users.models import UserSocialAccount, UserAccount
from ib_users.storages.user_social_account_sql_storage import \
    UserSocialAccountsSQLStorage
from ib_users.tests.storages.test_user_account_storage import \
    UserAccountCreationForTestCases
from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException


@pytest.mark.django_db
def test_link_social_account():
    from ib_users.models import UserSocialAccount
    social_id = 'maneesh_facebook_2938938'
    social_provider = SocialAccountProviderType.FACEBOOK.value
    username = 'maneesh'
    user = UserAccount.objects.create(username=username)
    user_account_sql_storage = UserSocialAccountsSQLStorage()

    user_account_sql_storage.link_social_account(
        social_id=social_id,
        social_account_type=social_provider,
        user_id=user.user_id)

    user_social_account = UserSocialAccount.objects.get(
        user_account__user_id=user.user_id)
    assert user_social_account.social_id == social_id


@pytest.mark.django_db
def is_social_account_available():
    username = 'asdas12321jh'
    social_id = 'maneesh_facebook_2938938'
    social_provider = SocialAccountProviderType.FACEBOOK.value

    user = UserAccount.objects.create(username=username)
    user_account_sql_storage = UserSocialAccountsSQLStorage()

    user_account_sql_storage.link_social_account(
        social_id=social_id,
        social_account_type=social_provider,
        user_id=user.user_id)

    social_account_type = user_account_sql_storage.is_social_account_available(
        user_id=user.user_id,
        social_account_type=social_provider
    )

    assert social_account_type is True


@pytest.mark.django_db
def unlink_social_account():
    from ib_users.models import UserSocialAccount
    username = 'asdas12321jh'
    social_id = 'maneesh_facebook_2938938'
    social_provider = SocialAccountProviderType.FACEBOOK.value

    user = UserAccount.objects.create(username=username)
    user_account_sql_storage = UserSocialAccountsSQLStorage()

    user_account_sql_storage.link_social_account(
        social_id=social_id,
        social_account_type=social_provider,
        user_id=user.user_id)

    linked_social_id = UserSocialAccount.objects.get(
        user_account__user_id=user.user_id).social_id

    assert social_id == linked_social_id

    user_account_sql_storage.unlink_social_account(
        social_account_type=social_provider,
        user_id=user.user_id)

    linked_social_id = UserSocialAccount.objects.get(
        user_account__user_id=user.user_id).social_id
    assert linked_social_id is None


@pytest.mark.django_db
@pytest.mark.parametrize('social_id, social_provider',
                         [("12345", SocialAccountProviderType.FACEBOOK.value),
                          ("123453", SocialAccountProviderType.GOOGLE.value),
                          ("123s45", SocialAccountProviderType.TWITTER.value)])
def test_create_account_with_social_details(social_id, social_provider):
    user_accounts_storage_impl = UserSocialAccountsSQLStorage()

    user_id = user_accounts_storage_impl.create_account_with_social_details(
        social_id=social_id, social_provider=social_provider)

    registered_user_account = UserSocialAccount.objects.get(
        social_id=social_id, provider_type=social_provider
    )
    assert social_id == registered_user_account.social_id
    assert social_provider == registered_user_account.provider_type
    assert user_id == str(registered_user_account.user_account.user_id)


@pytest.mark.django_db
@pytest.mark.parametrize("social_id, social_provider",
                         [("12345", SocialAccountProviderType.FACEBOOK.value)])
def test_check_social_details_is_already_registered(
        social_id, social_provider):
    user_account = UserAccount.objects.create()
    UserSocialAccount.objects.create(
        social_id=social_id,
        provider_type=social_provider,
        user_account=user_account)

    user_accounts_storage_impl = UserSocialAccountsSQLStorage()

    with pytest.raises(AccountWithSocialDetailsAlreadyExistsException) as ex:
        user_accounts_storage_impl.check_social_details_is_registered(
            social_id, social_provider)

    assert ex.value.social_provider == social_provider


class TestFacebookLogin:
    @pytest.mark.django_db
    def test_get_user_id_given_fb_social_id_when_user_is_not_registered(
            self):
        user_accounts_sql_storage = UserSocialAccountsSQLStorage()
        social_id = "social_id"
        with pytest.raises(CustomException) as invalid_exception:
            user_accounts_sql_storage.get_user_id_given_fb_social_id(social_id)

        TestsUtils.assert_custom_exception(FB_NOT_LINKED,
                                           invalid_exception)

    @pytest.mark.django_db
    def test_get_user_id_given_correct_fb_social_id(
            self):
        from ib_users.models import UserSocialAccount

        phone_number_dto = PhoneNumberDTO("+91", "9012345678")
        user_account_obj = UserAccountCreationForTestCases.create_user_with_phone_number(
            phone_number_DTO=phone_number_dto,
            password="hellocheat@")

        social_id = "social_id"
        user_social_obj = UserSocialAccount.objects.create(
            user_account=user_account_obj,
            provider_type=SocialAccountProviderType.FACEBOOK.value,
            social_id=social_id)

        user_accounts_sql_storage = UserSocialAccountsSQLStorage()
        user_id = user_accounts_sql_storage.get_user_id_given_fb_social_id(
            social_id)

        assert user_id == str(user_social_obj.user_account.user_id)


class TestGoogleLogin:
    @pytest.mark.django_db
    def test_get_user_id_given_google_social_id_when_user_is_not_registered(
            self):
        user_accounts_sql_storage = UserSocialAccountsSQLStorage()
        social_id = "social_id"
        with pytest.raises(CustomException) as invalid_exception:
            user_accounts_sql_storage.get_user_id_given_google_social_id(
                social_id)

        TestsUtils.assert_custom_exception(GOOGLE_NOT_LINKED,
                                           invalid_exception)

    @pytest.mark.django_db
    def test_get_user_id_given_correct_google_social_id(
            self):
        from ib_users.models import UserSocialAccount

        phone_number_dto = PhoneNumberDTO("+91", "9012345678")
        user_account_obj = UserAccountCreationForTestCases.create_user_with_phone_number(
            phone_number_DTO=phone_number_dto,
            password="hellocheat@")

        social_id = "social_id"
        user_social_obj = UserSocialAccount.objects.create(
            user_account=user_account_obj,
            provider_type=SocialAccountProviderType.GOOGLE.value,
            social_id=social_id)

        user_accounts_sql_storage = UserSocialAccountsSQLStorage()
        user_id = user_accounts_sql_storage.get_user_id_given_google_social_id(
            social_id)

        assert user_id == str(user_social_obj.user_account.user_id)


class TestTwitterLogin:
    @pytest.mark.django_db
    def test_get_user_id_given_google_twitter_id_when_user_is_not_registered(
            self):
        user_accounts_sql_storage = UserSocialAccountsSQLStorage()
        social_id = "social_id"
        with pytest.raises(CustomException) as invalid_exception:
            user_accounts_sql_storage.get_user_id_given_twitter_social_id(
                social_id)

        TestsUtils.assert_custom_exception(TWITTER_NOT_LINKED,
                                           invalid_exception)

    @pytest.mark.django_db
    def test_get_user_id_given_correct_twitter_social_id(
            self):
        from ib_users.models import UserSocialAccount

        phone_number_dto = PhoneNumberDTO("+91", "9012345678")
        user_account_obj = UserAccountCreationForTestCases.create_user_with_phone_number(
            phone_number_DTO=phone_number_dto,
            password="hellocheat@")

        social_id = "social_id"
        user_social_obj = UserSocialAccount.objects.create(
            user_account=user_account_obj,
            provider_type=SocialAccountProviderType.TWITTER.value,
            social_id=social_id)

        user_accounts_sql_storage = UserSocialAccountsSQLStorage()
        user_id = user_accounts_sql_storage.get_user_id_given_twitter_social_id(
            social_id)

        assert user_id == str(user_social_obj.user_account.user_id)

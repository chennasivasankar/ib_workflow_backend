from mock import create_autospec
import pytest
from ib_users.constants.user_profile.enums import Gender, Language


def test_get_user_profile_when_user_id_is_valid_returns_user_profile():
    from ib_users.interactors.user_profile_interactor \
        import GetUserProfileDTO, UserProfileInteractor

    user_profile = GetUserProfileDTO(
        user_id="1",
        name="iB User1",
        gender=Gender.MALE.value,
        dob="1994-07-01",
        profile_pic_url="",
        phone_number="9876543210",
        country_code="91",
        email="first@last.com",
        language_preference=Language.ENGLISH.value
    )
    user_id = user_profile.user_id

    from ib_users.interactors.storages.user_profile_storage import \
        UserProfileStorage
    from ib_users.interactors.presenters.user_profile_presenter import \
        UserProfilePresenter
    storage_mock = create_autospec(UserProfileStorage)
    presenter_mock = create_autospec(UserProfilePresenter)
    storage_mock.get_user_profile.return_value = user_profile

    user_profile_dict = {
        "name": user_profile.name,
        "gender": user_profile.gender,
        "dob": user_profile.dob,
        "profile_pic_url": user_profile.profile_pic_url,
        "phone_number": user_profile.phone_number,
        "country_code": user_profile.country_code,
        "email": user_profile.email,
        "language_preference": user_profile.language_preference,
        "is_phone_number_verified": user_profile.is_phone_number_verified,
        "is_email_verified": user_profile.is_email_verified,
        "user_id": user_profile.user_id
    }
    presenter_mock.get_user_profile.return_value = user_profile_dict

    user_profile_interactor = UserProfileInteractor(
        storage=storage_mock, presenter=presenter_mock)

    user_profile_interactor_response = \
        user_profile_interactor.get_user_profile(user_id=user_id)
    storage_mock.get_user_profile.assert_called_once_with(user_id)
    assert user_profile_interactor_response == user_profile_dict


def test_get_user_profile_when_user_id_is_invalid_throws_exception():
    user_id = 1
    from ib_users.interactors.exceptions.user_profile import \
        InvalidUserException
    from ib_users.constants.user_profile.error_messages import \
        INVALID_USER_ID
    from ib_users.constants.user_profile.error_types import \
        INVALID_USER_ID_ERROR_TYPE
    invalid_user_exception = InvalidUserException(
        message=INVALID_USER_ID, exception_type=INVALID_USER_ID_ERROR_TYPE)

    from ib_users.interactors.storages.user_profile_storage import \
        UserProfileStorage
    from ib_users.interactors.presenters.user_profile_presenter import \
        UserProfilePresenter
    storage_mock = create_autospec(UserProfileStorage)
    presenter_mock = create_autospec(UserProfilePresenter)
    storage_mock.get_user_profile.side_effect = invalid_user_exception

    from ib_users.interactors.user_profile_interactor import \
        UserProfileInteractor
    user_profile_interactor = UserProfileInteractor(
        storage=storage_mock, presenter=presenter_mock)

    from ib_users.interactors.presenters.user_profile_presenter import \
        UserProfilePresenter
    presenter_mock = create_autospec(UserProfilePresenter)

    with pytest.raises(InvalidUserException) as exception:
        user_profile_interactor.get_user_profile(user_id=user_id)
        storage_mock.get_user_profile.assert_called_once_with(user_id)
        presenter_mock.get_user_profile.assert_not_called()
        assert exception.args == invalid_user_exception.args

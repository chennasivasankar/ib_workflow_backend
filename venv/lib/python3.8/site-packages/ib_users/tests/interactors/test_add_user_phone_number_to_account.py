from mock import create_autospec
import pytest
from ib_users.interactors.third_party.otp_service import OTPService


def test_verify_user_phone_number():
    from ib_users.interactors.user_profile_interactor import UserProfileInteractor
    from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage
    from ib_users.interactors.storages.user_profile_storage import UserProfileStorage
    from ib_users.interactors.presenters.user_profile_presenter import UserProfilePresenter
    from ib_users.validators.base_validator import CustomException
    from ib_users.interactors.DTOs.common_dtos import PhoneNumberDTO

    otp_service = create_autospec(OTPService)
    storage_mock = create_autospec(UserProfileStorage)
    presenter_mock = create_autospec(UserProfilePresenter)
    accounts_storage_mock = create_autospec(UserAccountsStorage)
    user_profile_interactor = UserProfileInteractor(
        storage=storage_mock, presenter=presenter_mock)
    user_id = "1"
    country_code = "+91"
    phone_number = "1234567890"
    storage_mock.get_user_country_code_and_phone_number.return_value = (
        country_code, phone_number)
    accounts_storage_mock.get_user_id_given_phone_number.side_effect = \
        CustomException("", "")
    user_profile_interactor.verify_user_phone_number(
        accounts_storage=accounts_storage_mock,
        otp_service=otp_service,
        user_id=user_id
    )
    phone_number_dto = PhoneNumberDTO(country_code=country_code,
                                      phone_number=phone_number)
    accounts_storage_mock.get_user_id_given_phone_number \
        .assert_called_once_with(phone_number_dto=phone_number_dto)
    otp_service.send_otp_to_user_phone_number.assert_called_once()


@pytest.mark.parametrize('user_id', [None, 1, "", 1.0, []])
def test_invalid_user_id_verify_user_phone_number(user_id):
    from ib_users.interactors.user_profile_interactor import UserProfileInteractor
    from ib_users.interactors.storages.user_profile_storage import UserProfileStorage
    from ib_users.interactors.presenters.user_profile_presenter import UserProfilePresenter
    from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage
    from ib_users.interactors.exceptions.user_profile import \
        InvalidUserException
    storage_mock = create_autospec(UserProfileStorage)
    presenter_mock = create_autospec(UserProfilePresenter)
    accounts_storage = create_autospec(UserAccountsStorage)
    user_profile_interactor = UserProfileInteractor(
        storage=storage_mock, presenter=presenter_mock)
    storage_mock.does_user_exists.return_value = False
    storage_mock.get_user_country_code_and_phone_number.return_value = ("+91", "1234567890")

    otp_service = create_autospec(OTPService)
    with pytest.raises(InvalidUserException):
        user_profile_interactor.verify_user_phone_number(otp_service=otp_service,
                                                         accounts_storage=accounts_storage, user_id=user_id)


def test_verify_and_link_user_phone_number_to_account():
    from ib_users.interactors.user_profile_interactor import UserProfileInteractor
    from ib_users.interactors.storages.user_profile_storage import UserProfileStorage
    from ib_users.interactors.presenters.user_profile_presenter import UserProfilePresenter
    from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage
    storage_mock = create_autospec(UserProfileStorage)
    presenter_mock = create_autospec(UserProfilePresenter)
    accounts_storage = create_autospec(UserAccountsStorage)
    user_profile_interactor = UserProfileInteractor(
        storage=storage_mock, presenter=presenter_mock)

    user_id = "1"
    otp = "123456"

    storage_mock.get_user_country_code_and_phone_number.return_value = ("+91", "1234567890")
    storage_mock.does_user_exists.return_value = True
    otp_service = create_autospec(OTPService)
    user_profile_interactor.verify_and_link_user_phone_number_to_account(
        accounts_storage=accounts_storage,
        otp_service=otp_service,
        user_id=user_id, otp=otp)

    otp_service.validate_otp_send_to_phone_number.assert_called_once()
    accounts_storage.link_phone_number_to_user.assert_called_once()
    storage_mock.update_user_phone_number_verified.assert_called_once_with(
        user_id=user_id)


def test_verify_user_phone_number_does_not_exist_error():
    from ib_users.interactors.user_profile_interactor import UserProfileInteractor
    from ib_users.interactors.exceptions.user_profile import PhoneNumberDoesNotExistException
    from ib_users.interactors.storages.user_profile_storage import UserProfileStorage
    from ib_users.interactors.presenters.user_profile_presenter import UserProfilePresenter
    from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage
    storage_mock = create_autospec(UserProfileStorage)
    presenter_mock = create_autospec(UserProfilePresenter)
    accounts_storage = create_autospec(UserAccountsStorage)
    user_profile_interactor = UserProfileInteractor(
        storage=storage_mock, presenter=presenter_mock)
    otp_service = create_autospec(OTPService)
    storage_mock.does_user_exists.return_value = True

    user_id = "1"

    storage_mock.get_user_country_code_and_phone_number.return_value = (
        "+91", None)

    with pytest.raises(PhoneNumberDoesNotExistException):
        user_profile_interactor.verify_user_phone_number(otp_service=otp_service,
                                                         accounts_storage=accounts_storage, user_id=user_id)


def test_verify_user_country_code_does_not_exist_error():
    from ib_users.interactors.user_profile_interactor import UserProfileInteractor
    from ib_users.interactors.exceptions.user_profile import CountryCodeDoesNotExistException
    from ib_users.interactors.storages.user_profile_storage import UserProfileStorage
    from ib_users.interactors.presenters.user_profile_presenter import UserProfilePresenter
    from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage
    storage_mock = create_autospec(UserProfileStorage)
    presenter_mock = create_autospec(UserProfilePresenter)
    accounts_storage = create_autospec(UserAccountsStorage)
    user_profile_interactor = UserProfileInteractor(
        storage=storage_mock, presenter=presenter_mock)

    user_id = "1"
    otp_service = create_autospec(OTPService)

    storage_mock.get_user_country_code_and_phone_number.return_value = (
        None, "1234567890")

    with pytest.raises(CountryCodeDoesNotExistException):
        user_profile_interactor.verify_user_phone_number(otp_service=otp_service,
                                                         accounts_storage=accounts_storage, user_id=user_id)


def test_verify_user_country_code_and_phone_number_does_not_exist_error():
    from ib_users.interactors.user_profile_interactor import UserProfileInteractor
    from ib_users.interactors.exceptions.user_profile import CountryCodeAndPhoneNumberDoesNotExistException
    from ib_users.interactors.storages.user_profile_storage import UserProfileStorage
    from ib_users.interactors.presenters.user_profile_presenter import UserProfilePresenter
    from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage
    storage_mock = create_autospec(UserProfileStorage)
    presenter_mock = create_autospec(UserProfilePresenter)
    otp_service = create_autospec(OTPService)
    accounts_storage = create_autospec(UserAccountsStorage)
    user_profile_interactor = UserProfileInteractor(
        storage=storage_mock, presenter=presenter_mock)

    user_id = "1"

    storage_mock.get_user_country_code_and_phone_number.return_value = (
        None, None)

    with pytest.raises(CountryCodeAndPhoneNumberDoesNotExistException):
        user_profile_interactor.verify_user_phone_number(
            otp_service=otp_service, accounts_storage=accounts_storage,
            user_id=user_id)


def test_verify_user_phone_number_already_linked():
    from ib_users.interactors.user_profile_interactor import UserProfileInteractor
    from ib_users.interactors.exceptions.user_profile import PhoneNumberAlreadyLinkedException
    from ib_users.interactors.storages.user_profile_storage import UserProfileStorage
    from ib_users.interactors.presenters.user_profile_presenter import UserProfilePresenter
    from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage
    from ib_users.exceptions.registration_exceptions import \
        AccountWithThisPhoneNumberAlreadyExistsException
    storage_mock = create_autospec(UserProfileStorage)
    presenter_mock = create_autospec(UserProfilePresenter)
    accounts_storage = create_autospec(UserAccountsStorage)
    user_profile_interactor = UserProfileInteractor(
        storage=storage_mock, presenter=presenter_mock)

    otp_service = create_autospec(OTPService)
    user_id = "1"

    storage_mock.get_user_country_code_and_phone_number.return_value = (
        "+91", "1234567890")
    accounts_storage.check_user_exists_with_phone_number.side_effect = \
        AccountWithThisPhoneNumberAlreadyExistsException
    # TODO: Change below call to use accounts interactor

    with pytest.raises(PhoneNumberAlreadyLinkedException):
        user_profile_interactor.verify_user_phone_number(
            otp_service=otp_service,
            accounts_storage=accounts_storage,
            user_id=user_id)

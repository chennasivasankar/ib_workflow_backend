import pytest
from mock import create_autospec

from ib_users.exceptions.otp_verification_exceptions import ExceptionMessage, \
    PhoneNumberIsBlackListedException, EmailIsBlackListedException
from ib_users.interactors.storages.otp_blacklist_storage import \
    OTPBlacklistStorage
from ib_users.interactors.blacklist_interactor import BlacklistInteractor
from ib_users.utils.dtos import PhoneNumberDTO


def testblacklist_phone_number():
    phone_number_dto = PhoneNumberDTO(
        country_code="+91",
        phone_number="966123399"
    )
    blacklist_storage_mock=create_autospec(OTPBlacklistStorage)
    blacklist_interactor = BlacklistInteractor(storage=blacklist_storage_mock)
    blacklist_storage_mock.is_phone_number_blacklisted.return_value = False

    blacklist_interactor.blacklist_phone_number(
        phone_number_dto=phone_number_dto
    )
    blacklist_storage_mock.is_phone_number_blacklisted.assert_called_once_with(
        phone_number_dto=phone_number_dto
    )
    blacklist_storage_mock.add_phone_number_to_black_list.\
        assert_called_once_with(phone_number_dto=phone_number_dto)


def test_blacklisted_phone_number():
    phone_number_dto = PhoneNumberDTO(
        country_code="+91",
        phone_number="966123399"
    )
    blacklist_storage_mock=create_autospec(OTPBlacklistStorage)
    blacklist_interactor = BlacklistInteractor(storage=blacklist_storage_mock)
    blacklist_storage_mock.is_phone_number_blacklisted.return_value = True

    with pytest.raises(PhoneNumberIsBlackListedException) as e:
        blacklist_interactor.blacklist_phone_number(
            phone_number_dto=phone_number_dto
        )
    assert ExceptionMessage.GIVEN_PHONE_NUMBER_IS_BLACK_LISTED \
           in str(e.value)

    blacklist_storage_mock.is_phone_number_blacklisted.assert_called_once_with(
        phone_number_dto=phone_number_dto
    )


def test_blacklist_email():
    email = "sample@gmail.com"
    blacklist_storage_mock = create_autospec(OTPBlacklistStorage)
    blacklist_interactor = BlacklistInteractor(storage=blacklist_storage_mock)
    blacklist_storage_mock.is_email_blacklisted.return_value = False


    blacklist_interactor.blacklist_email(email=email)
    blacklist_storage_mock.is_email_blacklisted.assert_called_once_with(
        email=email
    )
    blacklist_storage_mock.add_email_to_blacklist.\
        assert_called_once_with(email=email)


def test_blacklisted_email():
    email = "sample@gmail.com"
    blacklist_storage_mock = create_autospec(OTPBlacklistStorage)
    blacklist_interactor = BlacklistInteractor(storage=blacklist_storage_mock)
    blacklist_storage_mock.is_email_blacklisted.return_value = True

    with pytest.raises(EmailIsBlackListedException) as e:
        blacklist_interactor.blacklist_email(email=email)

    assert ExceptionMessage.GIVEN_EMAIL_IS_BLACK_LISTED in str(e.value)

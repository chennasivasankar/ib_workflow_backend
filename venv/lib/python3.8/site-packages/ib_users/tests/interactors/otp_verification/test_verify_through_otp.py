import pytest
from mock import create_autospec

from ib_users.constants.otp_verification_constants import VerificationType, \
    SendOTPThrough, OTPStatus
from ib_users.interactors.email_otp_verification_interactor import \
    EmailOTPVerificationInteractor
from ib_users.interactors.phone_number_otp_verification_interactor import \
    PhoneNumberOTPVerificationInteractor
from ib_users.interactors.storages.otp_blacklist_storage import \
    OTPBlacklistStorage
from ib_users.interactors.storages.otp_verification_storage import \
    OTPVerificationStorage, GetOTPDetailsDTO
from ib_users.interactors.third_party.call_service import CallService
from ib_users.interactors.third_party.email_sender import EmailSender
from ib_users.interactors.third_party.phone_number_validator import \
    PhoneNumberValidator
from ib_users.interactors.third_party.sms_sender import SMSSender
from ib_users.interactors.user_otp_verification_interactor import \
    UserOTPVerificationInteractor
from ib_users.interactors.verify_otp_through import VerifyThroughOTPInteractor
from ib_users.utils.dtos import PhoneNumberDTO
from ib_users.validators.email_validator import EmailValidator


@pytest.mark.parametrize('otp_status', [
    OTPStatus.EXPIRED,
    OTPStatus.ACTIVE,
    OTPStatus.NOT_REQUESTED
])
@pytest.mark.parametrize('send_otp_through, template', [
    (SendOTPThrough.SMS, "your otp is {otp}"),
    (SendOTPThrough.CALL, "your otp in call is {otp}")
])
def test_verify_through_otp_given_phone_number(
        send_otp_through: SendOTPThrough,
        otp_status: OTPStatus,
        template: str):
    phone_number_dto = PhoneNumberDTO(
        country_code="+91",
        phone_number="9876543210"
    )
    otp = "123456"
    verification_type_mock = VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP
    otp_verification_storage_mock = create_autospec(OTPVerificationStorage)
    otp_blacklist_storage_mock = create_autospec(OTPBlacklistStorage)
    sms_sender_mock = create_autospec(SMSSender)
    call_service_mock = create_autospec(CallService)
    email_sender_mock = create_autospec(EmailSender)
    phone_number_validator_mock = create_autospec(PhoneNumberValidator)
    phone_number_otp_verification_interactor_mock = create_autospec(
        PhoneNumberOTPVerificationInteractor
    )

    def create_otp_verification_interactor_mock():
        return phone_number_otp_verification_interactor_mock

    def create_sms_sender_mock(self, sms_template, sms_service_provider):
        return sms_sender_mock

    def create_call_service_mock(call_template):
        return call_service_mock

    def create_email_sender_mock(subject, email_body_template):
        return email_sender_mock

    def create_otp_verification_storage():
        return otp_verification_storage_mock

    def create_otp_blacklist_storage():
        return otp_blacklist_storage_mock

    def create_phone_number_validator_mock():
        return phone_number_validator_mock

    otp_blacklist_storage_mock.is_phone_number_blacklisted.return_value \
        = False
    otp_verification_storage_mock.is_phone_number_whitelisted.return_value \
        = False
    otp_verification_storage_mock.get_otp_status.return_value = otp_status
    otp_verification_storage_mock.get_otp_details.return_value = \
        GetOTPDetailsDTO(
            otp=otp
        )
    otp_verification_through_interactor = VerifyThroughOTPInteractor(
        verification_type=verification_type_mock
    )
    otp_verification_through_interactor._create_otp_verification_storage = \
        create_otp_verification_storage
    otp_verification_through_interactor._create_otp_blacklist_storage = \
        create_otp_blacklist_storage
    otp_verification_through_interactor. \
        _create_phone_number_otp_verification_interactor = \
        create_otp_verification_interactor_mock
    VerifyThroughOTPInteractor._create_email_sender = create_email_sender_mock
    VerifyThroughOTPInteractor._create_phone_number_validator = \
        create_phone_number_validator_mock
    VerifyThroughOTPInteractor._create_sms_sender = create_sms_sender_mock
    VerifyThroughOTPInteractor._create_call_service = create_call_service_mock

    kwargs = {
        "phone_number_dto": phone_number_dto,
        "send_otp_through": send_otp_through,
        "template": template
    }
    if send_otp_through == SendOTPThrough.SMS:
        kwargs.update({"sms_template": template})
    elif send_otp_through == SendOTPThrough.CALL:
        kwargs.update({"call_template": template})

    otp_verification_through_interactor.verify_through_otp(
        **kwargs
    )

    phone_number_otp_verification_interactor_mock.verify_phone_number. \
        assert_called_once_with(
        phone_number_dto=kwargs.get("phone_number_dto"),
        phone_number_validator=phone_number_validator_mock,
        send_otp_through=kwargs.get("send_otp_through"),
        sms_sender=sms_sender_mock,
        call_service=call_service_mock
    )

    validate_otp_input = {
        "phone_number_dto": phone_number_dto,
        "otp_to_be_verified": otp
    }

    otp_verification_through_interactor.validate_otp(
        **validate_otp_input
    )
    phone_number_otp_verification_interactor_mock. \
        validate_otp_to_verify_phone_number.assert_called_once_with(
        phone_number_dto=validate_otp_input.get("phone_number_dto"),
        otp_to_be_verified=validate_otp_input.get("otp_to_be_verified")
    )


@pytest.mark.parametrize('otp_status', [
    OTPStatus.EXPIRED,
    OTPStatus.ACTIVE,
    OTPStatus.NOT_REQUESTED
])
def test_verify_through_otp_given_email(otp_status):
    email = "tdd@testing.com"
    otp = "123456"
    subject = "User Verification OTP"
    email_body_template = "Your OTP is {{otp_token}}"
    verification_type_mock = VerificationType.VERIFY_EMAIL_WITH_OTP
    otp_verification_storage_mock = create_autospec(OTPVerificationStorage)
    otp_blacklist_storage_mock = create_autospec(OTPBlacklistStorage)
    sms_sender_mock = create_autospec(SMSSender)
    call_service_mock = create_autospec(CallService)
    email_sender_mock = create_autospec(EmailSender)
    email_otp_verification_interactor_mock = create_autospec(
        EmailOTPVerificationInteractor
    )
    email_validator_mock = create_autospec(EmailValidator)

    def create_otp_verification_interactor_mock():
        return email_otp_verification_interactor_mock

    def create_sms_sender_mock(self, sms_template, sms_service_provider):
        return sms_sender_mock

    def create_call_service_mock(call_template):
        return call_service_mock

    def create_email_sender_mock(subject, email_body_template):
        return email_sender_mock

    def create_otp_verification_storage():
        return otp_verification_storage_mock

    def create_email_validator_mock():
        return email_validator_mock

    otp_blacklist_storage_mock.is_email_blacklisted.return_value \
        = False
    otp_verification_storage_mock.is_email_whitelisted.return_value \
        = False

    otp_verification_through_interactor = VerifyThroughOTPInteractor(
        verification_type=verification_type_mock
    )
    otp_verification_through_interactor._create_otp_verification_storage = \
        create_otp_verification_storage
    otp_verification_through_interactor. \
        _create_email_otp_verification_interactor = \
        create_otp_verification_interactor_mock

    VerifyThroughOTPInteractor._create_email_sender = create_email_sender_mock
    VerifyThroughOTPInteractor._create_sms_sender = create_sms_sender_mock
    VerifyThroughOTPInteractor._create_call_service = create_call_service_mock
    VerifyThroughOTPInteractor._create_email_validator = \
        create_email_validator_mock

    kwargs = {
        "email": email,
        "subject": subject,
        "email_body_template": email_body_template
    }
    otp_verification_through_interactor.verify_through_otp(
        **kwargs
    )

    email_otp_verification_interactor_mock.verify_email. \
        assert_called_once_with(
        email=kwargs.get("email"),
        email_validator=email_validator_mock,
        email_sender=email_sender_mock,
    )
    validate_otp_input = {
        "email": email,
        "otp_to_be_verified": otp
    }

    otp_verification_through_interactor.validate_otp(
        **validate_otp_input
    )
    email_otp_verification_interactor_mock.validate_otp_to_verify_email. \
        assert_called_once_with(
        email=validate_otp_input.get("email"),
        otp_to_be_verified=validate_otp_input.get("otp_to_be_verified")
    )


@pytest.mark.parametrize('send_otp_through, template', [
    (SendOTPThrough.SMS.value, "your otp is {otp}"),
    (SendOTPThrough.CALL.value, "your otp in call is {otp}")
])
def test_verify_through_otp_given_user_id(send_otp_through: SendOTPThrough,
                                          template: str):
    user_id = "1"
    email = "tdd@testing.com"
    phone_number_dto = PhoneNumberDTO(
        country_code="+91",
        phone_number="9876543210"
    )
    otp = "123456"
    verification_type_mock = VerificationType.RESET_PASSWORD_WITH_OTP
    otp_verification_storage_mock = create_autospec(OTPVerificationStorage)
    sms_sender_mock = create_autospec(SMSSender)
    call_service_mock = create_autospec(CallService)
    email_sender_mock = create_autospec(EmailSender)
    user_otp_verification_interactor_mock = create_autospec(
        UserOTPVerificationInteractor
    )

    def create_otp_verification_interactor_mock():
        return user_otp_verification_interactor_mock

    def create_sms_sender_mock(self, sms_template, sms_service_provider):
        return sms_sender_mock

    def create_call_service_mock(call_template):
        return call_service_mock

    def create_email_sender_mock(subject, email_body_template):
        return email_sender_mock

    def create_otp_verification_storage():
        return otp_verification_storage_mock

    otp_verification_through_interactor = VerifyThroughOTPInteractor(
        verification_type=verification_type_mock
    )
    otp_verification_through_interactor._create_otp_verification_storage = \
        create_otp_verification_storage
    otp_verification_through_interactor. \
        _create_user_otp_verification_interactor = \
        create_otp_verification_interactor_mock
    VerifyThroughOTPInteractor._create_sms_sender = create_sms_sender_mock
    VerifyThroughOTPInteractor._create_call_service = create_call_service_mock
    VerifyThroughOTPInteractor._create_email_sender = create_email_sender_mock

    kwargs = {
        "user_id": user_id,
        "email": email,
        "phone_number_dto": phone_number_dto,
        "send_otp_through": send_otp_through
    }

    if send_otp_through == SendOTPThrough.SMS.value:
        kwargs.update({
            "sms_template": template,
            "sms_sender": sms_sender_mock,
            "subject": 'subject',
            "email_body_template": "email_body_template"
        })
    elif send_otp_through == SendOTPThrough.CALL.value:
        kwargs.update({
            "call_template": template,
            "subject": 'subject',
            "email_body_template": "email_body_template",
            "email_sender": email_sender_mock,
            "call_service": call_service_mock
        })

    otp_verification_through_interactor.verify_through_otp(
        **kwargs
    )

    if send_otp_through == SendOTPThrough.SMS.value:
        user_otp_verification_interactor_mock.verify_user. \
            assert_called_once_with(
            phone_number_dto=kwargs.get("phone_number_dto"),
            send_otp_through=kwargs.get("send_otp_through"),
            sms_sender=sms_sender_mock,
            call_service=None,
            email=kwargs.get("email"),
            email_sender=email_sender_mock,
            user_id=kwargs.get("user_id")
        )

    elif send_otp_through == SendOTPThrough.CALL.value:
        user_otp_verification_interactor_mock.verify_user. \
            assert_called_once_with(
            phone_number_dto=kwargs.get("phone_number_dto"),
            send_otp_through=kwargs.get("send_otp_through"),
            sms_sender=sms_sender_mock,
            call_service=call_service_mock,
            email=kwargs.get("email"),
            email_sender=email_sender_mock,
            user_id=kwargs.get("user_id")
        )

    validate_otp_input = {
        "user_id": user_id,
        "otp_to_be_verified": otp
    }

    otp_verification_through_interactor.validate_otp(
        **validate_otp_input
    )
    user_otp_verification_interactor_mock.validate_otp_to_verify_user. \
        assert_called_once_with(
        user_id=validate_otp_input.get("user_id"),
        otp_to_be_verified=validate_otp_input.get("otp_to_be_verified")
    )


@pytest.mark.parametrize('otp_status', [
    OTPStatus.EXPIRED,
    OTPStatus.ACTIVE,
    OTPStatus.NOT_REQUESTED
])
@pytest.mark.parametrize('send_otp_through, template', [
    (SendOTPThrough.SMS, "your otp is {otp}"),
    (SendOTPThrough.CALL, "your otp in call is {otp}")
])
def test_verify_through_otp_given_login_with_phone_number(
        send_otp_through: SendOTPThrough,
        otp_status: OTPStatus,
        template: str):
    phone_number_dto = PhoneNumberDTO(
        country_code="+91",
        phone_number="9876543210"
    )
    otp = "123456"
    verification_type_mock = VerificationType.LOGIN_WITH_OTP
    otp_verification_storage_mock = create_autospec(OTPVerificationStorage)
    otp_blacklist_storage_mock = create_autospec(OTPBlacklistStorage)
    sms_sender_mock = create_autospec(SMSSender)
    call_service_mock = create_autospec(CallService)
    email_sender_mock = create_autospec(EmailSender)
    phone_number_validator_mock = create_autospec(PhoneNumberValidator)
    phone_number_otp_verification_interactor_mock = create_autospec(
        PhoneNumberOTPVerificationInteractor
    )

    def create_otp_verification_interactor_mock():
        return phone_number_otp_verification_interactor_mock

    def create_sms_sender_mock(self, sms_template, sms_service_provider):
        return sms_sender_mock

    def create_call_service_mock(call_template):
        return call_service_mock

    def create_email_sender_mock(subject, email_body_template):
        return email_sender_mock

    def create_otp_verification_storage():
        return otp_verification_storage_mock

    def create_otp_blacklist_storage():
        return otp_blacklist_storage_mock

    def create_phone_number_validator_mock():
        return phone_number_validator_mock

    otp_blacklist_storage_mock.is_phone_number_blacklisted.return_value \
        = False
    otp_verification_storage_mock.is_phone_number_whitelisted.return_value \
        = False
    otp_verification_storage_mock.get_otp_status.return_value = otp_status
    otp_verification_storage_mock.get_otp_details.return_value = \
        GetOTPDetailsDTO(
            otp=otp
        )
    otp_verification_through_interactor = VerifyThroughOTPInteractor(
        verification_type=verification_type_mock
    )
    otp_verification_through_interactor._create_otp_verification_storage = \
        create_otp_verification_storage
    otp_verification_through_interactor._create_otp_blacklist_storage = \
        create_otp_blacklist_storage
    otp_verification_through_interactor. \
        _create_phone_number_otp_verification_interactor = \
        create_otp_verification_interactor_mock
    VerifyThroughOTPInteractor._create_email_sender = create_email_sender_mock
    VerifyThroughOTPInteractor._create_phone_number_validator = \
        create_phone_number_validator_mock
    VerifyThroughOTPInteractor._create_sms_sender = create_sms_sender_mock
    VerifyThroughOTPInteractor._create_call_service = create_call_service_mock

    kwargs = {
        "phone_number_dto": phone_number_dto,
        "send_otp_through": send_otp_through,
        "template": template
    }
    if send_otp_through == SendOTPThrough.SMS:
        kwargs.update({"sms_template": template})
    elif send_otp_through == SendOTPThrough.CALL:
        kwargs.update({"call_template": template})

    otp_verification_through_interactor.verify_through_otp(
        **kwargs
    )

    phone_number_otp_verification_interactor_mock.verify_phone_number. \
        assert_called_once_with(
        phone_number_dto=kwargs.get("phone_number_dto"),
        phone_number_validator=phone_number_validator_mock,
        send_otp_through=kwargs.get("send_otp_through"),
        sms_sender=sms_sender_mock,
        call_service=call_service_mock
    )

    validate_otp_input = {
        "phone_number_dto": phone_number_dto,
        "otp_to_be_verified": otp
    }

    print("valiadte otp input", validate_otp_input)
    otp_verification_through_interactor.validate_otp(
        **validate_otp_input
    )
    phone_number_otp_verification_interactor_mock. \
        validate_otp_to_verify_phone_number.assert_called_once_with(
        phone_number_dto=validate_otp_input.get("phone_number_dto"),
        otp_to_be_verified=validate_otp_input.get("otp_to_be_verified")
    )


@pytest.mark.parametrize('otp_status', [
    OTPStatus.EXPIRED,
    OTPStatus.ACTIVE,
    OTPStatus.NOT_REQUESTED
])
def test_verify_through_otp_given_login_with_email(otp_status):
    email = "tdd@testing.com"
    otp = "123456"
    subject = "User Verification OTP"
    email_body_template = "Your OTP is {{otp_token}}"
    verification_type_mock = VerificationType.LOGIN_WITH_OTP
    otp_verification_storage_mock = create_autospec(OTPVerificationStorage)
    otp_blacklist_storage_mock = create_autospec(OTPBlacklistStorage)
    sms_sender_mock = create_autospec(SMSSender)
    call_service_mock = create_autospec(CallService)
    email_sender_mock = create_autospec(EmailSender)
    email_otp_verification_interactor_mock = create_autospec(
        EmailOTPVerificationInteractor
    )
    email_validator_mock = create_autospec(EmailValidator)

    def create_otp_verification_interactor_mock():
        return email_otp_verification_interactor_mock

    def create_sms_sender_mock(self, sms_template, sms_service_provider):
        return sms_sender_mock

    def create_call_service_mock(call_template):
        return call_service_mock

    def create_email_sender_mock(subject, email_body_template):
        return email_sender_mock

    def create_otp_verification_storage():
        return otp_verification_storage_mock

    def create_email_validator_mock():
        return email_validator_mock

    otp_blacklist_storage_mock.is_email_blacklisted.return_value \
        = False
    otp_verification_storage_mock.is_email_whitelisted.return_value \
        = False

    otp_verification_through_interactor = VerifyThroughOTPInteractor(
        verification_type=verification_type_mock
    )
    otp_verification_through_interactor._create_otp_verification_storage = \
        create_otp_verification_storage
    otp_verification_through_interactor. \
        _create_email_otp_verification_interactor = \
        create_otp_verification_interactor_mock

    VerifyThroughOTPInteractor._create_email_sender = create_email_sender_mock
    VerifyThroughOTPInteractor._create_sms_sender = create_sms_sender_mock
    VerifyThroughOTPInteractor._create_call_service = create_call_service_mock
    VerifyThroughOTPInteractor._create_email_validator = \
        create_email_validator_mock

    kwargs = {
        "email": email,
        "subject": subject,
        "email_body_template": email_body_template
    }
    otp_verification_through_interactor.verify_through_otp(
        **kwargs
    )

    email_otp_verification_interactor_mock.verify_email. \
        assert_called_once_with(
        email=kwargs.get("email"),
        email_validator=email_validator_mock,
        email_sender=email_sender_mock,
    )
    validate_otp_input = {
        "email": email,
        "otp_to_be_verified": otp
    }

    otp_verification_through_interactor.validate_otp(
        **validate_otp_input
    )
    email_otp_verification_interactor_mock.validate_otp_to_verify_email. \
        assert_called_once_with(
        email=validate_otp_input.get("email"),
        otp_to_be_verified=validate_otp_input.get("otp_to_be_verified")
    )


@pytest.mark.parametrize('otp_status', [
    OTPStatus.EXPIRED,
    OTPStatus.ACTIVE,
    OTPStatus.NOT_REQUESTED
])
@pytest.mark.parametrize('send_otp_through, template', [
    (SendOTPThrough.SMS, "your otp is {otp}"),
    (SendOTPThrough.CALL, "your otp in call is {otp}")
])
def test_verify_through_otp_given_registration_with_phone_number(
        send_otp_through: SendOTPThrough,
        otp_status: OTPStatus,
        template: str):
    phone_number_dto = PhoneNumberDTO(
        country_code="+91",
        phone_number="9876543210"
    )
    otp = "123456"
    verification_type_mock = VerificationType.REGISTRATION_WITH_OTP
    otp_verification_storage_mock = create_autospec(OTPVerificationStorage)
    otp_blacklist_storage_mock = create_autospec(OTPBlacklistStorage)
    sms_sender_mock = create_autospec(SMSSender)
    call_service_mock = create_autospec(CallService)
    email_sender_mock = create_autospec(EmailSender)
    phone_number_validator_mock = create_autospec(PhoneNumberValidator)
    phone_number_otp_verification_interactor_mock = create_autospec(
        PhoneNumberOTPVerificationInteractor
    )

    def create_otp_verification_interactor_mock():
        return phone_number_otp_verification_interactor_mock

    def create_sms_sender_mock(self, sms_template, sms_service_provider):
        return sms_sender_mock

    def create_call_service_mock(call_template):
        return call_service_mock

    def create_email_sender_mock(subject, email_body_template):
        return email_sender_mock

    def create_otp_verification_storage():
        return otp_verification_storage_mock

    def create_otp_blacklist_storage():
        return otp_blacklist_storage_mock

    def create_phone_number_validator_mock():
        return phone_number_validator_mock

    otp_blacklist_storage_mock.is_phone_number_blacklisted.return_value \
        = False
    otp_verification_storage_mock.is_phone_number_whitelisted.return_value \
        = False
    otp_verification_storage_mock.get_otp_status.return_value = otp_status
    otp_verification_storage_mock.get_otp_details.return_value = \
        GetOTPDetailsDTO(
            otp=otp
        )
    otp_verification_through_interactor = VerifyThroughOTPInteractor(
        verification_type=verification_type_mock
    )
    otp_verification_through_interactor._create_otp_verification_storage = \
        create_otp_verification_storage
    otp_verification_through_interactor._create_otp_blacklist_storage = \
        create_otp_blacklist_storage
    otp_verification_through_interactor. \
        _create_phone_number_otp_verification_interactor = \
        create_otp_verification_interactor_mock
    VerifyThroughOTPInteractor._create_email_sender = create_email_sender_mock
    VerifyThroughOTPInteractor._create_phone_number_validator = \
        create_phone_number_validator_mock
    VerifyThroughOTPInteractor._create_sms_sender = create_sms_sender_mock
    VerifyThroughOTPInteractor._create_call_service = create_call_service_mock

    kwargs = {
        "phone_number_dto": phone_number_dto,
        "send_otp_through": send_otp_through,
        "template": template
    }
    if send_otp_through == SendOTPThrough.SMS:
        kwargs.update({"sms_template": template})
    elif send_otp_through == SendOTPThrough.CALL:
        kwargs.update({"call_template": template})

    otp_verification_through_interactor.verify_through_otp(
        **kwargs
    )

    phone_number_otp_verification_interactor_mock.verify_phone_number. \
        assert_called_once_with(
        phone_number_dto=kwargs.get("phone_number_dto"),
        phone_number_validator=phone_number_validator_mock,
        send_otp_through=kwargs.get("send_otp_through"),
        sms_sender=sms_sender_mock,
        call_service=call_service_mock
    )

    validate_otp_input = {
        "phone_number_dto": phone_number_dto,
        "otp_to_be_verified": otp
    }

    otp_verification_through_interactor.validate_otp(
        **validate_otp_input
    )
    phone_number_otp_verification_interactor_mock. \
        validate_otp_to_verify_phone_number.assert_called_once_with(
        phone_number_dto=validate_otp_input.get("phone_number_dto"),
        otp_to_be_verified=validate_otp_input.get("otp_to_be_verified")
    )


@pytest.mark.parametrize('otp_status', [
    OTPStatus.EXPIRED,
    OTPStatus.ACTIVE,
    OTPStatus.NOT_REQUESTED
])
def test_verify_through_otp_given_registration_with_email(otp_status):
    email = "tdd@testing.com"
    otp = "123456"
    subject = "User Verification OTP"
    email_body_template = "Your OTP is {{otp_token}}"
    verification_type_mock = VerificationType.REGISTRATION_WITH_OTP
    otp_verification_storage_mock = create_autospec(OTPVerificationStorage)
    otp_blacklist_storage_mock = create_autospec(OTPBlacklistStorage)
    sms_sender_mock = create_autospec(SMSSender)
    call_service_mock = create_autospec(CallService)
    email_sender_mock = create_autospec(EmailSender)
    email_otp_verification_interactor_mock = create_autospec(
        EmailOTPVerificationInteractor
    )
    email_validator_mock = create_autospec(EmailValidator)

    def create_otp_verification_interactor_mock():
        return email_otp_verification_interactor_mock

    def create_sms_sender_mock(self, sms_template, sms_service_provider):
        return sms_sender_mock

    def create_call_service_mock(call_template):
        return call_service_mock

    def create_email_sender_mock(subject, email_body_template):
        return email_sender_mock

    def create_otp_verification_storage():
        return otp_verification_storage_mock

    def create_email_validator_mock():
        return email_validator_mock

    otp_blacklist_storage_mock.is_email_blacklisted.return_value \
        = False
    otp_verification_storage_mock.is_email_whitelisted.return_value \
        = False

    otp_verification_through_interactor = VerifyThroughOTPInteractor(
        verification_type=verification_type_mock
    )
    otp_verification_through_interactor._create_otp_verification_storage = \
        create_otp_verification_storage
    otp_verification_through_interactor. \
        _create_email_otp_verification_interactor = \
        create_otp_verification_interactor_mock

    VerifyThroughOTPInteractor._create_email_sender = create_email_sender_mock
    VerifyThroughOTPInteractor._create_sms_sender = create_sms_sender_mock
    VerifyThroughOTPInteractor._create_call_service = create_call_service_mock
    VerifyThroughOTPInteractor._create_email_validator = \
        create_email_validator_mock

    kwargs = {
        "email": email,
        "subject": subject,
        "email_body_template": email_body_template
    }
    otp_verification_through_interactor.verify_through_otp(
        **kwargs
    )

    email_otp_verification_interactor_mock.verify_email. \
        assert_called_once_with(
        email=kwargs.get("email"),
        email_validator=email_validator_mock,
        email_sender=email_sender_mock,
    )
    validate_otp_input = {
        "email": email,
        "otp_to_be_verified": otp
    }

    otp_verification_through_interactor.validate_otp(
        **validate_otp_input
    )
    email_otp_verification_interactor_mock.validate_otp_to_verify_email. \
        assert_called_once_with(
        email=validate_otp_input.get("email"),
        otp_to_be_verified=validate_otp_input.get("otp_to_be_verified")
    )

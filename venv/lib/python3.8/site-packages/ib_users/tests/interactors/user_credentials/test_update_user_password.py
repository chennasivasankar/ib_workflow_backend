import pytest
from mock import create_autospec

from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.user_credentials.update_user_password_interactor import \
    UpdateUserPasswordInteractor


class TestUpdateUserPassword:
    @pytest.fixture
    def set_up(self):
        self.test_user_id = '12345'
        self.test_current_password = '@current'
        self.test_new_password = '@new password'

        storage = create_autospec(UserAccountsStorage)
        interactor = UpdateUserPasswordInteractor(storage)
        return interactor, storage

    def test_update_user_password(self, set_up):
        interactor, storage = set_up
        interactor.update_user_password(
            user_id=self.test_user_id,
            current_password=self.test_current_password,
            new_password=self.test_new_password
        )
        storage.update_user_password.assert_called_once_with(
            self.test_user_id, self.test_new_password)

    @pytest.mark.parametrize('new_password', ["123"])
    def test_update_user_password_invalid_new_password(
            self, set_up, new_password):
        interactor, storage = set_up
        from ib_users.interactors.user_credentials.exceptions\
            .user_credentials_exceptions import \
            InvalidNewPasswordException
        with pytest.raises(InvalidNewPasswordException):
            interactor.update_user_password(
                user_id=self.test_user_id,
                current_password=self.test_current_password,
                new_password=new_password
            )
        storage.update_user_password.assert_not_called()

    @pytest.mark.parametrize('current_password', ["123"])
    def test_update_user_password_invalid_current_password(
            self, set_up, current_password):
        interactor, storage = set_up
        from ib_users.interactors.user_credentials.exceptions\
            .user_credentials_exceptions import \
            InvalidCurrentPasswordException
        with pytest.raises(InvalidCurrentPasswordException):
            interactor.update_user_password(
                user_id=self.test_user_id,
                current_password=current_password,
                new_password=self.test_new_password
            )
        storage.update_user_password.assert_not_called()

    def test_update_user_password_current_password_doesnt_match(self, set_up):
        interactor, storage = set_up
        from ib_users.interactors.exceptions.user_credentials_exceptions \
            import \
            CurrentPasswordMismatchException
        storage.check_current_password_matches.side_effect = \
            CurrentPasswordMismatchException
        with pytest.raises(CurrentPasswordMismatchException):
            interactor.update_user_password(
                user_id=self.test_user_id,
                current_password=self.test_current_password,
                new_password=self.test_new_password
            )
        storage.update_user_password.assert_not_called()

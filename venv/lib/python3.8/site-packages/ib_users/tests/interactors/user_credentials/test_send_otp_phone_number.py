import pytest
from mock import create_autospec

from ib_users.constants.otp_constants import OTPMessageFormatConstants
from ib_users.interactors.DTOs.common_dtos import PhoneNumberDTO
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.third_party.otp_service import OTPService
from ib_users.interactors.user_credentials.send_otp_phone_number_interactor \
    import \
    SendOTPPhoneNumberInteractor
from ib_users.interactors.validators.phone_number_validator import \
    PhoneNumberValidator
from ib_users.models import UserAccount


class TestSendOTPEmail:
    @pytest.fixture
    def set_up(self):
        storage = create_autospec(UserAccountsStorage)
        otp_service = create_autospec(OTPService)
        phone_number_validator = create_autospec(PhoneNumberValidator)
        interactor = SendOTPPhoneNumberInteractor(
            storage, otp_service, phone_number_validator)
        return storage, interactor, otp_service, phone_number_validator

    def test_send_otp_email(self, set_up):
        phone_number_dto = PhoneNumberDTO(
            phone_number="98665464430",
            country_code="+91"
        )
        user = UserAccount()

        storage, interactor, otp_service, phone_number_validator = set_up
        storage.get_user_given_phone_number.return_value = user
        interactor.send_otp_to_phone_number(phone_number_dto)
        otp_service.send_otp_to_user_phone_number.assert_called_once_with(
            phone_number_dto,
            OTPMessageFormatConstants.FORMAT_TO_RESET_PASSWORD)

    @pytest.mark.parametrize('phone_number, country_code',
                             [("", "+91"), ("98665464430", "")])
    def test_send_otp_phone_number_invalid_phone_number(
            self, set_up, phone_number, country_code):
        phone_number_dto = PhoneNumberDTO(
            phone_number=phone_number,
            country_code=country_code,
        )

        storage, interactor, otp_service, phone_number_validator = set_up
        from ib_users.exceptions.invalid_phone_number_exception import \
            InvalidPhoneNumberException
        from ib_users.exceptions.phone_number_validation_exception_messges \
            import \
            UNABLE_TO_PARSE_PHONE_NUMBER
        phone_number_validator.validate.side_effect = \
            InvalidPhoneNumberException(
                UNABLE_TO_PARSE_PHONE_NUMBER.message,
                UNABLE_TO_PARSE_PHONE_NUMBER.code)
        with pytest.raises(InvalidPhoneNumberException):
            interactor.send_otp_to_phone_number(phone_number_dto)
        otp_service.send_otp_to_user_phone_number.assert_not_called()

    def test_send_otp_phone_number_account_doesnt_exist(self, set_up):
        phone_number_dto = PhoneNumberDTO(
            phone_number="98665464430",
            country_code="+91",
        )

        storage, interactor, otp_service, phone_number_validator = set_up
        from ib_users.interactors.exceptions.user_credentials_exceptions \
            import \
            AccountWithPhoneNumberDoesntExistException
        storage.get_user_given_phone_number.side_effect = \
            AccountWithPhoneNumberDoesntExistException
        with pytest.raises(AccountWithPhoneNumberDoesntExistException):
            interactor.send_otp_to_phone_number(phone_number_dto)
        otp_service.send_otp_to_user_phone_number.assert_not_called()
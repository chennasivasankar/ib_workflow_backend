import pytest
from mock import create_autospec

from ib_users.constants.otp_constants import OTPMessageFormatConstants
from ib_users.interactors.DTOs.common_dtos import PhoneNumberDTO
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.storages.user_accounts_storage import \
    UserEmailAndPhoneNumberDTO
from ib_users.interactors.third_party.otp_service import OTPService
from ib_users.interactors.user_credentials.send_otp_username_interactor \
    import \
    SendOTPUsernameInteractor
from ib_users.tests.interactors.user_credentials.constants import \
    TestCaseParameters
from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException


class TestSendOTPEmail:
    @pytest.fixture
    def set_up(self):
        storage = create_autospec(UserAccountsStorage)
        otp_service = create_autospec(OTPService)
        interactor = SendOTPUsernameInteractor(storage, otp_service)
        return storage, interactor, otp_service


    def test_send_otp_username_email_phone_number(self, set_up):
        username = "praneetha"
        contact_details = UserEmailAndPhoneNumberDTO(user_id="1234",
            phone_number=PhoneNumberDTO(phone_number="9866546430",
                                        country_code="+91"), email="a@gmail.com")

        storage, interactor, otp_service = set_up
        storage.get_user_details_to_send_otp_given_username.return_value = contact_details
        interactor.send_otp_given_username(username)
        otp_service.send_otp_to_user.assert_called_once_with(
            contact_details.email,
            contact_details.phone_number,
            OTPMessageFormatConstants.FORMAT_TO_RESET_PASSWORD,
            OTPMessageFormatConstants.OTP_SUBJECT_TO_RESET_PASSWORD)

    def test_send_otp_username_email(self, set_up):
        username = "praneetha"
        contact_details = UserEmailAndPhoneNumberDTO(
            user_id="1234", phone_number=PhoneNumberDTO(phone_number="",
                                                         country_code=""),
                                                     email="a@gmail.com")

        storage, interactor, otp_service = set_up
        storage.get_user_details_to_send_otp_given_username.return_value = contact_details
        interactor.send_otp_given_username(username)
        otp_service.send_otp_to_user_email.assert_called_once_with(
            contact_details.user_id, contact_details.email,
            OTPMessageFormatConstants.FORMAT_TO_RESET_PASSWORD)

    def test_send_otp_username_phone_number(self, set_up):
        username = "praneetha"
        contact_details = UserEmailAndPhoneNumberDTO(user_id="1234",
                                                     phone_number=PhoneNumberDTO(
                                                         phone_number="9866546430",
                                                         country_code="+91"),
                                                     email="")

        storage, interactor, otp_service = set_up
        storage.get_user_details_to_send_otp_given_username.return_value = contact_details
        interactor.send_otp_given_username(username)
        otp_service.send_otp_to_user_phone_number.assert_called_once_with(
            contact_details.phone_number,
            OTPMessageFormatConstants.FORMAT_TO_RESET_PASSWORD)

    def test_send_otp_username_no_contact_details(self, set_up):
        username = "praneetha"
        contact_details = UserEmailAndPhoneNumberDTO(user_id="1234",
                                                     phone_number=PhoneNumberDTO(
                                                         phone_number="",
                                                         country_code=""),
                                                     email="")

        storage, interactor, otp_service = set_up
        storage.get_user_details_to_send_otp_given_username.return_value = contact_details
        from ib_users.interactors.exceptions.user_credentials_exceptions \
            import ContactDetailsNotPresentException
        with pytest.raises(ContactDetailsNotPresentException):
            interactor.send_otp_given_username(username)
        otp_service.send_otp_to_user_email.assert_not_called()
        otp_service.send_otp_to_user_phone_number.assert_not_called()
        otp_service.send_otp_to_user.assert_not_called()

    @pytest.mark.parametrize('username,exception_message',
                             TestCaseParameters.username_and_exception_messages)
    def test_send_otp_username_invalid_username(
            self, set_up, username, exception_message):
        storage, interactor, otp_service = set_up
        with pytest.raises(CustomException) as exception:
            interactor.send_otp_given_username(username)
        TestsUtils.assert_custom_exception(exception_message, exception)

    def test_send_otp_username_account_doesnt_exist(self, set_up):
        username = "praneetha"

        storage, interactor, otp_service = set_up
        from ib_users.interactors.exceptions.user_credentials_exceptions \
            import AccountWithUsernameDoesntExistException
        storage.get_user_details_to_send_otp_given_username.side_effect = \
            AccountWithUsernameDoesntExistException
        with pytest.raises(AccountWithUsernameDoesntExistException):
            interactor.send_otp_given_username(username)

import pytest
from mock import create_autospec

from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.third_party.otp_service import OTPService
from ib_users.interactors.user_credentials.DTOs.user_credentials_dtos import \
    ResetPasswordWithOTPPhoneNumberDTO
from ib_users.interactors.user_credentials \
    .reset_password_with_otp_phone_number_interactor import \
    ResetPasswordWithOTPPhoneNumberInteractor
from ib_users.interactors.validators.phone_number_validator import \
    PhoneNumberValidator
from ib_users.models import UserAccount


class TestResetPasswordWithOTPPhoneNumber:
    @pytest.fixture
    def set_up(self):
        storage = create_autospec(UserAccountsStorage)
        otp_service = create_autospec(OTPService)
        phone_number_validator = create_autospec(PhoneNumberValidator)
        interactor = ResetPasswordWithOTPPhoneNumberInteractor(
            storage, otp_service, phone_number_validator)
        return storage, interactor, otp_service

    @pytest.fixture
    def set_up_with_validations(self):
        storage = create_autospec(UserAccountsStorage)
        otp_service = create_autospec(OTPService)
        phone_number_validator = create_autospec(PhoneNumberValidator)
        interactor = ResetPasswordWithOTPPhoneNumberInteractor(
            storage, otp_service, phone_number_validator)
        return storage, interactor, otp_service, phone_number_validator

    def test_reset_password_with_otp_phone_number(self, set_up):
        storage, interactor, otp_service = set_up

        reset_password_dto = ResetPasswordWithOTPPhoneNumberDTO(
            phone_number="9866546440",
            country_code="+91",
            otp='12345',
            new_password='iBC@1234'
        )
        user = UserAccount()

        storage.get_user_given_phone_number.return_value = user
        interactor.reset_password_with_otp_phone_number(reset_password_dto)
        storage.update_user_password.assert_called_once_with(
            user_id=user.user_id, new_password=reset_password_dto.new_password)

    @pytest.mark.parametrize('phone_number, country_code',
                             [("", "+91"), ("98665464430", "")])
    def test_reset_password_with_otp_phone_number_invalid_phone_number(
            self, set_up_with_validations, phone_number, country_code):
        storage, interactor, otp_service, phone_number_validator = \
            set_up_with_validations

        reset_password_dto = ResetPasswordWithOTPPhoneNumberDTO(
            phone_number=phone_number,
            country_code=country_code,
            otp='12345',
            new_password='iBC@1234'
        )
        from ib_users.exceptions.invalid_phone_number_exception import \
            InvalidPhoneNumberException
        from ib_users.exceptions.phone_number_validation_exception_messges \
            import UNABLE_TO_PARSE_PHONE_NUMBER
        phone_number_validator.validate.side_effect = \
            InvalidPhoneNumberException(
                UNABLE_TO_PARSE_PHONE_NUMBER.message,
                UNABLE_TO_PARSE_PHONE_NUMBER.code)
        with pytest.raises(InvalidPhoneNumberException):
            interactor.reset_password_with_otp_phone_number(reset_password_dto)
        storage.update_user_password.assert_not_called()

    def test_reset_password_with_otp_phone_number_account_doesnt_exist(self,
                                                                  set_up):
        storage, interactor, otp_service = set_up

        reset_password_dto = ResetPasswordWithOTPPhoneNumberDTO(
            phone_number="9866546440",
            country_code="+91",
            otp='12345',
            new_password='iBC@1234'
        )

        from ib_users.interactors.exceptions.user_credentials_exceptions \
            import \
            AccountWithPhoneNumberDoesntExistException
        storage.get_user_given_phone_number.side_effect = \
            AccountWithPhoneNumberDoesntExistException
        with pytest.raises(AccountWithPhoneNumberDoesntExistException):
            interactor.reset_password_with_otp_phone_number(reset_password_dto)
        storage.update_user_password.assert_not_called()

    def test_reset_password_with_otp_phone_number_account_otp_invalid(self,
                                                                  set_up):
        storage, interactor, otp_service = set_up

        reset_password_dto = ResetPasswordWithOTPPhoneNumberDTO(
            phone_number="9866546440",
            country_code="+91",
            otp='12345',
            new_password='iBC@1234'
        )

        from ib_users.exceptions.otp_verification_exceptions import \
            InvalidOTPException
        otp_service.validate_otp_send_to_phone_number.side_effect = InvalidOTPException('')
        with pytest.raises(InvalidOTPException):
            interactor.reset_password_with_otp_phone_number(reset_password_dto)
        storage.update_user_password.assert_not_called()
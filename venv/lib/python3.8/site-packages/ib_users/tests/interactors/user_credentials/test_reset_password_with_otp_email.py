import pytest
from mock import create_autospec

from ib_users.constants.otp_verification_constants import VerificationType
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.third_party.otp_service import OTPService
from ib_users.interactors.user_credentials.DTOs.user_credentials_dtos import \
    ResetPasswordWithOTPEmailDTO
from ib_users.interactors.user_credentials\
    .reset_password_with_otp_email_interactor import \
    ResetPasswordWithOTPEmailInteractor
from ib_users.models import UserAccount
from ib_users.tests.interactors.user_credentials.constants import \
    TestCaseParameters
from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException


class TestResetPasswordWithOTPEmail:
    @pytest.fixture
    def set_up(self):
        storage = create_autospec(UserAccountsStorage)
        otp_service = create_autospec(OTPService)
        interactor = ResetPasswordWithOTPEmailInteractor(storage, otp_service)
        return storage, interactor, otp_service

    def test_reset_password_with_otp_email(self, set_up):
        storage, interactor, otp_service = set_up

        reset_password_dto = ResetPasswordWithOTPEmailDTO(
            email="praneetha@gmail.com",
            otp='12345',
            new_password='iBC@1234'
        )
        user = UserAccount()

        storage.get_user_given_email.return_value = user
        interactor.reset_password_with_otp_email(reset_password_dto)
        storage.update_user_password.assert_called_once_with(
            user_id=user.user_id, new_password=reset_password_dto.new_password)

    @pytest.mark.parametrize('email', TestCaseParameters.invalid_email_cases)
    def test_reset_password_with_otp_email_invalid_email(self, set_up, email):
        storage, interactor, otp_service = set_up

        reset_password_dto = ResetPasswordWithOTPEmailDTO(
            email=email,
            otp='12345',
            new_password='iBC@1234'
        )
        with pytest.raises(CustomException) as exception:
            interactor.reset_password_with_otp_email(reset_password_dto)
        from ib_users.exceptions.custom_exception_constants import \
            INVALID_EMAIL
        TestsUtils.assert_custom_exception(INVALID_EMAIL, exception)
        storage.update_user_password.assert_not_called()

    def test_reset_password_with_otp_email_account_doesnt_exist(self, set_up):
        storage, interactor, otp_service = set_up

        reset_password_dto = ResetPasswordWithOTPEmailDTO(
            email="praneetha@gmail.com",
            otp='12345',
            new_password='iBC@1234'
        )
        from ib_users.interactors.exceptions.user_credentials_exceptions \
            import \
            AccountWithEmailDoesntExistException
        storage.get_user_given_email.side_effect = \
            AccountWithEmailDoesntExistException
        with pytest.raises(AccountWithEmailDoesntExistException):
            interactor.reset_password_with_otp_email(reset_password_dto)
        storage.update_user_password.assert_not_called()

    def test_reset_password_with_otp_email_account_otp_invalid(self, set_up):
        storage, interactor, otp_service = set_up

        reset_password_dto = ResetPasswordWithOTPEmailDTO(
            email="praneetha@gmail.com",
            otp='12345',
            new_password='iBC@1234'
        )
        from ib_users.exceptions.otp_verification_exceptions import \
            InvalidOTPException
        otp_service.validate_otp_send_to_email.side_effect = \
            InvalidOTPException('')
        with pytest.raises(InvalidOTPException):
            interactor.reset_password_with_otp_email(reset_password_dto)
        storage.update_user_password.assert_not_called()
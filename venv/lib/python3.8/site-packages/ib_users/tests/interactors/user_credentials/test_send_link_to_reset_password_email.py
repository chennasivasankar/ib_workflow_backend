import pytest
from mock import create_autospec

from ib_users.constants.user_credential_constants import \
    UserCredentialConstants
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.storages.user_password_reset_token_storage import \
    UserPasswordResetTokenStorage
from ib_users.interactors.third_party.email_sender import \
    EmailSender
from ib_users.interactors.user_credentials.reset_password_link_generator\
    .reset_password_link_generator import \
    ResetPasswordLinkGenerator
from ib_users.interactors.user_credentials\
    .send_link_to_reset_password_email_interactor import \
    SendLinkToResetPasswordEmailInteractor
from ib_users.interactors.third_party.token_generator \
    import TokenGenerator
from ib_users.models import UserAccount
from ib_users.tests.interactors.user_credentials.constants import \
    TestCaseParameters
from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException


class TestSendLinkToResetPasswordEmail:
    @pytest.fixture
    def set_up(self):
        storage = create_autospec(UserAccountsStorage)
        token_storage = create_autospec(UserPasswordResetTokenStorage)
        token_generator = create_autospec(TokenGenerator)
        email_sender = create_autospec(EmailSender)
        interactor = SendLinkToResetPasswordEmailInteractor(
            storage, token_storage, token_generator, email_sender)
        return storage, token_storage, interactor, token_generator,email_sender

    def test_send_link_to_reset_password_email_is_not_active(self, set_up):
        email = "praneetha@gmail.com"
        token = "1234"
        user = UserAccount()

        storage, token_storage, interactor, token_generator, email_sender = \
            set_up

        token_generator.get_token.return_value = token
        storage.get_user_given_email.return_value = user
        token_storage.is_reset_password_token_active.return_value = False, ""
        interactor.send_link_to_reset_password_email(email=email)
        link = ResetPasswordLinkGenerator.get_reset_password_link(token)

        token_storage.store_reset_password_token.assert_called_once_with(
            user.user_id, token,
            UserCredentialConstants.RESET_PASSWORD_TOKEN_EXPIRY_TIME_SECONDS)
        email_sender.send_reset_password_link.assert_called_once_with(
            email, link)

    def test_send_link_to_reset_password_email_is_active(self, set_up):
        email = "praneetha@gmail.com"
        token = "1234"
        user = UserAccount()

        storage, token_storage, interactor, token_generator, email_sender = \
            set_up
        storage.get_user_given_email.return_value = user
        token_generator.get_token.return_value = token
        token_storage.is_reset_password_token_active.return_value = True, token
        interactor.send_link_to_reset_password_email(email=email)
        link = ResetPasswordLinkGenerator.get_reset_password_link(token)

        token_storage.update_expiry_time.assert_called_once_with(user_id=\
            user.user_id, expiry_time_in_seconds=
            UserCredentialConstants.RESET_PASSWORD_TOKEN_EXPIRY_TIME_SECONDS)
        email_sender.send_reset_password_link.assert_called_once_with(
            email, link)

    @pytest.mark.parametrize('email', TestCaseParameters.invalid_email_cases)
    def test_send_link_to_reset_password_email_invalid_email(
            self, set_up, email):
        storage, token_storage, interactor, token_generator, email_sender = \
            set_up
        from ib_users.exceptions.custom_exception_constants import \
            INVALID_EMAIL
        with pytest.raises(CustomException) as exception:
            interactor.send_link_to_reset_password_email(email=email)
        TestsUtils.assert_custom_exception(INVALID_EMAIL, exception)

        token_storage.store_reset_password_token.assert_not_called()
        email_sender.send_reset_password_link.assert_not_called()

    def test_send_link_to_reset_password_email_account_doesnt_exist(
            self, set_up):
        email = "praneetha@gmail.com"

        storage, token_storage, interactor, token_generator, email_sender = \
            set_up
        from ib_users.interactors.exceptions.user_credentials_exceptions \
            import AccountWithEmailDoesntExistException
        storage.get_user_given_email.side_effect = \
            AccountWithEmailDoesntExistException
        with pytest.raises(AccountWithEmailDoesntExistException):
            interactor.send_link_to_reset_password_email(email=email)

        token_storage.store_reset_password_token.assert_not_called()
        email_sender.send_reset_password_link.assert_not_called()
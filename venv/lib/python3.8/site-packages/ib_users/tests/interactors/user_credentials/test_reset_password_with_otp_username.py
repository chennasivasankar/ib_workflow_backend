import pytest
from mock import create_autospec

from ib_users.interactors.DTOs.common_dtos import PhoneNumberDTO
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.storages.user_accounts_storage import \
    UserEmailAndPhoneNumberDTO
from ib_users.interactors.third_party.otp_service import OTPService
from ib_users.interactors.user_credentials.DTOs.user_credentials_dtos import \
    ResetPasswordWithOTPUsernameDTO
from ib_users.interactors.user_credentials \
    .reset_password_with_otp_username_interactor import \
    ResetPasswordWithOTPUsernameInteractor
from ib_users.tests.interactors.user_credentials.constants import \
    TestCaseParameters
from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException


class TestResetPasswordWithOTPUsername:
    @pytest.fixture
    def set_up(self):
        storage = create_autospec(UserAccountsStorage)
        otp_service = create_autospec(OTPService)
        interactor = ResetPasswordWithOTPUsernameInteractor(storage,
                                                            otp_service)
        return storage, interactor, otp_service

    def test_reset_password_with_otp_username(self, set_up):
        storage, interactor, otp_service = set_up

        reset_password_dto = ResetPasswordWithOTPUsernameDTO(
            username="praneetha",
            otp='12345',
            new_password='iBC@1234'
        )
        phone_number_dto = PhoneNumberDTO(phone_number="9866446440",
                                          country_code="+91")
        user_contact_details = UserEmailAndPhoneNumberDTO(
            user_id="1234", email="pranee@gmail.com",
            phone_number=phone_number_dto)

        storage.get_user_details_to_send_otp_given_username.return_value = \
            user_contact_details
        interactor.reset_password_with_otp_username(reset_password_dto)
        storage.update_user_password.assert_called_once_with(
            user_id=user_contact_details.user_id,
            new_password=reset_password_dto.new_password)

    @pytest.mark.parametrize('username,exception_message',
                             TestCaseParameters.username_and_exception_messages)
    def test_reset_password_with_otp_username_invalid_username(
            self, set_up, username, exception_message):
        storage, interactor, otp_service = set_up

        reset_password_dto = ResetPasswordWithOTPUsernameDTO(
            username=username,
            otp='12345',
            new_password='iBC@1234'
        )
        with pytest.raises(CustomException) as exception:
            interactor.reset_password_with_otp_username(reset_password_dto)
        TestsUtils.assert_custom_exception(exception_message, exception)
        storage.update_user_password.assert_not_called()

    def test_reset_password_with_otp_username_account_doesnt_exist(self,
                                                                   set_up):
        storage, interactor, otp_service = set_up

        reset_password_dto = ResetPasswordWithOTPUsernameDTO(
            username="praneetha",
            otp='12345',
            new_password='iBC@1234'
        )
        from ib_users.interactors.exceptions.user_credentials_exceptions \
            import AccountWithUsernameDoesntExistException
        storage.get_user_details_to_send_otp_given_username.side_effect = \
            AccountWithUsernameDoesntExistException
        with pytest.raises(AccountWithUsernameDoesntExistException):
            interactor.reset_password_with_otp_username(reset_password_dto)
        storage.update_user_password.assert_not_called()

    def test_reset_password_with_otp_username_account_otp_invalid(self,
                                                                  set_up):
        storage, interactor, otp_service = set_up

        reset_password_dto = ResetPasswordWithOTPUsernameDTO(
            username="praneetha",
            otp='12345',
            new_password='iBC@1234'
        )

        phone_number_dto = PhoneNumberDTO(phone_number="9866446440",
                                          country_code="+91")
        user_contact_details = UserEmailAndPhoneNumberDTO(
            user_id="1234", email="pranee@gmail.com",
            phone_number=phone_number_dto)

        storage.get_user_details_to_send_otp_given_username.return_value = \
            user_contact_details

        from ib_users.exceptions.otp_verification_exceptions import \
            InvalidOTPException
        otp_service.validate_otp_send_to_email.side_effect = InvalidOTPException('')
        with pytest.raises(InvalidOTPException):
            interactor.reset_password_with_otp_username(reset_password_dto)
        storage.update_user_password.assert_not_called()

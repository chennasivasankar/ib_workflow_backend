import pytest
from mock import create_autospec

from ib_users.constants.user_credential_constants import \
    UserCredentialConstants
from ib_users.interactors.DTOs.common_dtos import PhoneNumberDTO
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.storages.user_password_reset_token_storage import \
    UserPasswordResetTokenStorage
from ib_users.interactors.third_party.sms_sender import SMSSender
from ib_users.interactors.user_credentials.reset_password_link_generator\
    .reset_password_link_generator import \
    ResetPasswordLinkGenerator
from ib_users.interactors.third_party.token_generator \
    import TokenGenerator
from ib_users.interactors.user_credentials\
    .send_link_to_reset_password_phone_number_interactor import \
    SendLinkToResetPasswordPhoneNumberInteractor
from ib_users.interactors.validators.phone_number_validator import \
    PhoneNumberValidator
from ib_users.models import UserAccount


class TestSendLinkToResetPasswordPhoneNumber:
    @pytest.fixture
    def set_up(self):
        storage = create_autospec(UserAccountsStorage)
        token_storage = create_autospec(UserPasswordResetTokenStorage)
        token_generator = create_autospec(TokenGenerator)
        phone_number_validator = create_autospec(PhoneNumberValidator)
        sms_sender = create_autospec(SMSSender)
        interactor = SendLinkToResetPasswordPhoneNumberInteractor(
            storage, token_storage, token_generator,
            phone_number_validator, sms_sender)
        return storage, token_storage, interactor, token_generator, sms_sender

    @pytest.fixture
    def set_up_with_validator(self):
        storage = create_autospec(UserAccountsStorage)
        token_storage = create_autospec(UserPasswordResetTokenStorage)
        token_generator = create_autospec(TokenGenerator)
        phone_number_validator = create_autospec(PhoneNumberValidator)
        sms_sender = create_autospec(SMSSender)
        interactor = SendLinkToResetPasswordPhoneNumberInteractor(
            storage, token_storage, token_generator,
            phone_number_validator, sms_sender)
        return storage, token_storage, interactor, token_generator, \
               sms_sender, phone_number_validator

    def test_send_link_to_reset_password_phone_number_is_not_active(self,
                                                                  set_up):
        phone_number_dto = PhoneNumberDTO(
            phone_number="9866546440",
            country_code="+91"
        )
        token = "1234"
        user = UserAccount()

        storage, token_storage, interactor, token_generator, sms_sender = \
            set_up

        token_generator.get_token.return_value = token
        storage.get_user_given_phone_number.return_value = user
        token_storage.is_reset_password_token_active.return_value = False, ""
        interactor.send_link_to_reset_password_phone_number(
            phone_number_dto=phone_number_dto)
        link = ResetPasswordLinkGenerator.get_reset_password_link(token)

        token_storage.store_reset_password_token.assert_called_once_with(
            user.user_id, token,
            UserCredentialConstants.RESET_PASSWORD_TOKEN_EXPIRY_TIME_SECONDS)
        sms_sender.send_reset_password_link.assert_called_once_with(
            phone_number_dto, link)

    def test_send_link_to_reset_password_phone_number_is_active(self, set_up):
        phone_number_dto = PhoneNumberDTO(
            phone_number="9866546440",
            country_code="+91"
        )
        token = "1234"
        user = UserAccount()

        storage, token_storage, interactor, token_generator, sms_sender = \
            set_up
        storage.get_user_given_phone_number.return_value = user
        token_generator.get_token.return_value = token
        token_storage.is_reset_password_token_active.return_value = True, token
        interactor.send_link_to_reset_password_phone_number(
            phone_number_dto=phone_number_dto)
        link = ResetPasswordLinkGenerator.get_reset_password_link(token)

        token_storage.update_expiry_time.assert_called_once_with(user_id=\
            user.user_id, expiry_time_in_seconds=
            UserCredentialConstants.RESET_PASSWORD_TOKEN_EXPIRY_TIME_SECONDS)
        sms_sender.send_reset_password_link.assert_called_once_with(
            phone_number_dto=phone_number_dto, link=link)

    @pytest.mark.parametrize('phone_number,country_code',
                             [("", "+91"), ("98665464430", "")])
    def test_send_link_to_reset_password_phone_number_invalid_phone_number(
            self, set_up_with_validator, phone_number, country_code):
        phone_number_dto = PhoneNumberDTO(
            phone_number=phone_number,
            country_code=country_code
        )
        storage, token_storage, interactor, token_generator, sms_sender, \
        phone_number_validator  = set_up_with_validator
        from ib_users.exceptions.invalid_phone_number_exception import \
            InvalidPhoneNumberException
        from ib_users.exceptions.phone_number_validation_exception_messges \
            import \
            UNABLE_TO_PARSE_PHONE_NUMBER
        phone_number_validator.validate.side_effect = \
            InvalidPhoneNumberException(
                UNABLE_TO_PARSE_PHONE_NUMBER.message,
                UNABLE_TO_PARSE_PHONE_NUMBER.code)
        with pytest.raises(InvalidPhoneNumberException):
            interactor.send_link_to_reset_password_phone_number(
                phone_number_dto=phone_number_dto)

        token_storage.store_reset_password_token.assert_not_called()
        sms_sender.send_reset_password_link.assert_not_called()

    def test_send_link_to_reset_password_phone_number_account_doesnt_exist(
            self, set_up):
        phone_number_dto = PhoneNumberDTO(
            phone_number="9866546440",
            country_code="+91"
        )

        storage, token_storage, interactor, token_generator, sms_sender = \
            set_up
        from ib_users.interactors.exceptions.user_credentials_exceptions \
            import AccountWithPhoneNumberDoesntExistException
        storage.get_user_given_phone_number.side_effect = \
            AccountWithPhoneNumberDoesntExistException
        with pytest.raises(AccountWithPhoneNumberDoesntExistException):
            interactor.send_link_to_reset_password_phone_number(
                phone_number_dto=phone_number_dto)

        token_storage.store_reset_password_token.assert_not_called()
        sms_sender.send_reset_password_link.assert_not_called()
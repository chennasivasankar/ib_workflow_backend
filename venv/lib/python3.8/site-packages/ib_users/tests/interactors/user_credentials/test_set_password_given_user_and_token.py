import pytest
from mock import create_autospec

from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.storages.user_password_reset_token_storage import \
    UserPasswordResetTokenStorage
from ib_users.interactors.user_credentials\
    .set_password_given_user_token_interactor import \
    SetPasswordGivenUserTokenInteractor
from ib_users.tests.interactors.user_credentials.constants import \
    TestCaseParameters
from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException


class TestSetPasswordGivenUserAndToken:
    @pytest.fixture
    def set_up(self):
        accounts_storage = create_autospec(UserAccountsStorage)
        token_storage = create_autospec(UserPasswordResetTokenStorage)
        interactor = SetPasswordGivenUserTokenInteractor(
            token_storage=token_storage, accounts_storage=accounts_storage)
        return accounts_storage, token_storage, interactor

    def test_set_password_given_user_and_token(self, set_up):
        user_id = "1234"
        token = "abc"
        new_password = "iBC@1234"
        accounts_storage, token_storage, interactor = set_up
        interactor.set_password_given_user_and_token(
            user_id=user_id, token=token, new_password=new_password)
        accounts_storage.update_user_password.assert_called_once_with(
            user_id=user_id, new_password=new_password)

    @pytest.mark.parametrize("password,exception_message",
                             TestCaseParameters.password_and_exception_messages)
    def test_set_password_given_user_and_token_invalid_password(
            self, set_up, password, exception_message):
        user_id = "1234"
        token = "abc"
        accounts_storage, token_storage, interactor = set_up
        with pytest.raises(CustomException) as exception:
            interactor.set_password_given_user_and_token(
                user_id=user_id, token=token, new_password=password)
        TestsUtils.assert_custom_exception(exception_message, exception)
        accounts_storage.update_user_password.assert_not_called()

    def test_set_password_given_user_and_token_token_mismatch(self, set_up):
        user_id = "1234"
        token = "abc"
        new_password = "iBC@1234"
        accounts_storage, token_storage, interactor = set_up
        from ib_users.interactors.exceptions.user_credentials_exceptions \
            import InvalidTokenException
        token_storage.verify_token.side_effect = InvalidTokenException
        with pytest.raises(InvalidTokenException):
            interactor.set_password_given_user_and_token(
                user_id=user_id, token=token, new_password=new_password)
        accounts_storage.update_user_password.assert_not_called()

    def test_set_password_given_user_and_token_token_expired(self, set_up):
        user_id = "1234"
        token = "abc"
        new_password = "iBC@1234"
        accounts_storage, token_storage, interactor = set_up
        from ib_users.interactors.exceptions.user_credentials_exceptions \
            import TokenExpiredException
        token_storage.verify_token.side_effect = TokenExpiredException
        with pytest.raises(TokenExpiredException):
            interactor.set_password_given_user_and_token(
                user_id=user_id, token=token, new_password=new_password)
        accounts_storage.update_user_password.assert_not_called()


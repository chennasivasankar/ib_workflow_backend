import pytest
from mock import create_autospec

from ib_users.constants.otp_constants import OTPMessageFormatConstants
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.third_party.otp_service import OTPService
from ib_users.interactors.user_credentials.send_otp_email_interactor import \
    SendOTPEmailInteractor
from ib_users.models import UserAccount
from ib_users.tests.interactors.user_credentials.constants import \
    TestCaseParameters
from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException


class TestSendOTPEmail:
    @pytest.fixture
    def set_up(self):
        storage = create_autospec(UserAccountsStorage)
        otp_service = create_autospec(OTPService)
        interactor = SendOTPEmailInteractor(storage, otp_service)
        return storage, interactor, otp_service

    def test_send_otp_email(self, set_up):
        email = "praneetha@gmail.com"
        user = UserAccount()

        storage, interactor, otp_service = set_up
        storage.get_user_given_email.return_value = user
        interactor.send_otp_to_email(email)
        otp_service.send_otp_to_user_email.assert_called_once_with(
            email,
            OTPMessageFormatConstants.FORMAT_TO_RESET_PASSWORD,
            OTPMessageFormatConstants.OTP_SUBJECT_TO_RESET_PASSWORD)

    @pytest.mark.parametrize('email', TestCaseParameters.invalid_email_cases)
    def test_send_otp_email_invalid_email(self, set_up, email):
        storage, interactor, otp_service = set_up
        from ib_users.exceptions.custom_exception_constants import \
            INVALID_EMAIL
        with pytest.raises(CustomException) as exception:
            interactor.send_otp_to_email(email)
        TestsUtils.assert_custom_exception(INVALID_EMAIL, exception)
        otp_service.send_otp_to_user_email.assert_not_called()

    def test_send_otp_email_account_doesnt_exist(self, set_up):
        email = "praneetha@gmail.com"

        storage, interactor, otp_service = set_up
        from ib_users.interactors.exceptions.user_credentials_exceptions \
            import AccountWithEmailDoesntExistException
        storage.get_user_given_email.side_effect = \
            AccountWithEmailDoesntExistException
        with pytest.raises(AccountWithEmailDoesntExistException):
            interactor.send_otp_to_email(email)
        otp_service.send_otp_to_user_email.assert_not_called()
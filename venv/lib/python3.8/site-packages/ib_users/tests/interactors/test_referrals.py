from uuid import UUID

import pytest

from ib_users.exceptions.custom_exception_constants import ExceptionMessages
from ib_users.exceptions.referral_exceptions import \
    MaximumReferralsReached, \
    InvalidReferralCode, ReferralDetailsDoesNotExist, \
    ReferrerDetailsDoesNotExist, ReferrerAlreadyExists
from ib_users.interactors.presenters.referrals_presenter import \
    ReferralsPresenter
from ib_users.interactors.referrals_interactor import ReferralsInteractor
from ib_users.interactors.storages.referrals_storage import ReferralsStorage, \
    ReferralDTO, ReferralDetailsDTO
from mock import create_autospec


def test_get_user_id_and_referral_limit():
    referral_code = ""
    referralDTO = ReferralDTO(
        user_id="",
        referral_limit=""
    )

    storage_mock = create_autospec(ReferralsStorage)
    presenter_mock = create_autospec(ReferralsPresenter)

    storage_mock.get_referral_details.return_value \
        = referralDTO

    referrals_interactor = ReferralsInteractor(storage=storage_mock,
                                               presenter=presenter_mock)
    storage_mock.is_referral_code_linked_to_user.return_value = True

    referrals_interactor.get_user_id_and_referral_limit(
        referral_code=referral_code
    )

    referralDTO = storage_mock.get_referral_details(
        referral_code=referral_code
    )

    presenter_mock.get_user_id_and_referral_limit(referralDTO)


def test_get_user_id_and_referral_limit_with_wrong_referral_code():
    referral_code = ""

    storage_mock = create_autospec(ReferralsStorage)
    presenter_mock = create_autospec(ReferralsPresenter)

    presenter_mock = create_autospec(ReferralsPresenter)
    referrals_interactor = ReferralsInteractor(storage=storage_mock,
                                               presenter=presenter_mock)
    storage_mock.is_referral_code_linked_to_user.return_value = False

    with pytest.raises(InvalidReferralCode) as e:
        referrals_interactor.get_user_id_and_referral_limit(
            referral_code=referral_code
        )

    assert ExceptionMessages.INVALID_REFFERAL_CODE in str(e.value)


def test_get_referrer_user_id():
    user_id = ""

    storage_mock = create_autospec(ReferralsStorage)
    presenter_mock = create_autospec(ReferralsPresenter)

    presenter_mock = create_autospec(ReferralsPresenter)
    referrals_interactor = ReferralsInteractor(storage=storage_mock,
                                               presenter=presenter_mock)

    referrals_interactor.get_referrer_user_id(user_id=user_id)

    storage_mock.get_referrer_id.assert_called_once_with(
        user_id=user_id
    )


def test_get_referrer_user_id_not_linked():
    user_id = ""

    storage_mock = create_autospec(ReferralsStorage)
    presenter_mock = create_autospec(ReferralsPresenter)

    storage_mock.get_referrer_id.side_effect = \
        ReferrerDetailsDoesNotExist(
            message=ExceptionMessages.REFERRER_DETAILS_DOES_NOT_EXIST)
    presenter_mock = create_autospec(ReferralsPresenter)
    referrals_interactor = ReferralsInteractor(storage=storage_mock,
                                               presenter=presenter_mock)

    with pytest.raises(ReferrerDetailsDoesNotExist) as e:
        referrals_interactor.get_referrer_user_id(
            user_id=user_id
        )

    assert ExceptionMessages.REFERRER_DETAILS_DOES_NOT_EXIST in str(e.value)


def test_get_referral_code():
    user_id = ""
    storage_mock = create_autospec(ReferralsStorage)
    presenter_mock = create_autospec(ReferralsPresenter)
    referrals_interactor = ReferralsInteractor(storage=storage_mock,
                                               presenter=presenter_mock)

    referrals_interactor.get_or_create_referral_code(
        user_id=user_id
    )

    storage_mock.get_referral_code.assert_called_once_with(
        user_id=user_id)


def test_get_referral_code_when_referral_code_not_exists():
    user_id = ""
    storage_mock = create_autospec(ReferralsStorage)
    presenter_mock = create_autospec(ReferralsPresenter)

    storage_mock.get_referral_code.side_effect = ReferralDetailsDoesNotExist(
        message=ExceptionMessages.REFERRAL_DETAILS_DOES_NOT_EXIST)
    referrals_interactor = ReferralsInteractor(storage=storage_mock,
                                               presenter=presenter_mock)

    referrals_interactor.get_or_create_referral_code(
        user_id=user_id
    )

    storage_mock.get_referral_code.assert_called_once_with(
        user_id=user_id)

    storage_mock.create_referral_details.assert_called_once()


# TODO:This should be checked in storage test cases

# def test_get_referral_code_is_equal_always_when_called_with_same_user_id():
#     user_id = ""
#     storage_mock = create_autospec(ReferralsStorage)
#     referrals_interactor = ReferralsInteractor(storage_mock)
#
#     initial_referral_code = \
#         referrals_interactor.get_or_create_referral_code(
#             user_id=user_id
#         )
#
#     referral_code = referrals_interactor.get_or_create_referral_code(
#         user_id=user_id
#     )
#
#     assert initial_referral_code == referral_code

def test_get_new_referral_codes():
    storage_mock = create_autospec(ReferralsStorage)
    presenter_mock = create_autospec(ReferralsPresenter)
    referrals_interactor = ReferralsInteractor(storage=storage_mock,
                                               presenter=presenter_mock)
    referral_code = 'DLKJSL'
    storage_mock.get_user_by_referral_code.side_effect = ReferralDetailsDoesNotExist(
        message="Referral Details does not exist")
    from ib_users.constants.referral_constants import REFERRAL_LIMIT
    storage_mock.create_new_referral_codes.return_value = [
        ReferralDetailsDTO(
            referral_code=referral_code,
            referral_limit=REFERRAL_LIMIT
        )
    ]
    presenter_mock.get_referral_details.return_value = [
        {
            "referral_code": referral_code,
            "referral_limit": REFERRAL_LIMIT
        }
    ]
    no_of_referral_codes = 1
    referral_details = referrals_interactor.get_new_referral_codes(
        no_of_referral_codes=no_of_referral_codes)
    storage_mock.create_new_referral_codes.assert_called_once()
    presenter_mock.get_referral_details. \
        assert_called_once()
    assert len(referral_details) == no_of_referral_codes


def test_link_user_with_referrer_with_correct_referral_code():
    referral_referral_code = ""
    user_id = ""
    storage_mock = create_autospec(ReferralsStorage)
    presenter_mock = create_autospec(ReferralsPresenter)
    referrals_interactor = ReferralsInteractor(storage=storage_mock,
                                               presenter=presenter_mock)
    storage_mock.is_referral_limit_reached.return_value = False
    storage_mock.is_referrer_exists.return_value = False

    referrals_interactor.link_user_with_referrer(
        user_id=user_id, referral_code=referral_referral_code)

    storage_mock.link_user_with_referrer.assert_called_once_with(
        user_id=user_id, referral_code=referral_referral_code
    )


def test_link_user_with_referrer_with_referral_limit_reached():
    referral_referral_code = ""
    user_id = ""
    storage_mock = create_autospec(ReferralsStorage)
    presenter_mock = create_autospec(ReferralsPresenter)
    referrals_interactor = ReferralsInteractor(storage=storage_mock,
                                               presenter=presenter_mock)

    storage_mock.is_referral_limit_reached.return_value = True
    storage_mock.is_referrer_exists.return_value = False

    with pytest.raises(MaximumReferralsReached) as e:
        referrals_interactor.link_user_with_referrer(
            user_id=user_id, referral_code=referral_referral_code)

    assert ExceptionMessages.MAXIMUM_REFERRAL_LIMIT_REACHED in str(e.value)


def test_link_user_with_referrer_when_both_referral_codes_are_same():
    user_referral_code = "referral_code"
    referral_referral_code = "referral_code"
    user_id = ""
    storage_mock = create_autospec(ReferralsStorage)
    presenter_mock = create_autospec(ReferralsPresenter)
    referrals_interactor = ReferralsInteractor(storage=storage_mock,
                                               presenter=presenter_mock)

    storage_mock.is_referral_limit_reached.return_value = False
    storage_mock.get_referral_code.return_value = \
        user_referral_code
    storage_mock.is_referrer_exists.return_value = False

    with pytest.raises(InvalidReferralCode) as e:
        referrals_interactor.link_user_with_referrer(
            user_id=user_id, referral_code=referral_referral_code)

    assert ExceptionMessages.CANT_LINK_TO_OWN_REFERRAL_CODE in str(e.value)


def test_link_user_with_referrer_when_referral_code_is_not_linked():
    referral_referral_code = "referral_code"
    user_id = ""
    storage_mock = create_autospec(ReferralsStorage)
    presenter_mock = create_autospec(ReferralsPresenter)
    referrals_interactor = ReferralsInteractor(storage=storage_mock,
                                               presenter=presenter_mock)

    storage_mock.is_referral_limit_reached.return_value = False
    storage_mock.is_referral_code_linked_to_user.return_value = \
        False
    storage_mock.is_referrer_exists.return_value = False

    referrals_interactor.link_user_with_referrer(
        user_id=user_id, referral_code=referral_referral_code)

    storage_mock.link_user_with_referrer.assert_called_once_with(
        user_id=user_id, referral_code=referral_referral_code
    )


def test_link_user_with_referrer_when_referrer_already_exists_for_user():
    referral_referral_code = "referral_code"
    user_id = UUID(int=1)
    storage_mock = create_autospec(ReferralsStorage)
    presenter_mock = create_autospec(ReferralsPresenter)
    referrals_interactor = ReferralsInteractor(storage=storage_mock,
                                               presenter=presenter_mock)

    storage_mock.is_referrer_exists.return_value = True
    storage_mock.is_referral_limit_reached.return_value = False

    with pytest.raises(ReferrerAlreadyExists) as exception:
        referrals_interactor. \
            link_user_with_referrer(user_id=str(user_id),
                                    referral_code=referral_referral_code)

    assert ExceptionMessages.USER_ALREADY_LINKED_WITH_ANOTHER_REFERRER in str(
        exception.value)

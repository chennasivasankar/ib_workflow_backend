import uuid

import pytest
from mock import create_autospec

from ib_users.exceptions.custom_exception_constants import \
    USER_NOT_MAPPED_TO_DEVICE
from ib_users.interactors.storages.user_login_device_details_storage import \
    UserDeviceIdAndAccessTokenDTO, UserLoginDeviceDetailsStorage
from ib_users.interactors.third_party.user_tokens_generator import \
    UserAuthTokensGenerator
from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException


class TestsLogoutInDevices:
    def test_logout_in_all_devices_for_mapped_user(self):
        from ib_users.interactors import LogoutInDevicesImpl

        login_token_service_mock = create_autospec(UserAuthTokensGenerator)
        storage_mock = create_autospec(UserLoginDeviceDetailsStorage)
        device_ids_and_access_tokens = [UserDeviceIdAndAccessTokenDTO("device_1", "access_token"),
                         UserDeviceIdAndAccessTokenDTO("device_1", "access_token_1"),
                         UserDeviceIdAndAccessTokenDTO("device_1", "access_token_2")]
        storage_mock.get_all_devices_login_details_of_given_user.return_value = device_ids_and_access_tokens
        logout_from_all_devices = LogoutInDevicesImpl(storage=storage_mock,
                                                      login_token_generator=login_token_service_mock)
        user_id = str(uuid.uuid4())
        logout_from_all_devices.logout_in_all_devices(user_id=user_id)

        storage_mock.get_all_devices_login_details_of_given_user.assert_called_once_with(user_id)

        access_tokens = [item.access_token for item in device_ids_and_access_tokens]
        login_token_service_mock.\
            expire_all_auth_tokens_related_to_given_list_of_access_tokens.\
            assert_called_once_with(access_tokens)
        storage_mock.\
            remove_all_device_login_details_of_given_user.assert_called_once()

    def test_logout_in_all_devices_for_non_mapped_user(self):
        from ib_users.interactors import LogoutInDevicesImpl

        login_token_service_impl = create_autospec(UserAuthTokensGenerator)
        storage_mock = create_autospec(UserLoginDeviceDetailsStorage)
        storage_mock.get_all_devices_login_details_of_given_user.side_effect = \
            CustomException.from_exception_message_DTO(
                USER_NOT_MAPPED_TO_DEVICE)
        logout_from_all_devices = LogoutInDevicesImpl(
            storage=storage_mock, login_token_generator=login_token_service_impl)
        user_id = str(uuid.uuid4())
        with pytest.raises(CustomException) as not_mapped_user:
            logout_from_all_devices.logout_in_all_devices(user_id=user_id)

        TestsUtils.assert_custom_exception(USER_NOT_MAPPED_TO_DEVICE,
                                           not_mapped_user)

        storage_mock.get_all_devices_login_details_of_given_user.\
            assert_called_once_with(user_id)

        storage_mock.remove_given_user_and_device_mapping.assert_not_called()

    def test_logout_in_devices_for_mapped_user_except_given_access_tokens(self):
        from ib_users.interactors import LogoutInDevicesImpl

        login_token_service_mock = create_autospec(UserAuthTokensGenerator)
        storage_mock = create_autospec(UserLoginDeviceDetailsStorage)
        device_ids_and_access_tokens = [
            UserDeviceIdAndAccessTokenDTO("device_1", "access_token"),
            UserDeviceIdAndAccessTokenDTO("device_1", "access_token_1"),
            UserDeviceIdAndAccessTokenDTO("device_1", "access_token_2")]
        exceptional_access_tokens = [device_ids_and_access_tokens[0].access_token, device_ids_and_access_tokens[1].access_token]

        storage_mock.get_all_devices_login_details_of_given_user.return_value = device_ids_and_access_tokens
        logout_from_all_devices = LogoutInDevicesImpl(storage=storage_mock,
                                                      login_token_generator=login_token_service_mock)
        user_id = str(uuid.uuid4())
        logout_from_all_devices.logout_in_devices_except_of_given_access_tokens(
            user_id=user_id, access_tokens=exceptional_access_tokens )

        storage_mock.get_all_devices_login_details_of_given_user.assert_called_once_with(
            user_id)

        access_tokens_to_remove = [item.access_token for item in
                         device_ids_and_access_tokens
                         if item.access_token not in exceptional_access_tokens]

        login_token_service_mock. \
            expire_all_auth_tokens_related_to_given_list_of_access_tokens. \
            assert_called_once_with(access_tokens_to_remove)
        storage_mock. \
            remove_device_login_details_of_user_except_of_given_access_tokens\
            .assert_called_once_with(user_id=user_id, access_tokens=access_tokens_to_remove)





import uuid

import pytest
from mock import create_autospec

from ib_users.exceptions.custom_exception_constants import \
    USER_NOT_MAPPED_TO_DEVICE, DEVICE_ID_CANNOT_BE_EMPTY, \
    DEVICE_ID_DOES_NOT_EXIST
from ib_users.interactors import LogoutFromADevice
from ib_users.interactors.storages.user_login_device_details_storage import \
    UserDeviceLoginDTO, UserLoginDeviceDetailsStorage
from ib_users.interactors.third_party.user_tokens_generator import \
    UserAuthTokensGenerator
from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException


class TestsLogoutFromADevice:

    def test_logout_with_valid_device_id_and_not_mapped_user(self):
        self._init_interactor_with_given_exception_for_storage_mock(USER_NOT_MAPPED_TO_DEVICE)

        user_logout_dto = UserDeviceLoginDTO(str(uuid.uuid4()),
                                                  "device_id",
                                                  "access_token")
        with pytest.raises(CustomException) as not_mapped_user:
            self.logout_from_a_device.logout(user_logout_dto)

        TestsUtils.assert_custom_exception(USER_NOT_MAPPED_TO_DEVICE, not_mapped_user)
        self.storage_mock.check_if_given_login_device_details_mapping_exists.\
            assert_called_once_with(user_logout_dto)

        self.storage_mock.remove_given_user_and_device_mapping. \
            assert_not_called()

    def test_logout_with_empty_device_id(self):
        self._init_interactor()

        user_logout_dto = UserDeviceLoginDTO(str(uuid.uuid4()),
                                                  "",
                                                  "access_token")
        with pytest.raises(CustomException) as device_id_does_not_exist:
            self.logout_from_a_device.logout(user_logout_dto)

        TestsUtils.assert_custom_exception(DEVICE_ID_CANNOT_BE_EMPTY, device_id_does_not_exist)

        self.storage_mock.remove_given_user_and_device_mapping. \
            assert_not_called()


    def test_logout_with_non_existing_device_id(self):
        self._init_interactor_with_given_exception_for_storage_mock(DEVICE_ID_DOES_NOT_EXIST)
        user_logout_dto = UserDeviceLoginDTO(str(uuid.uuid4()),
                                                  "device_id",
                                                  "access_token")
        with pytest.raises(
                CustomException) as device_id_does_not_exist:
            self.logout_from_a_device.logout(user_logout_dto)

        TestsUtils.assert_custom_exception(DEVICE_ID_DOES_NOT_EXIST,
                                           device_id_does_not_exist)
        self.storage_mock.check_if_given_login_device_details_mapping_exists. \
            assert_called_once_with(user_logout_dto)

        self.storage_mock.remove_given_user_and_device_mapping. \
            assert_not_called()

    def test_logout_with_valid_device_id_and_mapped_user(self):
        access_token = "access_token"
        self._init_interactor_with_return_value(access_token)

        user_logout_dto = UserDeviceLoginDTO(str(uuid.uuid4()),
                                                  "device_id",
                                                  "access_token")
        self.logout_from_a_device.logout(user_logout_dto)

        self.storage_mock.check_if_given_login_device_details_mapping_exists. \
            assert_called_once_with(user_logout_dto)

        self.user_auth_tokens_generator.expire_all_auth_tokens_related_to_given_access_token.\
            assert_called_once_with(access_token)

        self.storage_mock.remove_given_user_and_device_mapping.\
            assert_called_once_with(user_logout_dto)

    def _init_interactor(self):
        self.storage_mock = create_autospec(UserLoginDeviceDetailsStorage)
        self.user_auth_tokens_generator = create_autospec(
            UserAuthTokensGenerator)
        self.logout_from_a_device = LogoutFromADevice(self.storage_mock,
                                                      self.user_auth_tokens_generator)

    def _init_interactor_with_given_exception_for_storage_mock(self,exception_message_for_storage_mock):
        self.storage_mock = create_autospec(UserLoginDeviceDetailsStorage)
        self.storage_mock.check_if_given_login_device_details_mapping_exists.side_effect = \
            CustomException.from_exception_message_DTO(
                exception_message_for_storage_mock)
        self.user_auth_tokens_generator = create_autospec(UserAuthTokensGenerator)
        self.logout_from_a_device = LogoutFromADevice(self.storage_mock,
                                                 self.user_auth_tokens_generator)

    def _init_interactor_with_return_value(self,access_token):
        self.storage_mock = create_autospec(UserLoginDeviceDetailsStorage)
        self.storage_mock.check_if_given_login_device_details_mapping_exists.return_value\
            = access_token
        self.user_auth_tokens_generator = create_autospec(UserAuthTokensGenerator)
        self.logout_from_a_device = LogoutFromADevice(self.storage_mock,
                                                      self.user_auth_tokens_generator)










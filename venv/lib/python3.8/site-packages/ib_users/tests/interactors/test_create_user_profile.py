import pytest
from mock import create_autospec

from ib_users.constants.user_profile.enums import Gender, Language
from ib_users.exceptions.registration_exceptions import AccountWithThisEmailAlreadyExistsException
from ib_users.interactors.exceptions.user_profile import EmailAlreadyLinkedException
from ib_users.interactors.user_profile_interactor import UserProfileDTO, \
    CreateUserProfileDTO

user_profile_fixture = {
        "name": "iB User",
        "gender": Gender.MALE.value,
        "dob": "1994-07-01",
        "profile_pic_url": "",
        "phone_number": "9876543210",
        "country_code": "91",
        "email": "first@last.com",
        "language_preference": Language.ENGLISH.value
    }


def get_user_profile_fixture_dto(**kwargs):
    return UserProfileDTO(**{**user_profile_fixture, **kwargs})


class TestCreateUserProfile:
    @pytest.fixture
    def setup(self):
        from ib_users.interactors.storages.user_profile_storage import \
            UserProfileStorage
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountDTO

        storage_mock = create_autospec(UserProfileStorage)
        storage_mock.does_user_exists.return_value = False

        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountsStorage

        accounts_storage_mock = create_autospec(UserAccountsStorage)
        accounts_storage_mock.get_user_account_details.return_value = \
            UserAccountDTO(username="ib_user", phone_number="9876543210",
                           country_code="91", email="first@last.com",
                           user_id="1")

        return storage_mock,  accounts_storage_mock

    @pytest.mark.parametrize('create_profile_data', [
        get_user_profile_fixture_dto(name="iB User")])
    def test_create_profile(
            self, setup, create_profile_data: CreateUserProfileDTO):

        storage_mock,  accounts_storage_mock = setup

        user_id = "1"

        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        user_profile_interactor = UserProfileInteractor(
            storage=storage_mock, presenter=None)
        accounts_storage_mock.get_existing_user_id_given_email.return_value = user_id

        user_profile_interactor. \
            create_user_profile(user_id=user_id,
                                create_profile_data=create_profile_data,
                                accounts_storage=accounts_storage_mock)

        accounts_storage_mock.get_user_account_details.assert_called_once_with(user_id)
        storage_mock.create_user_profile.assert_called_once_with(
            create_profile_data, user_id)

    @pytest.mark.parametrize('create_profile_data', [
        get_user_profile_fixture_dto(name="iB User")])
    def test_create_profile_raises_email_already_used_exception(
            self, setup, create_profile_data: CreateUserProfileDTO):
        storage_mock, accounts_storage_mock = setup

        user_id = "1"

        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        user_profile_interactor = UserProfileInteractor(
            storage=storage_mock, presenter=None)
        create_profile_data = CreateUserProfileDTO(
            name='Name1',
            email='first@last.com',
            phone_number='9876543210',
            country_code='91'
        )

        accounts_storage_mock.get_existing_user_id_given_email.return_value = '2'

        with pytest.raises(EmailAlreadyLinkedException):
            user_profile_interactor. \
                create_user_profile(user_id=user_id,
                                    create_profile_data=create_profile_data,
                                    accounts_storage=accounts_storage_mock)

        accounts_storage_mock.get_user_account_details.assert_called_once_with(user_id)
        accounts_storage_mock.get_existing_user_id_given_email.assert_called_once_with(
            'first@last.com')

from mock import create_autospec
import pytest
from ib_users.constants.user_profile.enums import Gender, Language
from ib_users.interactors.exceptions.user_credentials_exceptions import AccountWithEmailDoesntExistException

from ib_users.interactors.user_profile_interactor import UserProfileDTO, \
    GetUserProfileDTO

from ib_users.exceptions.registration_exceptions import AccountWithThisEmailAlreadyExistsException, \
    AccountWithThisPhoneNumberAlreadyExistsException

user_profile_fixture = {
    "user_id": "1",
    "name": "iB User2",
    "gender": Gender.MALE.value,
    "dob": "1994-07-01",
    "profile_pic_url": "",
    "phone_number": "9876543210",
    "country_code": "91",
    "email": "first@last.com",
    "language_preference": Language.ENGLISH.value
}

update_profile_data_fixture = {
    "name": "iB User2",
    "gender": None,
    "dob": None,
    "profile_pic_url": None,
    "phone_number": None,
    "country_code": None,
    "email": None,
    "language_preference": None
}


def get_user_profile_fixture_dto(**kwargs):
    return GetUserProfileDTO(**{**user_profile_fixture, **kwargs})


def get_update_profile_data_fixture_dto(**kwargs):
    return UserProfileDTO(**{**update_profile_data_fixture, **kwargs})


class TestUpdateUserProfile:

    @pytest.fixture
    def setup(self):
        from ib_users.interactors.storages.user_profile_storage import \
            UserProfileStorage
        storage_mock = create_autospec(UserProfileStorage)
        from ib_users.interactors.presenters.user_profile_presenter import \
            UserProfilePresenter
        presenter_mock = create_autospec(UserProfilePresenter)
        from ib_users.interactors.storages.user_accounts_storage import \
            UserAccountsStorage
        accounts_storage_mock = create_autospec(UserAccountsStorage)
        return storage_mock, presenter_mock, accounts_storage_mock

    @pytest.mark.parametrize('user_profile,update_profile_data', [
        (get_user_profile_fixture_dto(name="iB User3"),
         get_update_profile_data_fixture_dto(name='iB User3')),
        (get_user_profile_fixture_dto(gender=Gender.FEMALE.value),
         get_update_profile_data_fixture_dto(gender=Gender.FEMALE.value)),
        (get_user_profile_fixture_dto(dob="1994-07-02"),
         get_update_profile_data_fixture_dto(dob="1994-07-02")),
        (get_user_profile_fixture_dto(dob="1994-07-02"),
         get_update_profile_data_fixture_dto(dob="1994-07-02")),
        (get_user_profile_fixture_dto(
            profile_pic_url="https://dummy.com/dummy.ping"),
         get_update_profile_data_fixture_dto(
             profile_pic_url="https://dummy.com/dummy.ping")),
        (get_user_profile_fixture_dto(
            email="last@first.com"),
         get_update_profile_data_fixture_dto(
             email="last@first.com")),
        (get_user_profile_fixture_dto(
            language_preference=Language.TELUGU.value),
         get_update_profile_data_fixture_dto(
             language_preference=Language.TELUGU.value)),
        (get_user_profile_fixture_dto(
            phone_number="8876543210", country_code="91"),
         get_update_profile_data_fixture_dto(
             phone_number="8876543210", country_code="91")),

    ])
    def test_update_profile_when_some_values_are_not_null_updates_only_those(
            self,
            setup,
            user_profile: GetUserProfileDTO,
            update_profile_data: UserProfileDTO):
        user_id = user_profile.user_id

        storage_mock, presenter_mock, accounts_storage_mock = setup
        storage_mock.get_user_profile.return_value = user_profile

        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        user_profile_interactor = UserProfileInteractor(
            storage=storage_mock, presenter=presenter_mock)
        accounts_storage_mock.get_existing_user_id_given_email.side_effect = \
            AccountWithEmailDoesntExistException()

        user_profile_interactor. \
            update_user_profile(user_id=user_id,
                                update_profile_data=update_profile_data,
                                accounts_storage=accounts_storage_mock)

        storage_mock.update_user_profile. \
            assert_called_once_with(user_id=user_id,
                                    update_profile_data=update_profile_data)
        presenter_mock.update_user_profile.assert_called_once_with(
            user_profile)

    @pytest.mark.parametrize('user_profile,update_profile_data', [
        (get_user_profile_fixture_dto(
            phone_number="8876543210", country_code="91"),
         get_update_profile_data_fixture_dto(
             phone_number="8876543210", country_code=None)),
        (get_user_profile_fixture_dto(
            phone_number="8876543210", country_code="91"),
         get_update_profile_data_fixture_dto(
             phone_number=None, country_code="91"))

    ])
    def test_update_profile_invalid_phone_number_or_country_code_throws_exception(
            self,
            setup,
            user_profile: GetUserProfileDTO,
            update_profile_data: UserProfileDTO):
        user_id = user_profile.user_id

        from ib_users.interactors.exceptions.user_profile import \
            PhoneNumberOrCountryCodeInvalidException
        from ib_users.constants.user_profile.error_messages import \
            BOTH_PHONE_NUMBER_AND_COUNTRY_CODE_CAN_BE_EITHER_NULL_OR_NOT_NULL
        invalid_country_code_phone_number_exception = \
            PhoneNumberOrCountryCodeInvalidException(
                message=BOTH_PHONE_NUMBER_AND_COUNTRY_CODE_CAN_BE_EITHER_NULL_OR_NOT_NULL,
                exception_type="BOTH_PHONE_NUMBER_AND_COUNTRY_CODE_CAN_BE_EITHER_NULL_OR_NOT_NULL")

        storage_mock, presenter_mock, accounts_storage_mock = setup

        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        user_profile_interactor = UserProfileInteractor(
            storage=storage_mock, presenter=presenter_mock)

        with pytest.raises(PhoneNumberOrCountryCodeInvalidException) as \
                exception:
            user_profile_interactor.update_user_profile(
                user_id=user_id,
                update_profile_data=update_profile_data,
                accounts_storage=accounts_storage_mock)
            storage_mock.update_user_profile. \
                assert_called_once_with(user_id, update_profile_data)
            presenter_mock.update_user_profile.assert_not_called()
            assert exception.args == invalid_country_code_phone_number_exception. \
                args

    @pytest.mark.parametrize('user_profile,update_profile_data', [
        (get_user_profile_fixture_dto(
            gender="MALE"),
         get_update_profile_data_fixture_dto(
             gender="M")),
        (get_user_profile_fixture_dto(
            gender="MALE"),
         get_update_profile_data_fixture_dto(
             gender="")),
    ])
    def test_update_profile_invalid_gender_throws_exception(
            self,
            setup,
            user_profile: GetUserProfileDTO,
            update_profile_data: UserProfileDTO):
        user_id = user_profile.user_id

        from ib_users.exceptions.invalid_gender_exception import \
            InvalidGenderException

        from ib_users.constants.custom_exception_messages import \
            INVALID_GENDER
        invalid_gender_exception = \
            InvalidGenderException(
                INVALID_GENDER.message, exception_type=INVALID_GENDER.code)

        storage_mock, presenter_mock, accounts_storage_mock = setup

        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        user_profile_interactor = UserProfileInteractor(
            storage=storage_mock, presenter=presenter_mock)

        with pytest.raises(InvalidGenderException) as \
                exception:
            user_profile_interactor.update_user_profile(
                user_id=user_id,
                update_profile_data=update_profile_data,
                accounts_storage=accounts_storage_mock)
            storage_mock.update_user_profile. \
                assert_called_once_with(user_id, update_profile_data)
            presenter_mock.update_user_profile.assert_not_called()
            assert exception.args == invalid_gender_exception. \
                args

    @pytest.mark.parametrize('user_profile,update_profile_data', [
        (get_user_profile_fixture_dto(
            language_preference="ENGLISH"),
         get_update_profile_data_fixture_dto(
             language_preference="E")),
        (get_user_profile_fixture_dto(
            language_preference="ENGLISH"),
         get_update_profile_data_fixture_dto(
             language_preference="")),
    ])
    def test_update_profile_invalid_language_throws_exception(
            self,
            setup,
            user_profile: GetUserProfileDTO,
            update_profile_data: UserProfileDTO):
        user_id = user_profile.user_id

        from ib_users.exceptions.invalid_language_exception import \
            InvalidLanguageException

        from ib_users.constants.custom_exception_messages import \
            INVALID_LANGUAGE
        invalid_language_exception = \
            InvalidLanguageException(
                INVALID_LANGUAGE.message, exception_type=INVALID_LANGUAGE.code)

        storage_mock, presenter_mock, accounts_storage_mock = setup

        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        user_profile_interactor = UserProfileInteractor(
            storage=storage_mock, presenter=presenter_mock)

        with pytest.raises(InvalidLanguageException) as \
                exception:
            user_profile_interactor.update_user_profile(
                user_id=user_id,
                update_profile_data=update_profile_data,
                accounts_storage=accounts_storage_mock)
            storage_mock.update_user_profile. \
                assert_called_once_with(user_id, update_profile_data)
            presenter_mock.update_user_profile.assert_not_called()
            assert exception.args == invalid_language_exception. \
                args

    @pytest.mark.parametrize('user_profile,update_profile_data', [
        (get_user_profile_fixture_dto(),
         get_update_profile_data_fixture_dto(email="test")),
        (get_user_profile_fixture_dto(),
         get_update_profile_data_fixture_dto(email="test@example")),
    ])
    def test_update_profile_invalid_email_throws_exception(
            self,
            setup,
            user_profile: GetUserProfileDTO,
            update_profile_data: UserProfileDTO):
        user_id = user_profile.user_id

        from ib_users.exceptions.invalid_email_exception import \
            InvalidEmailException

        from ib_users.constants.user_profile.error_messages import \
            INVALID_EMAIL
        invalid_email_exception = \
            InvalidEmailException(
                INVALID_EMAIL, exception_type="INVALID_EMAIL")

        storage_mock, presenter_mock, accounts_storage_mock = setup

        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        user_profile_interactor = UserProfileInteractor(
            storage=storage_mock, presenter=presenter_mock)

        with pytest.raises(InvalidEmailException) as \
                exception:
            user_profile_interactor.update_user_profile(
                user_id=user_id,
                update_profile_data=update_profile_data,
                accounts_storage=accounts_storage_mock)
            storage_mock.update_user_profile. \
                assert_called_once_with(user_id, update_profile_data)
            presenter_mock.update_user_profile.assert_not_called()
            assert exception.args == invalid_email_exception. \
                args

    @pytest.mark.parametrize('user_profile,update_profile_data', [
        (get_user_profile_fixture_dto(),
         get_update_profile_data_fixture_dto(email="test@example.com")),
    ])
    def test_update_user_profile_used_email_throws_exception(
            self,
            setup,
            user_profile: GetUserProfileDTO,
            update_profile_data: UserProfileDTO):
        user_id = user_profile.user_id

        from ib_users.exceptions.invalid_email_exception import \
            InvalidEmailException

        from ib_users.constants.custom_exception_messages import \
            EMAIL_ALREADY_IN_USE

        invalid_email_exception = \
            InvalidEmailException(
                EMAIL_ALREADY_IN_USE.message,
                exception_type=EMAIL_ALREADY_IN_USE.code)

        storage_mock, presenter_mock, accounts_storage_mock = setup
        accounts_storage_mock.check_user_exists_with_email.side_effect = \
            AccountWithThisEmailAlreadyExistsException

        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        user_profile_interactor = UserProfileInteractor(
            storage=storage_mock, presenter=presenter_mock)

        from ib_users.interactors.exceptions.user_profile import \
            EmailAlreadyLinkedException
        with pytest.raises(EmailAlreadyLinkedException) as \
                exception:
            user_profile_interactor.update_user_profile(
                user_id=user_id,
                update_profile_data=update_profile_data,
                accounts_storage=accounts_storage_mock)
            storage_mock.update_user_profile. \
                assert_called_once_with(user_id, update_profile_data)
            presenter_mock.update_user_profile.assert_not_called()
            assert exception.args == invalid_email_exception. \
                args

    @pytest.mark.parametrize('user_profile,update_profile_data', [
        (get_user_profile_fixture_dto(),
         get_update_profile_data_fixture_dto(phone_number="1234567890", country_code="+91")),
    ])
    def test_update_user_profile_used_phone_number_throws_exception(
            self,
            setup,
            user_profile: GetUserProfileDTO,
            update_profile_data: UserProfileDTO):
        user_id = user_profile.user_id

        from ib_users.exceptions.invalid_phone_number_exception import \
            InvalidPhoneNumberException

        from ib_users.constants.custom_exception_messages import \
            PHONE_NUMBER_ALREADY_IN_USE

        invalid_email_exception = \
            InvalidPhoneNumberException(
                PHONE_NUMBER_ALREADY_IN_USE.message, exception_type=PHONE_NUMBER_ALREADY_IN_USE.code)

        storage_mock, presenter_mock, accounts_storage_mock = setup
        accounts_storage_mock.check_user_exists_with_phone_number.side_effect = \
            AccountWithThisPhoneNumberAlreadyExistsException

        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        user_profile_interactor = UserProfileInteractor(
            storage=storage_mock, presenter=presenter_mock)

        with pytest.raises(InvalidPhoneNumberException) as \
                exception:
            user_profile_interactor.update_user_profile(
                user_id=user_id,
                update_profile_data=update_profile_data,
                accounts_storage=accounts_storage_mock)
            storage_mock.update_user_profile. \
                assert_called_once_with(user_id, update_profile_data)
            presenter_mock.update_user_profile.assert_not_called()
            assert exception.args == invalid_email_exception. \
                args

    @pytest.mark.parametrize('user_profile,update_profile_data', [
        (get_user_profile_fixture_dto(),
         get_update_profile_data_fixture_dto(dob="test")),
        (get_user_profile_fixture_dto(),
         get_update_profile_data_fixture_dto(dob="test@example")),
        (get_user_profile_fixture_dto(),
         get_update_profile_data_fixture_dto(dob="112000")),
        (get_user_profile_fixture_dto(),
         get_update_profile_data_fixture_dto(dob="05-24-1997")),
    ])
    def test_update_profile_invalid_dob_throws_exception(
            self,
            setup,
            user_profile: GetUserProfileDTO,
            update_profile_data: UserProfileDTO):
        user_id = user_profile.user_id

        from ib_users.exceptions.invalid_dob_exception import \
            InvalidDOBException

        from ib_users.constants.custom_exception_messages import \
            INVALID_DOB
        invalid_dob_exception = \
            InvalidDOBException.from_exception_message_DTO(INVALID_DOB)

        storage_mock, presenter_mock, accounts_storage_mock = setup

        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        user_profile_interactor = UserProfileInteractor(
            storage=storage_mock, presenter=presenter_mock)

        with pytest.raises(InvalidDOBException) as \
                exception:
            user_profile_interactor.update_user_profile(
                user_id=user_id,
                update_profile_data=update_profile_data,
                accounts_storage=accounts_storage_mock)
            storage_mock.update_user_profile. \
                assert_called_once_with(user_id, update_profile_data)
            presenter_mock.update_user_profile.assert_not_called()
            assert exception.args == invalid_dob_exception. \
                args

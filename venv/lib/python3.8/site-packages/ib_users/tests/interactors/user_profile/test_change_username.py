import uuid

from mock import create_autospec

from ib_users.exceptions.custom_exception_constants import \
    USER_MAX_NAME_LENGTH_IS, USERNAME_CAN_NOT_BE_EMPTY, \
    USER_NAME_SPECIAL_CHARACTERS, ExceptionMessages
from ib_users.interactors.presenters.user_account_presenter import \
    UserAccountPresenter
from ib_users.interactors.storages.user_social_accounts_storage import \
    UserSocialAccountsStorage
from ib_users.interactors.user_account_interactor import \
    UserAccountInteractor
from ib_users.exceptions.user_account_exceptions import InvalidUsername, \
    UsernameAlreadyExists, UsernameDoesNotExist

from ib_users.interactors.storages.user_accounts_storage import UserAccountDTO, \
    UserAccountsStorage

import pytest

from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException

current_username = "admin"
new_username = "admin123"


def test_change_username_when_username_is_valid_and_not_exists():
    user_id = str(uuid.uuid4())
    username = 'bob'
    storage_mock = create_autospec(UserAccountsStorage)
    presenter_mock = create_autospec(UserAccountPresenter)
    user_account_dto = UserAccountDTO(
        user_id=user_id,
        username=username
    )

    expected_user_account_json_response = {
        "user_id": user_id,
        "username": username
    }

    storage_mock.update_username.return_value = user_account_dto
    presenter_mock.get_user_account.return_value \
        = expected_user_account_json_response
    storage_mock.is_username_exists = is_username_exists_mock

    social_storage_mock = create_autospec(UserSocialAccountsStorage)

    change_username_interactor = \
        UserAccountInteractor(storage_mock,
                              social_account_storage=social_storage_mock)
    change_username_interactor.change_username(
        current_username=current_username,
        new_username=new_username,
        presenter=presenter_mock
    )

    storage_mock.update_username.assert_called_once_with(
        current_username=current_username, new_username=new_username)

    presenter_mock.get_user_account.assert_called_once_with(
        user_account_dto=user_account_dto
    )


def is_username_exists_mock(username):
    if username == current_username:
        return True
    else:
        return False


def test_change_username_when_username_is_valid_and_exists():
    storage_mock = create_autospec(UserAccountsStorage)
    storage_mock.is_username_exists.return_value = True
    social_storage_mock = create_autospec(UserSocialAccountsStorage)

    change_username_interactor = \
        UserAccountInteractor(storage_mock,
                              social_account_storage=social_storage_mock)

    presenter_mock = create_autospec(UserAccountPresenter)

    with pytest.raises(UsernameAlreadyExists) as spec_exec:
        change_username_interactor.change_username(
            current_username=current_username,
            new_username=new_username,
            presenter=presenter_mock
        )

    assert ExceptionMessages.USERNAME_ALREADY_EXISTS in str(spec_exec.value)


@pytest.mark.parametrize(
    'username,exception_msg', [
        ("adminadminadminadminadminadminadminadmin", USER_MAX_NAME_LENGTH_IS),
        ("", USERNAME_CAN_NOT_BE_EMPTY),
        ("?Testing/", USER_NAME_SPECIAL_CHARACTERS)
    ])
def test_change_username_when_wrong_username_is_given(username, exception_msg):
    storage_mock = create_autospec(UserAccountsStorage)
    storage_mock.is_username_exists.return_value = True
    social_storage_mock = create_autospec(UserSocialAccountsStorage)

    change_username_interactor = \
        UserAccountInteractor(storage_mock,
                              social_account_storage=social_storage_mock)

    presenter_mock = create_autospec(UserAccountPresenter)

    with pytest.raises(CustomException) as spec_exec:
        change_username_interactor.change_username(
            current_username=current_username,
            new_username=username,
            presenter=presenter_mock
        )
    TestsUtils.assert_custom_exception(exception_msg, spec_exec)


def test_throw_exception_if_current_username_and_new_username_are_equal():
    current_username = "admin"
    new_username = "admin"

    storage_mock = create_autospec(UserAccountsStorage)
    social_storage_mock = create_autospec(UserSocialAccountsStorage)

    change_username_interactor = \
        UserAccountInteractor(storage_mock,
                              social_account_storage=social_storage_mock)
    presenter_mock = create_autospec(UserAccountPresenter)

    with pytest.raises(InvalidUsername) as e:
        change_username_interactor.change_username(
            current_username=current_username, new_username=new_username,
            presenter=presenter_mock)

    assert ExceptionMessages.GIVEN_USERNAME_IS_SAME in str(e.value)


def test_throw_exception_if_current_user_does_not_exist():
    storage_mock = create_autospec(UserAccountsStorage)
    storage_mock.is_username_exists.return_value = False
    social_storage_mock = create_autospec(UserSocialAccountsStorage)

    change_username_interactor = \
        UserAccountInteractor(storage_mock,
                              social_account_storage=social_storage_mock)


    presenter_mock = create_autospec(UserAccountPresenter)

    with pytest.raises(UsernameDoesNotExist) as spec_exec:
        change_username_interactor.change_username(
            current_username=current_username,
            new_username=new_username,
            presenter=presenter_mock
        )

    assert ExceptionMessages.USERNAME_DOES_NOT_EXIST in str(spec_exec.value)

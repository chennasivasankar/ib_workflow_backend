import uuid

from mock import create_autospec
from ib_users.exceptions.user_account_exceptions import InvalidAction\
    , UserDoesNotExist
from ib_users.exceptions.custom_exception_constants import ExceptionMessages
import pytest

from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.storages.user_social_accounts_storage import \
    UserSocialAccountsStorage
from ib_users.interactors.user_account_interactor import \
    UserAccountInteractor



def test_throw_exception_when_user_is_active_and_try_to_activate():
    user_id = str(uuid.uuid4())

    storage_mock = create_autospec(UserAccountsStorage)
    storage_mock.is_user_account_active.return_value = True
    storage_mock.is_username_exists.return_value = True
    social_storage_mock = create_autospec(UserSocialAccountsStorage)

    user_account_interactor = \
        UserAccountInteractor(storage_mock,
                              social_account_storage=social_storage_mock)

    with pytest.raises(InvalidAction) as e:
        user_account_interactor.activate_user(
            user_id=user_id)

    assert ExceptionMessages.USER_ACCOUNT_IS_ALREADY_ACTIVE in str(e.value)


def test_throw_exception_when_user_is_invalid_and_try_to_activate():
    user_id = str(uuid.uuid4())

    storage_mock = create_autospec(UserAccountsStorage)
    storage_mock.is_user_account_active.return_value = False
    storage_mock.is_user_id_exists.return_value = False

    social_storage_mock = create_autospec(UserSocialAccountsStorage)

    user_account_interactor = \
        UserAccountInteractor(storage_mock,
                              social_account_storage=social_storage_mock)

    with pytest.raises(UserDoesNotExist) as e:
        user_account_interactor.activate_user(user_id=user_id)

    assert ExceptionMessages.USER_DOES_NOT_EXIST in str(e.value)


def test_activate_or_reactivate_if_user_is_valid_and_not_active():
    user_id = str(uuid.uuid4())

    storage_mock = create_autospec(UserAccountsStorage)
    storage_mock.is_user_account_active.return_value = False
    storage_mock.is_user_id_exists.return_value = True
    social_storage_mock = create_autospec(UserSocialAccountsStorage)

    user_account_interactor = \
        UserAccountInteractor(storage_mock,
                              social_account_storage=social_storage_mock)

    user_account_interactor.activate_user(
        user_id=user_id)

    storage_mock.activate_user.assert_called_once_with(
        user_id=user_id)

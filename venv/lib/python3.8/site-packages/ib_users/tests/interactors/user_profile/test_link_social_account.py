import uuid

from mock import create_autospec

from ib_users.constants.user_account_constants import \
    SocialAccountProviderType
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.storages.user_social_accounts_storage import \
    UserSocialAccountsStorage
from ib_users.interactors.third_party.social_account import SocialAccount


from ib_users.interactors.user_account_interactor import UserAccountInteractor
import pytest
from ib_users.exceptions.user_account_exceptions import InvalidAction, \
    UserDoesNotExist
from ib_users.exceptions.custom_exception_constants import ExceptionMessages


@pytest.mark.parametrize('tokens,social_account_type,social_id', [
    ({"access_token": "facebook_token"}, SocialAccountProviderType.FACEBOOK.value,
     "social_id"),
    ({"access_token": "twitter_token",
      "secret_token": "secret_token"}, SocialAccountProviderType.TWITTER.value,
     "social_id"),
    ({"access_token": "twitter_token"}, SocialAccountProviderType.GOOGLE.value,
     "social_id")
])
def test_link_social_account_with_access_granted_and_correct_social_id(
        tokens, social_account_type, social_id):
    user_id = str(uuid.uuid4())

    social_account_mock = create_autospec(SocialAccount)

    social_account_mock.get_social_id.return_value = social_id
    social_account_mock.get_social_account_type.return_value \
        = social_account_type

    storage_mock = create_autospec(UserAccountsStorage)
    storage_mock.is_username_exists.return_value = True

    social_storage_mock = create_autospec(UserSocialAccountsStorage)
    user_account_interactor = \
        UserAccountInteractor(storage_mock,
                              social_account_storage=social_storage_mock)

    user_account_interactor.link_social_account(
        user_id=user_id,
        social_account=social_account_mock,
        **tokens
    )
    social_id = social_account_mock.get_social_id(
        **tokens
    )
    social_storage_mock.link_social_account.assert_called_once_with(
        user_id=user_id,
        social_account_type=social_account_type,
        social_id=social_id
    )


@pytest.mark.parametrize(
    'tokens,social_account_type', [
        ({"access_token": "facebook_token"},
         SocialAccountProviderType.FACEBOOK.value),
        ({"access_token": "twitter_token",
          "secret_token": "secret_token"}, SocialAccountProviderType.TWITTER.value),
        ({"access_token": "twitter_token"}, SocialAccountProviderType.GOOGLE.value)
    ])
def test_throw_execption_when_link_social_account_with_wrong_social_id(
        tokens, social_account_type):
    user_id = str(uuid.uuid4())
    exception_message = "no social id"

    storage_mock = create_autospec(UserAccountsStorage)
    social_account_mock = create_autospec(SocialAccount)
    social_account_mock.get_social_account_type.return_value = \
        social_account_type

    storage_mock.is_username_exists.return_value = True

    social_account_mock.get_social_id.side_effect = \
        InvalidAction(exception_message)

    social_storage_mock = create_autospec(UserSocialAccountsStorage)
    user_account_interactor = \
        UserAccountInteractor(storage_mock,
                              social_account_storage=social_storage_mock)

    with pytest.raises(InvalidAction) as e:
        user_account_interactor.link_social_account(
            user_id=user_id,
            social_account=social_account_mock,
            **tokens)

    assert exception_message in str(e.value)


@pytest.mark.parametrize(
    'tokens,social_account_type', [
        ({"access_token": "facebook_token"},
         SocialAccountProviderType.FACEBOOK.value),
        ({"access_token": "twitter_token",
          "secret_token": "secret_token"}, SocialAccountProviderType.TWITTER.value),
        ({"access_token": "twitter_token"}, SocialAccountProviderType.GOOGLE.value)
    ])
def test_throw_exception_when_link_social_account_with_wrong_username(
        tokens, social_account_type):
    user_id = str(uuid.uuid4())

    storage_mock = create_autospec(UserAccountsStorage)
    social_account_mock = create_autospec(SocialAccount)

    social_account_mock.get_social_account_type.return_value \
        = social_account_type

    storage_mock.is_user_id_exists.return_value = False

    social_storage_mock = create_autospec(UserSocialAccountsStorage)
    user_account_interactor = \
        UserAccountInteractor(storage_mock,
                              social_account_storage=social_storage_mock)

    with pytest.raises(UserDoesNotExist) as e:
        user_account_interactor.link_social_account(
            user_id=user_id,
            social_account=social_account_mock,
            **tokens)

    assert ExceptionMessages.USER_DOES_NOT_EXIST in str(e.value)

# @pytest.mark.parametrize(
#     'tokens,social_account_type', [
#         ({"access_token": ""}, SocialProvider.FACEBOOK),
#         ({"access_token": "",
#           "secret_token": "secret_token"}, SocialProvider.TWITTER),
#         ({"access_token": ""}, SocialProvider.GOOGLE)
#     ])
# def test_throw_exception_when_link_social_account_with_empty_access_token(
#         tokens, social_account_type):
#     user_id = "749a-xc0d3r"
#
#     storage_mock = create_autospec(UserAccountStorage)
#     storage_mock.is_username_exists.return_value = True
#
#     social_account_mock = create_autospec(SocialAccount)
#
#     social_account_mock.get_social_account_type.return_value \
#         = social_account_type
#
#     user_account_interactor = UserAccountInteractor(storage_mock)
#     with pytest.raises(InvalidAction) as e:
#         user_account_interactor.link_social_account(
#             user_id=user_id,
#             social_account=social_account_mock,
#             **tokens)
#
#     assert ExceptionMessages.ACCESS_TOKEN_IS_EMPTY in str(e.value)


# @pytest.mark.parametrize(
#     'tokens,social_account_type', [
#         ({"access_token": "twitter_token",
#           "secret_token": ""}, SocialProvider.TWITTER)
#     ])
# def test_throw_exception_when_link_social_account_with_empty_secret_token(
#         tokens, social_account_type):
#     user_id = "749a-xc0d3r"
#
#     storage_mock = create_autospec(UserAccountStorage)
#     storage_mock.is_username_exists.return_value = True
#
#     social_account_mock = create_autospec(SocialAccount)
#
#     social_account_mock.get_social_account_type.return_value \
#         = social_account_type
#
#     user_account_interactor = UserAccountInteractor(storage_mock)
#     with pytest.raises(InvalidAction) as e:
#         user_account_interactor.link_social_account(
#             user_id=user_id,
#             social_account=social_account_mock,
#             **tokens
#         )
#
#     assert ExceptionMessages.SECRET_TOKEN_IS_EMPTY in str(e.value)

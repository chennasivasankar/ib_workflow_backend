import uuid

import pytest
from mock import create_autospec

from ib_users.constants.user_account_constants import \
    SocialAccountProviderType
from ib_users.exceptions.custom_exception_constants import ExceptionMessages
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.storages.user_social_accounts_storage import \
    UserSocialAccountsStorage
from ib_users.interactors.third_party.social_account import SocialAccount

from ib_users.interactors.user_account_interactor import UserAccountInteractor
from ib_users.exceptions.user_account_exceptions import InvalidAction


@pytest.mark.parametrize('social_account_type', [
    SocialAccountProviderType.FACEBOOK,
    SocialAccountProviderType.TWITTER,
    SocialAccountProviderType.GOOGLE,
])
def test_throw_exception_if_social_account_is_not_linked(social_account_type):
    user_id = str(uuid.uuid4())

    storage_mock = create_autospec(UserAccountsStorage)

    social_storage_mock = create_autospec(UserSocialAccountsStorage)
    social_storage_mock.is_social_account_available.return_value = False

    user_account_interactor = \
        UserAccountInteractor(storage_mock,
                              social_account_storage=social_storage_mock)
    with pytest.raises(InvalidAction) as e:
        user_account_interactor.\
            check_and_throw_exception_if_social_account_is_not_available(
                user_id=user_id,
                social_account_type=social_account_type.value
            )

    assert ExceptionMessages.NO_SOCIAL_ACCOUNT_AVAILABLE.format(
        social_account_type.value
    ) in str(e.value)


@pytest.mark.parametrize('social_account_type', [
    SocialAccountProviderType.FACEBOOK,
    SocialAccountProviderType.TWITTER,
    SocialAccountProviderType.GOOGLE,
])
def test_unlink_if_social_account_is_already_linked(social_account_type):
    user_id = str(uuid.uuid4())

    storage_mock = create_autospec(UserAccountsStorage)

    social_storage_mock = create_autospec(UserSocialAccountsStorage)
    social_storage_mock.is_social_account_available.return_value = True

    user_account_interactor = \
        UserAccountInteractor(storage_mock,
                              social_account_storage=social_storage_mock)
    social_account_mock = create_autospec(SocialAccount)
    social_account_mock.get_social_account_type.return_value =\
        social_account_type.value


    user_account_interactor.unlink_social_account(
        user_id=user_id,
        social_account=social_account_mock
    )

    social_storage_mock.unlink_social_account.assert_called_once_with(
        user_id=user_id,
        social_account_type=social_account_type.value
    )

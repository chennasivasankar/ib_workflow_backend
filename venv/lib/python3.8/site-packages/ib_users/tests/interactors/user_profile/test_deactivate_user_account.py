import uuid

from mock import create_autospec
import pytest

from ib_users.exceptions.custom_exception_constants import ExceptionMessages
from ib_users.exceptions.user_account_exceptions import \
    UserAccountAlreadyDeactivated, UserDoesNotExist
from ib_users.interactors.logout.logout_in_devices import \
    LogoutInDevices
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.storages.user_social_accounts_storage import \
    UserSocialAccountsStorage

from ib_users.interactors.user_account_interactor import UserAccountInteractor


def test_deactivate_user_account():

    user_account_storage_mock = create_autospec(UserAccountsStorage)
    logout_in_all_devices = create_autospec(LogoutInDevices)

    social_storage_mock = create_autospec(UserSocialAccountsStorage)

    user_account_interactor = \
        UserAccountInteractor(user_account_storage_mock,
                              social_account_storage=social_storage_mock)

    user_id = uuid.uuid4()
    user_account_storage_mock.is_user_account_deactivated.return_value = False

    user_account_interactor.deactivate_user_account(
        user_id=user_id,
        logout_in_all_devices=logout_in_all_devices
    )
    user_account_storage_mock.deactivate_user_account.assert_called_once_with(
        user_id=user_id
    )

    logout_in_all_devices.logout_in_all_devices.assert_called_once_with(
        user_id=user_id
    )


def test_deactivate_deactivated_user_account():
    user_account_storage_mock = create_autospec(UserAccountsStorage)
    logout_in_all_devices = create_autospec(LogoutInDevices)

    social_storage_mock = create_autospec(UserSocialAccountsStorage)

    user_account_interactor = \
        UserAccountInteractor(user_account_storage_mock,
                              social_account_storage=social_storage_mock)

    user_id = uuid.uuid4()
    user_account_storage_mock.is_user_account_deactivated.return_value = True

    with pytest.raises(UserAccountAlreadyDeactivated) as exc_info:
        user_account_interactor.deactivate_user_account(
            user_id=user_id,
            logout_in_all_devices=logout_in_all_devices
        )

    assert ExceptionMessages.USER_ACCOUNT_IS_ALREADY_DEACTIVATED in str(
        exc_info.value)


def test_deactivate_invalid_user_account():
    user_account_storage_mock = create_autospec(UserAccountsStorage)
    logout_in_all_devices = create_autospec(LogoutInDevices)

    social_storage_mock = create_autospec(UserSocialAccountsStorage)

    user_account_interactor = \
        UserAccountInteractor(user_account_storage_mock,
                              social_account_storage=social_storage_mock)

    user_id = uuid.uuid4()

    user_account_storage_mock.is_user_account_deactivated.return_value = False
    user_account_storage_mock.is_user_id_exists.return_value = False

    with pytest.raises(UserDoesNotExist) as exc_info:
        user_account_interactor.deactivate_user_account(
            user_id=user_id,
            logout_in_all_devices=logout_in_all_devices

        )

    assert ExceptionMessages.USER_DOES_NOT_EXIST in str(
        exc_info.value)

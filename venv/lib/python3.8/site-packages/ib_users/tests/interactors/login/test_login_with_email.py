import uuid

import pytest
from mock import create_autospec

from ib_users.exceptions.custom_exception_constants import INVALID_EMAIL, \
    PASSWORD_MIN_LENGTH_IS, PASSWORD_AT_LEAST_1_SPECIAL_CHARACTER, \
    NOT_REGISTERED_USER, INCORRECT_PASSWORD
from ib_users.validators.base_validator import \
    CustomException
from ib_users.interactors.login.login_with_email import LoginWithEmail
from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage, EmailAndPasswordDTO
from ib_users.tests.interactors.login.login_tests_utils import LoginTestsUtils


class TestsLoginWithEmail:

    @pytest.mark.parametrize("email",
                             ["", "a@bc",
                              "hello.boy#gmail.com",
                              "3010@gmail.l"])
    def test_login_with_invalid_login_id(self, email):
        self._init_interactor(email, "password@#")
        LoginTestsUtils.login_with_invalid_login_id(self.login_interactor, self.email_login_dto, INVALID_EMAIL)

    @pytest.mark.parametrize("password,exception_message", [
        ("", PASSWORD_MIN_LENGTH_IS),
        ("a" * 7, PASSWORD_MIN_LENGTH_IS),
        ("abU" * 15, PASSWORD_AT_LEAST_1_SPECIAL_CHARACTER)])
    def test_login_with_valid_email_and_invalid_password(self, password, exception_message):
        self._init_interactor("jim@gog.com", password)
        LoginTestsUtils.login_with_valid_login_id_and_invalid_password(self.login_interactor,
                                                                       self.email_login_dto,
                                                                       exception_message)

    def test_login_with_valid_credentials_and_not_registered_email(self):
        self.init_interactor_with_side_effects("jim@gog.com", "password@#", NOT_REGISTERED_USER)
        LoginTestsUtils.login_with_valid_credentials_and_not_registered_login_id(self.login_interactor,
                                                                                 self.email_login_dto)

    def test_login_with_incorrect_password(self):
        self.init_interactor_with_side_effects("jim@gog.com", "password@#", INCORRECT_PASSWORD)
        LoginTestsUtils.login_with_incorrect_password(self.login_interactor, self.email_login_dto)

    def test_login_with_correct_credentials(self):
        user_id = str(uuid.uuid4())
        self.init_interactor_with_return_value("jim@gog.com", "password@#", user_id)
        LoginTestsUtils.login_with_correct_credentials(self.login_interactor, self.email_login_dto, user_id)

    def test_login_with_deactivated_user(self):
        self._init_interactor("jim@gog.com", "password@#")
        LoginTestsUtils.login_with_deactivated_user(self.login_interactor, self.email_login_dto)

    def _init_interactor(self, email, password):
        storage_mock = create_autospec(UserAccountsStorage)
        self.login_interactor = LoginWithEmail(storage_mock)
        self.email_login_dto = EmailAndPasswordDTO(email, password)

    def init_interactor_with_side_effects(self, email, password, exception_message):
        storage_mock = create_autospec(UserAccountsStorage)
        storage_mock.get_user_id_given_email_and_password.side_effect = \
            CustomException.from_exception_message_DTO(exception_message)

        self.login_interactor = LoginWithEmail(storage_mock)
        self.email_login_dto = EmailAndPasswordDTO(email, password)

    def init_interactor_with_return_value(self, email, password, return_value):
        storage_mock = create_autospec(UserAccountsStorage)
        storage_mock.get_user_id_given_email_and_password.return_value = return_value

        self.login_interactor = LoginWithEmail(storage_mock)
        self.email_login_dto = EmailAndPasswordDTO(email, password)

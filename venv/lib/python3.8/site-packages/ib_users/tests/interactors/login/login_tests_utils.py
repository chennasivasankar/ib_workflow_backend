import pytest
from mock import create_autospec

from ib_users.exceptions.custom_exception_constants import NOT_REGISTERED_USER, \
    INCORRECT_PASSWORD, \
    USER_ACCOUNT_IS_DEACTIVATED
from ib_users.interactors.login.base_login import BaseLogin
from ib_users.interactors.logout.logout_in_devices import \
    LogoutInDevices
from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException


class LoginTestsUtils(object):

    @staticmethod
    def login_with_invalid_login_id(login_interactor: BaseLogin, login_dto,
                                    exception_message):
        with pytest.raises(CustomException) as invalid_user_name:
            login_interactor.get_user_id_for_given_login_data(login_dto)

        TestsUtils.assert_custom_exception(exception_message,
                                           invalid_user_name)

    @staticmethod
    def login_with_valid_login_id_and_invalid_password(
            login_interactor: BaseLogin, login_dto, exception_message):
        with pytest.raises(CustomException) as invalid_password:
            login_interactor.get_user_id_for_given_login_data(login_dto)

        TestsUtils.assert_custom_exception(exception_message, invalid_password)

    @staticmethod
    def login_with_valid_credentials_and_not_registered_login_id(
            login_interactor: BaseLogin, login_dto):
        with pytest.raises(CustomException) as not_registered_user:
            login_interactor.get_user_id_for_given_login_data(login_dto)

        TestsUtils.assert_custom_exception(NOT_REGISTERED_USER,
                                           not_registered_user)

    @staticmethod
    def login_with_incorrect_password(login_interactor: BaseLogin, login_dto):
        with pytest.raises(CustomException) as incorrect_password_exception:
            login_interactor.get_user_id_for_given_login_data(login_dto)

        TestsUtils.assert_custom_exception(INCORRECT_PASSWORD,
                                           incorrect_password_exception)

    @staticmethod
    def login_with_correct_credentials(login_interactor: BaseLogin, login_dto,
                                       expected_user_id):
        actual_user_id = login_interactor.get_user_id_for_given_login_data(
            login_dto)
        assert expected_user_id == actual_user_id

    @staticmethod
    def login_with_deactivated_user(login_interactor: BaseLogin, login_dto):
        login_interactor.storage.is_user_account_active.side_effect = \
            CustomException.from_exception_message_DTO(
                USER_ACCOUNT_IS_DEACTIVATED)

        with pytest.raises(CustomException) as inactive_user_exception:
            login_interactor.get_user_id_for_given_login_data(login_dto)

        TestsUtils.assert_custom_exception(USER_ACCOUNT_IS_DEACTIVATED,
                                           inactive_user_exception)


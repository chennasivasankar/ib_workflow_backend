import uuid

import pytest
from mock import create_autospec

from ib_users.exceptions.custom_exception_constants import \
    USERNAME_CAN_NOT_BE_EMPTY, USER_MAX_NAME_LENGTH_IS, \
    USER_NAME_SPECIAL_CHARACTERS, PASSWORD_MIN_LENGTH_IS, \
    PASSWORD_AT_LEAST_1_SPECIAL_CHARACTER, NOT_REGISTERED_USER, \
    INCORRECT_PASSWORD
from ib_users.interactors import LoginWithUsername
from ib_users.interactors.storages import UserAccountsStorage, UserNameAndPasswordDTO
from ib_users.tests.interactors.login.login_tests_utils import LoginTestsUtils
from ib_users.validators.base_validator import \
    CustomException


class TestsLoginWithUsername:

    @pytest.mark.parametrize("username,exception_message", [
        ("", USERNAME_CAN_NOT_BE_EMPTY),
        ("a" * 16, USER_MAX_NAME_LENGTH_IS),
        ("abU" * 15, USER_MAX_NAME_LENGTH_IS),
        ("jac&k^al%", USER_NAME_SPECIAL_CHARACTERS),
        ("jac&", USER_NAME_SPECIAL_CHARACTERS),
        ("jack^al", USER_NAME_SPECIAL_CHARACTERS)])
    def test_login_with_invalid_login_id(self, username, exception_message):
        self._init_interactor(username, "password@#")
        LoginTestsUtils.login_with_invalid_login_id(self.login_interactor, self.login_dto, exception_message)

    @pytest.mark.parametrize("password,exception_message", [
        ("", PASSWORD_MIN_LENGTH_IS),
        ("a" * 7, PASSWORD_MIN_LENGTH_IS),
        ("abU" * 15, PASSWORD_AT_LEAST_1_SPECIAL_CHARACTER)])
    def test_login_with_valid_username_and_invalid_password(self, password, exception_message):
        self._init_interactor("usernamevalid", password)
        LoginTestsUtils.login_with_valid_login_id_and_invalid_password(self.login_interactor, self.login_dto,
                                                                       exception_message)

    def test_login_with_valid_credentials_and_not_registered_username(self):
        self._init_interactor_with_side_effects("usernamevalid", "password@#", NOT_REGISTERED_USER)
        LoginTestsUtils.login_with_valid_credentials_and_not_registered_login_id(self.login_interactor,
                                                                                 self.login_dto)

    def test_login_with_incorrect_password(self):
        self._init_interactor_with_side_effects("usernamevalid", "password@#", INCORRECT_PASSWORD)
        LoginTestsUtils.login_with_incorrect_password(self.login_interactor, self.login_dto)

    def test_login_with_correct_credentials(self):
        user_id = str(uuid.uuid4())
        self._init_interactor_with_return_value("usernamevalid", "password@#", user_id)
        LoginTestsUtils.login_with_correct_credentials(self.login_interactor, self.login_dto, user_id)

    def test_login_with_deactivated_user(self):
        self._init_interactor("usernamevalid", "password@#")
        LoginTestsUtils.login_with_deactivated_user(self.login_interactor, self.login_dto)


    def _init_interactor(self, username, password):
        self.storage_mock = create_autospec(UserAccountsStorage)
        self.login_interactor = LoginWithUsername(self.storage_mock)
        self.login_dto = UserNameAndPasswordDTO(username, password)

    def _init_interactor_with_side_effects(self, username, password, exception_message):
        storage_mock = create_autospec(UserAccountsStorage)
        storage_mock.get_user_id_given_username_and_password.side_effect = \
            CustomException.from_exception_message_DTO(exception_message)

        self.login_interactor = LoginWithUsername(storage_mock)
        self.login_dto = UserNameAndPasswordDTO(username, password)

    def _init_interactor_with_return_value(self, username, password, return_value):
        storage_mock = create_autospec(UserAccountsStorage)
        storage_mock.get_user_id_given_username_and_password.return_value = return_value

        self.login_interactor = LoginWithUsername(storage_mock)
        self.login_dto = UserNameAndPasswordDTO(username, password)
import uuid

import pytest
from mock import create_autospec

from ib_users.exceptions.custom_exception_constants import \
    INVALID_GOOGLE_ACCESS_TOKEN, GOOGLE_NOT_LINKED
from ib_users.interactors import LoginWithGoogle
from ib_users.interactors.storages.user_social_accounts_storage import \
    UserSocialAccountsStorage
from ib_users.interactors.third_party.social_account import SocialAccount
from ib_users.tests.interactors.login.login_tests_utils import LoginTestsUtils
from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException


class TestsLoginWithGoogle:
    def test_login_with_malformed_google_access_token(self):
        google_service = create_autospec(SocialAccount)
        google_service.get_social_id.side_effect = \
            CustomException.from_exception_message_DTO(INVALID_GOOGLE_ACCESS_TOKEN)

        self._init_interactor("google_access_token", google_service)

        LoginTestsUtils.login_with_invalid_login_id(self.login_interactor, self.login_dto,
                                                    INVALID_GOOGLE_ACCESS_TOKEN)
        google_service.get_social_id.assert_called_once()

    @pytest.mark.parametrize("google_access_token", ["google_access_token", "access_token"])
    def test_login_with_not_registered_user(self, google_access_token):
        self.init_interactor_with_side_effects(google_access_token, GOOGLE_NOT_LINKED)

        with pytest.raises(CustomException) as not_registered_user:
            self.login_interactor.get_user_id_for_given_login_data(self.login_dto)

        TestsUtils.assert_custom_exception(GOOGLE_NOT_LINKED, not_registered_user)

    def test_login_with_correct_credentials(self):
        user_id = str(uuid.uuid4())

        self.init_interactor_with_return_value("google_access_token", user_id)
        LoginTestsUtils.login_with_correct_credentials(self.login_interactor, self.login_dto, user_id)

    def test_login_with_deactivated_user(self):
        self._init_interactor("google_access_token")
        LoginTestsUtils.login_with_deactivated_user(self.login_interactor, self.login_dto)

    def _init_interactor(self, access_token, social_login_service=None):
        storage_mock = create_autospec(UserSocialAccountsStorage)

        if social_login_service is None:
            social_login_service = create_autospec(SocialAccount)
        else:
            social_login_service = social_login_service

        self.login_interactor = LoginWithGoogle(storage_mock, google_service=social_login_service)
        self.login_dto = access_token

    def init_interactor_with_side_effects(self, access_token, exception_message):
        storage_mock = create_autospec(UserSocialAccountsStorage)
        storage_mock.get_user_id_given_google_social_id.side_effect = \
            CustomException.from_exception_message_DTO(exception_message)
        social_login_service = create_autospec(SocialAccount)

        self.login_interactor = LoginWithGoogle(storage_mock, google_service=social_login_service)
        self.login_dto = access_token

    def init_interactor_with_return_value(self, access_token, return_value):
        storage_mock = create_autospec(UserSocialAccountsStorage)
        storage_mock.get_user_id_given_google_social_id.return_value = return_value
        social_login_service = create_autospec(SocialAccount)

        self.login_interactor = LoginWithGoogle(storage_mock, google_service=social_login_service)
        self.login_dto = access_token

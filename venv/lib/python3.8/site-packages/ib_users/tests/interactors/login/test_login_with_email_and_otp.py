import pytest
from mock import create_autospec

from ib_users.exceptions.custom_exception_constants import INVALID_EMAIL, \
    INVALID_OTP, NOT_REGISTERED_USER
from ib_users.interactors import LoginWithEmailAndOTP
from ib_users.interactors.login.login_with_email_and_otp import EmailAndOTPDTO
from ib_users.interactors.third_party.otp_service import OTPService
from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage
from ib_users.tests.interactors.login.login_tests_utils import LoginTestsUtils
from ib_users.validators.base_validator import CustomException


class TestsLoginWithEmailAndPasswordOTP:

    @pytest.mark.parametrize("email",
                             ["", "a@bc",
                              "hello.boy#gmail.com",
                              "3010@gmail.l"])
    def test_login_with_invalid_email(self, email):
        self._init_interactor(email, "121333")
        LoginTestsUtils.login_with_invalid_login_id(self.login_interactor, self.email_login_dto, INVALID_EMAIL)

    @pytest.mark.parametrize("otp,exception_message", [
        ("we", INVALID_OTP),
        ("9" * 5, INVALID_OTP),
        ("1212a" * 15, INVALID_OTP)])
    def test_login_with_valid_email_and_invalid_otp(self, otp, exception_message):
        otp_service = create_autospec(OTPService)
        otp_service.validate_otp_send_to_email.side_effect = \
            CustomException.from_exception_message_DTO(exception_message)
        self._init_interactor("jim@gog.com", "121333", otp_service)

        LoginTestsUtils.login_with_valid_login_id_and_invalid_password(self.login_interactor,
                                                                       self.email_login_dto,
                                                                       exception_message)

    def test_login_with_valid_credentials_and_not_registered_email(self):
        self.init_interactor_with_side_effects("jim@gog.com", "121333", NOT_REGISTERED_USER)
        LoginTestsUtils.login_with_valid_credentials_and_not_registered_login_id(self.login_interactor,
                                                                                 self.email_login_dto)

    def test_login_with_correct_credentials(self):
        user_id = "user_id"
        self.init_interactor_with_return_value("jim@gog.com", "121333", user_id)
        LoginTestsUtils.login_with_correct_credentials(self.login_interactor, self.email_login_dto, user_id)

    def test_login_with_deactivated_user(self):
        self._init_interactor("jim@gog.com", "123123")
        LoginTestsUtils.login_with_deactivated_user(self.login_interactor, self.email_login_dto)


    def _init_interactor(self, email, otp, otp_service=None):
        storage_mock = create_autospec(UserAccountsStorage)

        if otp_service is None:
            otp_service = create_autospec(OTPService)
        else:
            otp_service = otp_service

        self.login_interactor = LoginWithEmailAndOTP(storage_mock, otp_service=otp_service)
        self.email_login_dto = EmailAndOTPDTO(email, otp)

    def init_interactor_with_side_effects(self, email, otp, exception_message):
        storage_mock = create_autospec(UserAccountsStorage)
        storage_mock.get_user_id_given_email.side_effect = \
            CustomException.from_exception_message_DTO(exception_message)
        otp_service = create_autospec(OTPService)

        self.login_interactor = LoginWithEmailAndOTP(storage_mock, otp_service=otp_service)
        self.email_login_dto = EmailAndOTPDTO(email, otp)

    def init_interactor_with_return_value(self, email, otp, return_value):
        storage_mock = create_autospec(UserAccountsStorage)
        storage_mock.get_user_id_given_email.return_value = return_value
        otp_service = create_autospec(OTPService)

        self.login_interactor = LoginWithEmailAndOTP(storage_mock, otp_service=otp_service)
        self.email_login_dto = EmailAndOTPDTO(email, otp)

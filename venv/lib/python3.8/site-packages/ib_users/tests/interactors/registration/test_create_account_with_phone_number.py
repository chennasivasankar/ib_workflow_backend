from uuid import uuid4

import pytest
from mock import create_autospec

from ib_users.exceptions.invalid_phone_number_exception import \
    InvalidPhoneNumberException
from ib_users.exceptions.phone_number_validation_exception_messges import \
    UNABLE_TO_PARSE_PHONE_NUMBER
from ib_users.exceptions.registration_exceptions import \
    AccountWithThisPhoneNumberAlreadyExistsException, \
    UsernameAlreadyExistsException
from ib_users.interactors.registration.phone_number_registration_interactor import \
    PhoneNumberRegistrationInteractor
from ib_users.interactors.presenters.registration_presenter import \
    RegistrationPresenter
from ib_users.interactors.registration.DTOs.registration_dtos import \
    CreateAccountWithPhoneNumberDTO
from ib_users.interactors.storages.user_accounts_storage import \
    UserAccountsStorage
from ib_users.interactors.validators.phone_number_validator import \
    PhoneNumberValidator

from ib_users.tests.interactors.registration.constants import \
    TestCaseParameters
from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException


class TestCreateAccountWithPhoneNumber:
    @pytest.fixture
    def set_up(self):
        accounts_storage = create_autospec(UserAccountsStorage)
        presenter = create_autospec(RegistrationPresenter)
        phone_numbers_module = create_autospec(PhoneNumberValidator)
        registration_interactor = PhoneNumberRegistrationInteractor(
            accounts_storage, presenter, phone_numbers_module)
        return accounts_storage, registration_interactor

    @pytest.fixture
    def set_up_with_prepsenter(self):
        accounts_storage = create_autospec(UserAccountsStorage)
        presenter = create_autospec(RegistrationPresenter)
        phone_numbers_module = create_autospec(PhoneNumberValidator)
        registration_interactor = PhoneNumberRegistrationInteractor(
            accounts_storage, presenter, phone_numbers_module)
        return accounts_storage, registration_interactor, presenter


    @pytest.fixture
    def set_up_with_phone_number_module(self):
        accounts_storage = create_autospec(UserAccountsStorage)
        presenter = create_autospec(RegistrationPresenter)
        phone_numbers_module = create_autospec(PhoneNumberValidator)
        registration_interactor = PhoneNumberRegistrationInteractor(
            accounts_storage, presenter, phone_numbers_module)
        return accounts_storage, registration_interactor, phone_numbers_module

    @pytest.mark.parametrize('phone_number,country_code,password', [
        ("986546430", "+91", "iBC@2091")])
    def test_create_account_with_phone_number(
            self, set_up_with_prepsenter, phone_number,country_code,
            password):
        accounts_storage, registration_interactor, presenter = \
            set_up_with_prepsenter
        user_uuid = uuid4()
        accounts_storage.create_account_with_phone_number.return_value = \
            user_uuid

        create_account_dto = CreateAccountWithPhoneNumberDTO(
            phone_number=phone_number, country_code=country_code,
            password=password)
        registration_interactor.create_account_with_phone_number(
           create_account_dto)

        accounts_storage.create_account_with_phone_number\
            .assert_called_once_with(create_account_dto)
        presenter.get_user_id.assert_called_once_with(user_uuid)

    @pytest.mark.parametrize('phone_number,country_code,password,username', [
        ("986546430", "+91", "iBC@2091", "praneetha")])
    def test_create_account_with_phone_number_and_username(
            self, set_up, phone_number, country_code, password, username):
        accounts_storage, registration_interactor = set_up

        create_account_dto = CreateAccountWithPhoneNumberDTO(
            phone_number=phone_number, country_code=country_code,
            password=password, username=username)
        registration_interactor.create_account_with_phone_number(
            create_account_dto)

        accounts_storage.create_account_with_phone_number \
            .assert_called_once_with(create_account_dto)

    @pytest.mark.parametrize('phone_number,country_code', [
        ("986546430", "+91")])
    def test_create_account_with_phone_number_already_registered(
            self, set_up, phone_number, country_code):
        accounts_storage, registration_interactor = set_up

        create_account_dto = CreateAccountWithPhoneNumberDTO(
            phone_number=phone_number, country_code=country_code,
            password="iBC@2091")

        accounts_storage.check_user_exists_with_phone_number.side_effect = \
            AccountWithThisPhoneNumberAlreadyExistsException
        with pytest.raises(AccountWithThisPhoneNumberAlreadyExistsException):
            registration_interactor.create_account_with_phone_number(
                create_account_dto)
        accounts_storage.create_account_with_phone_number.assert_not_called()

    @pytest.mark.parametrize('username', [
        ("praneetha")])
    def test_create_account_with_phone_number_username_already_registered(
            self, set_up, username):
        accounts_storage, registration_interactor = set_up

        create_account_dto = CreateAccountWithPhoneNumberDTO(
            phone_number= "9866546440", country_code="+91",
            password="iBC@2091", username=username)

        accounts_storage.check_user_exists_with_phone_number.side_effect = \
            UsernameAlreadyExistsException
        with pytest.raises(UsernameAlreadyExistsException):
            registration_interactor.create_account_with_phone_number(
                create_account_dto)
        accounts_storage.create_account_with_phone_number.assert_not_called()

    @pytest.mark.parametrize('username,exception_message',
                             TestCaseParameters.username_and_exception_messages)
    def test_create_account_with_phone_number_invalid_username(
            self, set_up, username, exception_message):
        accounts_storage, registration_interactor = set_up

        create_account_dto = CreateAccountWithPhoneNumberDTO(
            phone_number="9866546440", country_code="+91",
            password="iBC@2091", username=username)

        with pytest.raises(CustomException) as exception:
            registration_interactor.create_account_with_phone_number(
                create_account_dto)
        TestsUtils.assert_custom_exception(exception_message, exception)
        accounts_storage.create_account_with_phone_number.assert_not_called()

    @pytest.mark.parametrize('phone_number,country_code', [
        ("98765", "+91")])
    def test_create_account_with_phone_number_invalid_phone_number(
            self, set_up_with_phone_number_module, phone_number, country_code):
        accounts_storage, registration_interactor, phone_number_module = \
            set_up_with_phone_number_module

        create_account_dto = CreateAccountWithPhoneNumberDTO(
            phone_number=phone_number, country_code=country_code,
            password="iBC@2091")

        phone_number_module.validate.side_effect = \
            InvalidPhoneNumberException(
                message=UNABLE_TO_PARSE_PHONE_NUMBER.message,
                exception_type=UNABLE_TO_PARSE_PHONE_NUMBER.code)
        with pytest.raises(InvalidPhoneNumberException):
            registration_interactor.create_account_with_phone_number(
                create_account_dto)
        accounts_storage.create_account_with_phone_number.assert_not_called()

    @pytest.mark.parametrize('password,exception_message',
                             TestCaseParameters.password_and_exception_messages)
    def test_create_account_with_phone_number_invalid_password(
            self, set_up, password, exception_message):
        accounts_storage, registration_interactor = set_up

        create_account_dto = CreateAccountWithPhoneNumberDTO(
            phone_number="9866546440", country_code="+91", password=password)

        with pytest.raises(CustomException) as exception:
            registration_interactor.create_account_with_phone_number(
                create_account_dto)
        TestsUtils.assert_custom_exception(exception_message, exception)
        accounts_storage.create_account_with_phone_number.assert_not_called()
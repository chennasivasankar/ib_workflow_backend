from uuid import uuid4

import pytest
from mock import create_autospec

from ib_users.exceptions.registration_exceptions import \
    AccountWithThisEmailAlreadyExistsException, UsernameAlreadyExistsException
from ib_users.interactors.registration.email_registration_interactor import \
    EmailRegistrationInteractor
from ib_users.interactors.presenters.registration_presenter import \
    RegistrationPresenter
from ib_users.interactors.registration.DTOs.registration_dtos import \
    CreateAccountWithEmailDTO
from ib_users.interactors.storages.user_accounts_storage import \
    UserAccountsStorage
from ib_users.tests.interactors.registration.constants import \
    TestCaseParameters
from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException


class TestCreateAccountWithEmail:
    @pytest.fixture
    def set_up(self):
        accounts_storage = create_autospec(UserAccountsStorage)
        presenter = create_autospec(RegistrationPresenter)
        registration_interactor = EmailRegistrationInteractor(
            accounts_storage, presenter)
        return accounts_storage, registration_interactor

    @pytest.fixture
    def set_up_with_presenter(self):
        accounts_storage = create_autospec(UserAccountsStorage)
        presenter = create_autospec(RegistrationPresenter)
        registration_interactor = EmailRegistrationInteractor(
            accounts_storage, presenter)
        return accounts_storage, registration_interactor, presenter

    @pytest.mark.parametrize('email,password', [
        ("praneetha.moturi@ibhubs.co", "iBC@2091")])
    def test_create_account_with_email(
            self, set_up_with_presenter, email, password):
        accounts_storage, registration_interactor, presenter = \
            set_up_with_presenter

        user_uuid = uuid4()
        accounts_storage.create_account_with_email.return_value = user_uuid

        create_account_dto = CreateAccountWithEmailDTO(email=email,
                                                       password=password)
        registration_interactor.create_account_with_email(create_account_dto)

        accounts_storage.create_account_with_email.assert_called_once_with(
            create_account_dto)
        presenter.get_user_id.assert_called_once_with(user_uuid)

    @pytest.mark.parametrize('email,password,username', [
        ("praneetha.moturi@ibhubs.co", "iBC@2091", "praneetha")])
    def test_create_account_with_email_and_username(
            self, set_up, email, password, username):

        accounts_storage, registration_interactor = set_up

        create_account_dto = CreateAccountWithEmailDTO(
            email=email, password=password, username=username)
        registration_interactor.create_account_with_email(create_account_dto)

        accounts_storage.create_account_with_email.assert_called_once_with(
            create_account_dto)

    @pytest.mark.parametrize('email', ["praneetha", "@@", "",
                                       "praneetha@...."])
    def test_create_account_with_email_invalid_email(
            self, set_up, email):
        accounts_storage, registration_interactor = set_up

        create_account_dto = CreateAccountWithEmailDTO(
            email=email, password="iBC@2091")

        with pytest.raises(CustomException) as exception:
            registration_interactor.create_account_with_email(
                create_account_dto)
        from ib_users.exceptions.custom_exception_constants import INVALID_EMAIL
        TestsUtils.assert_custom_exception(INVALID_EMAIL, exception)

    @pytest.mark.parametrize('username,exception_message',
                             TestCaseParameters.username_and_exception_messages)
    def test_create_account_with_email_invalid_username(
            self, set_up, username, exception_message):
        accounts_storage, registration_interactor = set_up

        create_account_dto = CreateAccountWithEmailDTO(
            email="praneetha@ibhubs.co", password="iBC@2091", username=username
        )

        with pytest.raises(CustomException) as exception:
            registration_interactor.create_account_with_email(
                create_account_dto)
        TestsUtils.assert_custom_exception(exception_message, exception)
        accounts_storage.create_account_with_email.assert_not_called()

    @pytest.mark.parametrize('password,exception_message',
                             TestCaseParameters.password_and_exception_messages)
    def test_create_account_with_email_invalid_password(
            self,set_up, password, exception_message):
        accounts_storage, registration_interactor = set_up

        create_account_dto = CreateAccountWithEmailDTO(
            email="praneetha@ibhubs.co", password=password)

        with pytest.raises(CustomException) as exception:
            registration_interactor.create_account_with_email(
                create_account_dto)
        TestsUtils.assert_custom_exception(exception_message, exception)
        accounts_storage.create_account_with_email.assert_not_called()

    def test_create_account_with_email_already_registered(
            self, set_up):
        accounts_storage, registration_interactor = set_up

        create_account_dto = CreateAccountWithEmailDTO(
            email="praneetha@ibhubs.co", password="iBC@2091")


        accounts_storage.check_user_exists_with_email.side_effect = \
            AccountWithThisEmailAlreadyExistsException
        with pytest.raises(AccountWithThisEmailAlreadyExistsException):
            registration_interactor.create_account_with_email(
                create_account_dto)

        accounts_storage.create_account_with_email.assert_not_called()

    @pytest.mark.parametrize('username', ["praneetha"])
    def test_create_account_with_email_username_already_registered(
            self, set_up, username):
        accounts_storage, registration_interactor = set_up

        create_account_dto = CreateAccountWithEmailDTO(
            email="praneetha@ibhubs.co", password="iBC@2091", username=username
        )

        accounts_storage.check_user_exists_with_email.side_effect = \
            UsernameAlreadyExistsException
        with pytest.raises(UsernameAlreadyExistsException):
            registration_interactor.create_account_with_email(
                create_account_dto)

        accounts_storage.create_account_with_email.assert_not_called()



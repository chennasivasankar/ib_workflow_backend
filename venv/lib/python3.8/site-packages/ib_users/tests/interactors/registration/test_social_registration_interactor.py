from uuid import uuid4

import pytest
from mock import create_autospec

from ib_users.constants.user_account_constants import SocialAccountProviderType
from ib_users.exceptions.registration_exceptions import \
    InvalidSocialDetailsException, \
    AccountWithSocialDetailsAlreadyExistsException, \
    AccountWithFBDetailsAlreadyExistsException, InvalidFBDetailsException
from ib_users.interactors import SocialRegistrationInteractor
from ib_users.interactors.presenters.registration_presenter import \
    RegistrationPresenter
from ib_users.interactors.storages.user_social_accounts_storage import \
    UserSocialAccountsStorage
from ib_users.interactors.third_party.social_account import SocialAccount


class TestCreateAccountWithSocialDetails:

    @staticmethod
    def create_account_with_social_details_test_util(
            set_up_with_presenter_social_sdk,
            social_id, social_provider, **kwargs):
        accounts_storage, registration_interactor, presenter, social_sdk = \
            set_up_with_presenter_social_sdk
        user_uuid = uuid4()

        social_sdk.get_social_id.return_value = social_id
        accounts_storage.create_account_with_social_details.return_value = \
            user_uuid

        registration_interactor.create_account_with_social_details(
            social_provider=social_provider, **kwargs)

        accounts_storage.create_account_with_social_details \
            .assert_called_once_with(social_id, social_provider)

        presenter.get_user_id.assert_called_once_with(user_uuid)

    @pytest.fixture
    def set_up(self):
        accounts_storage = create_autospec(UserSocialAccountsStorage)
        presenter = create_autospec(RegistrationPresenter)
        social_sdk = create_autospec(SocialAccount)
        registration_interactor = SocialRegistrationInteractor(
            accounts_storage, presenter, social_sdk)
        return accounts_storage, registration_interactor

    @pytest.fixture
    def set_up_with_presenter_social_sdk(self):
        accounts_storage = create_autospec(UserSocialAccountsStorage)
        presenter = create_autospec(RegistrationPresenter)
        social_sdk = create_autospec(SocialAccount)
        registration_interactor = SocialRegistrationInteractor(
            accounts_storage, presenter, social_sdk)
        return accounts_storage, registration_interactor, presenter, social_sdk

    @pytest.mark.parametrize(
        'access_token, social_id, social_provider',
        [("123456abc", "abc1", SocialAccountProviderType.FACEBOOK.value),
         ("123456abc", "abc2", SocialAccountProviderType.GOOGLE.value)])
    def test_create_account_with_social_details(
            self, set_up_with_presenter_social_sdk,
            access_token, social_id, social_provider):
        TestCreateAccountWithSocialDetails. \
            create_account_with_social_details_test_util(
            set_up_with_presenter_social_sdk, social_id, social_provider,
            access_token=access_token)

    @pytest.mark.parametrize(
        'access_token, secret_token, social_id',
        [("123456abc", "dadasd", "abc"),
         ("123456abc", "dsdadad", "abc1"),
         ("123456abc", "dasdasdad", "abc2")])
    def test_create_account_with_social_details_for_twitter(
            self, set_up_with_presenter_social_sdk,
            access_token, secret_token, social_id):
        TestCreateAccountWithSocialDetails. \
            create_account_with_social_details_test_util(
            set_up_with_presenter_social_sdk, social_id,
            SocialAccountProviderType.TWITTER.value,
            access_token=access_token,
            secret_token=secret_token)

    @pytest.mark.parametrize('access_token, exception, social_provider',
                             [("123456abc",
                               InvalidFBDetailsException(),
                               SocialAccountProviderType.FACEBOOK.value)])
    def test_create_account_with_invalid_social_details(
            self, set_up_with_presenter_social_sdk,
            access_token, exception, social_provider):
        accounts_storage, registration_interactor, presenter, socail_sdk = \
            set_up_with_presenter_social_sdk

        socail_sdk.get_social_id.side_effect = exception

        with pytest.raises(InvalidSocialDetailsException):
            registration_interactor.create_account_with_social_details(
                social_provider=social_provider, access_token=access_token)

        accounts_storage.create_account_with_social_details.assert_not_called()

    @pytest.mark.parametrize('access_token, exception, social_provider',
                             [("123456abc",
                               AccountWithFBDetailsAlreadyExistsException(),
                               SocialAccountProviderType.FACEBOOK.value)])
    def test_create_account_with_already_registered_social_details(
            self, set_up, access_token, exception, social_provider):
        accounts_storage, registration_interactor = set_up

        accounts_storage.check_social_details_is_registered.side_effect = \
            exception
        with pytest.raises(AccountWithSocialDetailsAlreadyExistsException):
            registration_interactor.create_account_with_social_details(
                social_provider=social_provider,
                access_token=access_token)

        accounts_storage.create_account_with_social_details.assert_not_called()

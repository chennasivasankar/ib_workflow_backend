from uuid import uuid4

import pytest
from mock import create_autospec

from ib_users.interactors.presenters.registration_presenter import \
    RegistrationPresenter
from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage


from ib_users.interactors.registration.username_registration_interactor import \
    UsernameRegistrationInteractor
from ib_users.tests.interactors.registration.constants import \
    TestCaseParameters
from ib_users.utils.tests_utils import TestsUtils
from ib_users.validators.base_validator import CustomException


class TestCreateAccountWithUsername:
    @pytest.fixture
    def set_up(self):
        accounts_storage = create_autospec(UserAccountsStorage)
        presenter = create_autospec(RegistrationPresenter)
        registration_interactor = UsernameRegistrationInteractor(
            accounts_storage, presenter)
        return accounts_storage, registration_interactor

    @pytest.fixture
    def set_up_with_presenter(self):
        accounts_storage = create_autospec(UserAccountsStorage)
        presenter = create_autospec(RegistrationPresenter)
        registration_interactor = UsernameRegistrationInteractor(
            accounts_storage, presenter)
        return accounts_storage, registration_interactor, presenter

    @pytest.mark.parametrize('username,password', [
        ("praneetha", "iBC@2091")])
    def test_create_account_with_username(
            self, set_up_with_presenter, username, password):
        accounts_storage, registration_interactor, presenter = \
            set_up_with_presenter
        user_uuid = uuid4()
        accounts_storage.create_account_with_username.return_value = user_uuid
        registration_interactor.create_account_with_username(
            username, password)
        accounts_storage.create_account_with_username.assert_called_once_with(
            username, password)
        presenter.get_user_id.assert_called_once_with(user_uuid)

    @pytest.mark.parametrize('username,exception_message',
                             TestCaseParameters.username_and_exception_messages)
    def test_create_account_with_username_invalid_username(
            self, set_up, username, exception_message):
        accounts_storage, registration_interactor = set_up

        with pytest.raises(CustomException) as exception:
            registration_interactor.create_account_with_username(username,
                                                                 "iBC@2091")
        TestsUtils.assert_custom_exception(exception_message, exception)

        accounts_storage.create_account_with_username.assert_not_called()


    @pytest.mark.parametrize('password,exception_message',
                             TestCaseParameters.password_and_exception_messages)
    def test_create_account_with_username_invalid_password(
            self,set_up, password, exception_message):
        accounts_storage, registration_interactor = set_up
        with pytest.raises(CustomException) as exception:
            registration_interactor.create_account_with_username("praneetha",
                                                                 password)
        TestsUtils.assert_custom_exception(exception_message, exception)
        accounts_storage.create_account_with_username.assert_not_called()

    @pytest.mark.parametrize('username,password', [
        ("praneetha", "iBC@2091")])
    def test_create_account_with_username_already_registered(
            self, set_up, username, password):
        accounts_storage, registration_interactor = set_up

        from ib_users.exceptions.registration_exceptions import \
            UsernameAlreadyExistsException

        accounts_storage.check_user_exists_with_username.side_effect = \
            UsernameAlreadyExistsException
        with pytest.raises(UsernameAlreadyExistsException):
            registration_interactor.create_account_with_username(username,
                                                                 password)

        accounts_storage.create_account_with_username.assert_not_called()
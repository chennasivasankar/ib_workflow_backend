from mock import create_autospec
import pytest

from ib_users.exceptions.registration_exceptions import AccountWithThisEmailAlreadyExistsException
from ib_users.interactors.exceptions.user_profile import EmailAlreadyLinkedException
from ib_users.interactors.third_party.otp_service import OTPService


def test_verify_user_email():
    from ib_users.interactors.user_profile_interactor import UserProfileInteractor
    from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage
    from ib_users.interactors.storages.user_profile_storage import UserProfileStorage
    from ib_users.interactors.presenters.user_profile_presenter import UserProfilePresenter

    otp_service = create_autospec(OTPService)
    storage_mock = create_autospec(UserProfileStorage)
    presenter_mock = create_autospec(UserProfilePresenter)
    accounts_storage_mock = create_autospec(UserAccountsStorage)
    user_profile_interactor = UserProfileInteractor(
        storage=storage_mock, presenter=presenter_mock)
    user_id = "1"

    storage_mock.get_user_email.return_value = "test@example.com"

    user_profile_interactor.verify_user_email(
        accounts_storage=accounts_storage_mock,
        otp_service=otp_service,
        user_id=user_id)

    accounts_storage_mock.check_user_exists_with_email \
        .assert_called_once_with(email="test@example.com")

    otp_service.send_otp_to_user_email \
        .assert_called_once()


def test_verify_email_does_not_exist_error():
    from ib_users.interactors.user_profile_interactor import UserProfileInteractor
    from ib_users.interactors.exceptions.user_profile import EmailDoesNotExistException
    from ib_users.interactors.storages.user_profile_storage import UserProfileStorage
    from ib_users.interactors.presenters.user_profile_presenter import UserProfilePresenter
    from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage
    from ib_users.constants.user_profile.error_messages import EMAIL_DOES_NOT_EXIST

    otp_service = create_autospec(OTPService)
    storage_mock = create_autospec(UserProfileStorage)
    presenter_mock = create_autospec(UserProfilePresenter)
    accounts_storage_mock = create_autospec(UserAccountsStorage)
    user_profile_interactor = UserProfileInteractor(
        storage=storage_mock, presenter=presenter_mock)

    user_id = "1"

    storage_mock.get_user_email.return_value = None

    email_does_not_exist_exception = \
        EmailDoesNotExistException(message=EMAIL_DOES_NOT_EXIST,
                                   exception_type="EMAIL_DOES_NOT_EXIST")

    with pytest.raises(EmailDoesNotExistException) as exception:
        user_profile_interactor.verify_user_email(
            otp_service=otp_service,
            accounts_storage=accounts_storage_mock, user_id=user_id)

        accounts_storage_mock.check_user_exists_with_email.assert_not_called()

        otp_service.send_otp_to_user_email.assert_not_called()

        # assert exception.args == email_does_not_exist_exception.args


def test_verify_email_already_linked_error():
    from ib_users.interactors.user_profile_interactor import UserProfileInteractor
    from ib_users.interactors.exceptions.user_profile import EmailAlreadyLinkedException
    from ib_users.interactors.storages.user_profile_storage import UserProfileStorage
    from ib_users.interactors.presenters.user_profile_presenter import UserProfilePresenter
    from ib_users.constants.custom_exception_messages import EMAIL_ALREADY_IN_USE
    from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage
    from ib_users.exceptions.registration_exceptions import AccountWithThisEmailAlreadyExistsException
    otp_service = create_autospec(OTPService)

    storage_mock = create_autospec(UserProfileStorage)
    presenter_mock = create_autospec(UserProfilePresenter)
    accounts_storage_mock = create_autospec(UserAccountsStorage)
    user_profile_interactor = UserProfileInteractor(
        storage=storage_mock, presenter=presenter_mock)

    user_id = "1"

    storage_mock.get_user_email.return_value = "test@example.com"

    email_already_linked_exception = \
        EmailAlreadyLinkedException(message=EMAIL_ALREADY_IN_USE.message,
                                    exception_type=EMAIL_ALREADY_IN_USE.code)
    accounts_storage_mock.check_user_exists_with_email.side_effect = AccountWithThisEmailAlreadyExistsException
    with pytest.raises(EmailAlreadyLinkedException) as exception:
        user_profile_interactor.verify_user_email(
            accounts_storage=accounts_storage_mock, otp_service=otp_service, user_id=user_id)

        accounts_storage_mock.check_user_exists_with_email.assert_called_once()

        otp_service.send_otp_to_user_email.assert_not_called()

        assert exception.args == email_already_linked_exception.args


def test_verify_and_link_email_to_account():
    from ib_users.interactors.user_profile_interactor import UserProfileInteractor
    from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage
    from ib_users.interactors.storages.user_profile_storage import UserProfileStorage
    from ib_users.interactors.presenters.user_profile_presenter import UserProfilePresenter

    otp_service = create_autospec(OTPService)
    storage_mock = create_autospec(UserProfileStorage)
    presenter_mock = create_autospec(UserProfilePresenter)
    accounts_storage_mock = create_autospec(UserAccountsStorage)
    user_profile_interactor = UserProfileInteractor(
        storage=storage_mock, presenter=presenter_mock)
    user_id = "1"
    otp = "123456"

    user_profile_interactor.verify_and_link_user_email_to_account(
        accounts_storage=accounts_storage_mock,
        otp_service=otp_service,
        user_id=user_id,
        otp=otp)

    otp_service.validate_otp_send_to_email.assert_called_once()

    accounts_storage_mock.link_email_to_user.assert_called_once()

    storage_mock.update_user_email_verified.assert_called_once()


def test_link_email_to_account():
    from ib_users.interactors.user_profile_interactor import UserProfileInteractor
    from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage
    from ib_users.interactors.storages.user_profile_storage import UserProfileStorage
    from ib_users.interactors.presenters.user_profile_presenter import UserProfilePresenter

    storage_mock = create_autospec(UserProfileStorage)
    presenter_mock = create_autospec(UserProfilePresenter)
    accounts_storage_mock = create_autospec(UserAccountsStorage)
    user_profile_interactor = UserProfileInteractor(
        storage=storage_mock, presenter=presenter_mock)
    user_id = "1"

    user_profile_interactor.link_user_email_to_account(
        accounts_storage=accounts_storage_mock,
        user_id=user_id)
    accounts_storage_mock.link_email_to_user.assert_called_once()

    storage_mock.update_user_email_verified.assert_called_once()


def test_link_email_to_account_email_already_linked():
    from ib_users.interactors.user_profile_interactor import UserProfileInteractor
    from ib_users.interactors.storages.user_accounts_storage import UserAccountsStorage
    from ib_users.interactors.storages.user_profile_storage import UserProfileStorage
    from ib_users.interactors.presenters.user_profile_presenter import UserProfilePresenter

    storage_mock = create_autospec(UserProfileStorage)
    presenter_mock = create_autospec(UserProfilePresenter)
    accounts_storage_mock = create_autospec(UserAccountsStorage)
    user_profile_interactor = UserProfileInteractor(
        storage=storage_mock, presenter=presenter_mock)
    user_id = "1"
    accounts_storage_mock.check_user_exists_with_email.side_effect = \
        AccountWithThisEmailAlreadyExistsException
    accounts_storage_mock.get_user_email.return_value = 'email@example.com'

    with pytest.raises(EmailAlreadyLinkedException):
        user_profile_interactor.link_user_email_to_account(
            accounts_storage=accounts_storage_mock,
            user_id=user_id)
    accounts_storage_mock.check_user_exists_with_email.assert_called_once()

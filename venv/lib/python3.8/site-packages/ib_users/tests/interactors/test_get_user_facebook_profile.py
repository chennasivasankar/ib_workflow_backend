import pytest
from mock import create_autospec


def test_get_facebook_profile_when_access_token_is_valid_return_profile():
    from ib_users.interactors.facebook_interactor import FacebookProfileDTO, \
        FacebookInteractor

    valid_access_token = "access-token"
    facebook_profile = FacebookProfileDTO(
        id="123",
        name="Facebook name",
        birthday="1994-01-07",
        gender="Male",
        link="https://www.facebook.com/username"
    )

    from ib_users.interactors.third_party.facebook_provider import FacebookLibrary
    facebook_mock = create_autospec(FacebookLibrary)
    facebook_mock.get_facebook_profile.return_value = facebook_profile

    from ib_users.interactors.presenters.facebook_presenter import \
        FacebookPresenter
    presenter_mock = create_autospec(FacebookPresenter)

    facebook_interactor = FacebookInteractor(facebook_provider=facebook_mock)

    facebook_interactor.get_facebook_profile(
        access_token=valid_access_token, presenter=presenter_mock)
    facebook_mock.get_facebook_profile.assert_called_once_with(
        access_token=valid_access_token)
    presenter_mock.get_facebook_profile.assert_called_once_with(
        facebook_profile)


def test_get_facebook_profile_when_access_token_is_invalid_throw_exception():
    from ib_users.interactors.facebook_interactor import FacebookInteractor

    invalid_access_token = "invalid-access-token"
    from ib_users.interactors.exceptions.facebook_library import \
        InvalidAccessTokenException
    from ib_users.constants.facebook_library.error_messages import \
        INVALID_ACCESS_TOKEN
    invalid_access_token_exception = InvalidAccessTokenException(
        INVALID_ACCESS_TOKEN)

    from ib_users.interactors.third_party.facebook_provider import FacebookLibrary
    facebook_mock = create_autospec(FacebookLibrary)
    facebook_mock.get_facebook_profile.side_effect = \
        invalid_access_token_exception

    from ib_users.interactors.presenters.facebook_presenter import \
        FacebookPresenter
    presenter_mock = create_autospec(FacebookPresenter)

    facebook_interactor = FacebookInteractor(facebook_provider=facebook_mock)

    with pytest.raises(InvalidAccessTokenException) as exception:
        facebook_interactor.get_facebook_profile(
            access_token=invalid_access_token, presenter=presenter_mock)
        facebook_mock.get_facebook_profile.assert_called_once_with(
            access_token=invalid_access_token)
        presenter_mock.get_facebook_profile.assert_not_called()

        assert exception.args == invalid_access_token_exception.args

import pytest
import phonenumbers
from phonenumbers import NumberParseException


class TestPhonenumbers:
    @pytest.mark.parametrize('phone_number,country_code',
                             [("9866546440", "+91")])
    def test_phonenumbers_parse(self, phone_number: str, country_code: str):
        phone_number_with_country_code = f"{country_code}{phone_number}"

        parse_response = phonenumbers.parse(phone_number_with_country_code)
        assert parse_response.country_code == int(country_code[1:])
        assert parse_response.national_number == int(phone_number)

    @pytest.mark.parametrize('phone_number,country_code',
                             [("9866546440", ""),
                              ("abc", "+91"),
                              ("", ""),
                              ("1", "+91")])
    def test_phonenumbers_parse_invalid_number(
            self, phone_number: str, country_code: str):
        phone_number_with_country_code = f"{country_code}{phone_number}"

        with pytest.raises(NumberParseException):
            phonenumbers.parse(phone_number_with_country_code)

    @pytest.mark.parametrize('phone_number,country_code,is_valid',
                             [("9866546440", "+91", True),
                              ("98765", "+91", False)])
    def test_phonenumbers_is_valid_number(self,
            phone_number: str, country_code: str, is_valid: bool):
        phone_number_with_country_code = f"{country_code}{phone_number}"

        parse_response = phonenumbers.parse(phone_number_with_country_code)
        assert phonenumbers.is_valid_number(parse_response) == is_valid

import pytest

from ib_users.exceptions.custom_exception_constants import \
    USERNAME_CAN_NOT_BE_EMPTY, USER_NAME_SPECIAL_CHARACTERS, \
    USER_MAX_NAME_LENGTH_IS
from ib_users.validators.base_validator import \
    CustomException
from ib_users.utils.tests_utils import TestsUtils

from ib_users.validators import UsernameValidator
# custom exception ref: https://www.codementor.io/sheena/how-to-write-python-custom-exceptions-du107ufv9
# regex ref: https://stackoverflow.com/questions/1323364/in-python-how-to-check-if-a-string-only-contains-certain-characters
@pytest.mark.parametrize("username,exception_message", [
    ("", USERNAME_CAN_NOT_BE_EMPTY),
    ("a" * 16, USER_MAX_NAME_LENGTH_IS),
    ("abU" * 15, USER_MAX_NAME_LENGTH_IS),
    ("jac&k^al%", USER_NAME_SPECIAL_CHARACTERS),
    ("jac&", USER_NAME_SPECIAL_CHARACTERS),
    ("jack^al", USER_NAME_SPECIAL_CHARACTERS)])
def test_invalid_usernames(username, exception_message):

    with pytest.raises(
            CustomException) as username_invalid_exception:
        UsernameValidator.validate(username)
    TestsUtils.assert_custom_exception(
        exception_message,
        username_invalid_exception)


@pytest.mark.parametrize("username", ["j" * 15, "tim+-.", "h_jim@gmail.com"])
def test_valid_usernames(username):
    UsernameValidator.validate(username)

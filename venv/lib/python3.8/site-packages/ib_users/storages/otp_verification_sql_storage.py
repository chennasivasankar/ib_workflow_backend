from django.db.models import F
from ib_users.interactors.storages.otp_verification_storage import \
    OTPVerificationStorage, GetOTPDetailsDTO

from ib_users.utils.dtos import PhoneNumberDTO
from ib_users.constants.otp_verification_constants import OTPStatus, \
     OTP_MAX_RETRIES_COUNT, VerificationType

from ib_users.models import OTPVerification, OTPWhitelist


class OTPVerificationSQLStorage(OTPVerificationStorage):
    def get_otp_status(self, phone_number_dto: PhoneNumberDTO,
                       verification_type: VerificationType):
        from datetime import datetime
        otp_verification_list = OTPVerification.objects.filter(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            verification_type=verification_type.value
        )

        if otp_verification_list.count() == 0:
            return OTPStatus.NOT_REQUESTED

        otp_unexpired_list = otp_verification_list.filter(
            expiry_datetime__gt=datetime.now()
        )
        if otp_unexpired_list.count():
            return OTPStatus.ACTIVE
        else:
            return OTPStatus.EXPIRED

    def create_otp_verification(self, phone_number_dto: PhoneNumberDTO,
                           otp: str, expiry_time_in_sec: int,
                           verification_type: VerificationType):
        from datetime import datetime, timedelta
        OTPVerification.objects.create(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            otp=otp,
            expiry_datetime=datetime.now() +
                            timedelta(seconds=expiry_time_in_sec),
            verification_type=verification_type.value
        )

    def update_otp_details(self, phone_number_dto: PhoneNumberDTO,
                           otp: str, expiry_time_in_sec: int,
                           verification_type: VerificationType):
        otp_list = OTPVerification.objects.filter(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            verification_type=verification_type.value
        )
        from datetime import datetime, timedelta
        otp_expiry_time = datetime.now() + timedelta(seconds=expiry_time_in_sec)
        otp_list.update(
            otp=otp,
            expiry_datetime=otp_expiry_time
        )

    def is_exceeded_max_retries_count(self,
                                    phone_number_dto: PhoneNumberDTO,
                                      verification_type: VerificationType) -> \
            bool:
        otp_verification_list = OTPVerification.objects.filter(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            verification_type=verification_type.value
        ).values_list('retries_count', flat=True)
        if otp_verification_list.count() > 0:
            retries_count = otp_verification_list[0]
            return retries_count == OTP_MAX_RETRIES_COUNT
        return False

    def get_otp_details(self, phone_number_dto: PhoneNumberDTO,
                        verification_type: VerificationType) \
            -> GetOTPDetailsDTO:
        otp_verification_list = OTPVerification.objects.filter(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            verification_type=verification_type.value
        ).values_list('otp', flat=True)

        otp = otp_verification_list[0]
        return GetOTPDetailsDTO(
            otp=otp
        )

    def is_otp_matched(self, phone_number_dto: PhoneNumberDTO,
                otp_to_be_verified: str, verification_type: VerificationType):
        return OTPVerification.objects.filter(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            otp=otp_to_be_verified,
            verification_type=verification_type.value
        ).exists()

    def increase_retries_count_by_one(self, phone_number_dto: PhoneNumberDTO,
                                      verification_type: VerificationType):
        OTPVerification.objects.filter(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            verification_type=verification_type.value
        ).update(retries_count=F('retries_count') + 1)

    def get_otp_status_by_email(self, email: str,
                                verification_type: VerificationType):
        from datetime import datetime
        otp_verification_list = OTPVerification.objects.filter(
            email=email,
            verification_type=verification_type.value
        )
        if otp_verification_list.count() == 0:
            return OTPStatus.NOT_REQUESTED

        otp_unexpired_list = otp_verification_list.filter(
            expiry_datetime__gt=datetime.now()
        )
        if otp_unexpired_list.count():
            return OTPStatus.ACTIVE
        else:
            return OTPStatus.EXPIRED

    def create_otp_verification_for_email(self, email: str,
                                      otp: str, expiry_time_in_sec: int,
                                      verification_type: VerificationType):
        from datetime import datetime, timedelta
        OTPVerification.objects.create(
            email=email,
            otp=otp,
            expiry_datetime=datetime.now() +
                            timedelta(seconds=expiry_time_in_sec),
            verification_type=verification_type.value
        )

    def update_otp_details_by_email(self, email: str, otp: str,
                                    expiry_time_in_sec: int,
                                    verification_type:VerificationType):
        otp_list = OTPVerification.objects.filter(
            email=email,
            verification_type=verification_type.value
        )
        from datetime import datetime, timedelta
        otp_expiry_time = datetime.now() + timedelta(
            seconds=expiry_time_in_sec)
        otp_list.update(
            otp=otp,
            expiry_datetime=otp_expiry_time
        )

    def get_otp_details_by_email(self, email: str,
                    verification_type: VerificationType) -> GetOTPDetailsDTO:

        otp_verification_list = OTPVerification.objects.filter(
            email=email,
            verification_type=verification_type.value
        ).values_list('otp', flat=True)

        otp = otp_verification_list[0]
        return GetOTPDetailsDTO(
            otp=otp
        )

    def is_exceeded_max_retries_count_for_email(self, email: str,
                            verification_type: VerificationType) -> bool:
        otp_verification_list = OTPVerification.objects.filter(
            email=email,
            verification_type=verification_type.value
        ).values_list('retries_count', flat=True)

        if otp_verification_list.count() > 0:
            retries_count = otp_verification_list[0]
            return retries_count >= OTP_MAX_RETRIES_COUNT

    def is_otp_matched_for_email(self, email: str,
                            otp_to_be_verified: str,
                            verification_type: VerificationType) -> bool:

        return OTPVerification.objects.filter(
            email=email,
            otp=otp_to_be_verified,
            verification_type=verification_type.value
        ).exists()


    def increase_retries_count_by_one_for_email(self, email: str,
                            verification_type: VerificationType):
        OTPVerification.objects.filter(
            email=email,
            verification_type=verification_type.value
        ).update(retries_count=F('retries_count') + 1)

    def is_phone_number_whitelisted(self,
                                phone_number_dto: PhoneNumberDTO) -> bool:
        return OTPWhitelist.objects.filter(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number
        ).exists()


    def get_configured_otp_for_phone_number(self,
                        phone_number_dto: PhoneNumberDTO) -> GetOTPDetailsDTO:
        otp_whitelist = OTPWhitelist.objects.filter(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number
        )
        if otp_whitelist.count() == 1:
            otp_whitelist_obj = otp_whitelist[0]
            otp = otp_whitelist_obj.otp
            return GetOTPDetailsDTO(
                otp=otp
            )

    def is_email_whitelisted(self, email: str):
        return OTPWhitelist.objects.filter(
            email=email
        ).exists()

    def get_configured_otp_for_email(self, email: str):
        otp_whitelist = OTPWhitelist.objects.filter(
            email=email
        )
        if otp_whitelist.count() == 1:
            otp_whitelist_obj = otp_whitelist[0]
            otp = otp_whitelist_obj.otp
            return GetOTPDetailsDTO(
                otp=otp
            )

    def reset_retries_count(self, phone_number_dto: PhoneNumberDTO,
                            verification_type: VerificationType):
        OTPVerification.objects.filter(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number,
            verification_type=verification_type.value
        ).update(retries_count=0)

    def reset_retries_count_for_email(self, email: str,
                            verification_type: VerificationType):
        OTPVerification.objects.filter(
            email=email,
            verification_type=verification_type.value
        ).update(retries_count=0)

    def get_otp_status_by_user_id(self, user_id: str,
                                  verification_type: VerificationType):
        from datetime import datetime
        otp_verification_list = OTPVerification.objects.filter(
            user_id=user_id,
            verification_type=verification_type.value
        )

        if otp_verification_list.count() == 0:
            return OTPStatus.NOT_REQUESTED

        otp_unexpired_list = otp_verification_list.filter(
            expiry_datetime__gt=datetime.now()
        )
        if otp_unexpired_list.count():
            return OTPStatus.ACTIVE
        else:
            return OTPStatus.EXPIRED

    def update_otp_details_by_user_id(self, user_id: str,
                                        otp: str,
                                        expiry_time_in_sec: int,
                                        verification_type: VerificationType):
        otp_list = OTPVerification.objects.filter(
            user_id=user_id,
            verification_type=verification_type.value
        )
        from datetime import datetime, timedelta
        otp_expiry_time = datetime.now() + timedelta(
            seconds=expiry_time_in_sec)
        otp_list.update(
            otp=otp,
            expiry_datetime=otp_expiry_time
        )

    def create_otp_verification_by_user_id(self, user_id: str,
                                        otp: str,
                                        expiry_time_in_sec: int,
                                        verification_type: VerificationType):
        from datetime import datetime, timedelta
        OTPVerification.objects.create(
            user_id=user_id,
            otp=otp,
            expiry_datetime=datetime.now() +
                            timedelta(seconds=expiry_time_in_sec),
            verification_type=verification_type.value
        )

    def get_otp_details_by_user_id(self, user_id: str,
                                   verification_type: VerificationType) ->\
            GetOTPDetailsDTO:
        otp_verification_list = OTPVerification.objects.filter(
            user_id=user_id,
            verification_type=verification_type.value
        ).values_list('otp', flat=True)

        otp = otp_verification_list[0]
        return GetOTPDetailsDTO(
            otp=otp
        )

    def is_otp_matched_for_user_id(self, user_id: str,
                                   otp_to_be_verified: str,
                                   verification_type: VerificationType) -> \
            bool:
        return OTPVerification.objects.filter(
            user_id=user_id,
            otp=otp_to_be_verified,
            verification_type=verification_type.value
        ).exists()


    def increase_retries_count_by_one_for_user_id(self, user_id: str,
                                        verification_type: VerificationType):
        otp_list = OTPVerification.objects.filter(
            user_id=user_id,
            verification_type=verification_type.value
        )
        if otp_list.count() > 0:
            otp = otp_list[0]
            otp.retries_count += 1
            otp.save()

    def reset_retries_count_for_user_id(self, user_id: str,
                                        verification_type: VerificationType):
        OTPVerification.objects.filter(
            user_id=user_id,
            verification_type=verification_type.value
        ).update(retries_count=0)

    def is_exceeded_max_retries_count_for_user_id(self, user_id: str,
                                        verification_type: VerificationType):
        otp_verification_list = OTPVerification.objects.filter(
            user_id=user_id,
            verification_type=verification_type.value
        ).values_list('retries_count', flat=True)

        if otp_verification_list.count() > 0:
            retries_count = otp_verification_list[0]
            return retries_count == OTP_MAX_RETRIES_COUNT
        return False

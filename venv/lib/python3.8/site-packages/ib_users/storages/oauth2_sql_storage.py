from typing import List

from ib_users.exceptions.oauth2_exceptions import RefreshTokenNotFound, \
    AccessTokenNotFoundException
from ib_users.interactors.storages.oauth2_storage import OAuth2Storage, \
    RefreshTokenDTO, AccessTokenDTO


# noinspection PyPackageRequirements


class OAuth2SQLStorage(OAuth2Storage):

    def get_or_create_default_application(self, user_id):
        from oauth2_provider.models import Application
        from oauth2_provider.models import AbstractApplication
        from django.conf import settings

        is_created = False
        application_name = settings.DEFAULT_OAUTH_APPLICATION_NAME
        try:
            application = Application.objects.get(name=application_name)
        except Application.DoesNotExist:
            application = Application.objects.create(
                client_id=settings.DEFAULT_OAUTH_CLIENT_ID,
                user_id=user_id,
                client_type=AbstractApplication.CLIENT_CONFIDENTIAL,
                authorization_grant_type=AbstractApplication.GRANT_PASSWORD,
                client_secret=settings.DEFAULT_OAUTH_CLIENT_SECRET,
                name=application_name
            )
            is_created = True

        return self._convert_application_to_its_dto(application=application), \
               is_created

    def create_access_token(self, user_id, application_id, scopes,
                            expiry_in_seconds):
        import datetime
        from oauth2_provider.models import AccessToken

        access_token = self._generate_access_token()
        expires = datetime.datetime.now() + datetime.timedelta(
            seconds=expiry_in_seconds
        )
        access_token_object = AccessToken(
            user_id=user_id,
            token=access_token,
            application_id=application_id,
            expires=expires,
            scope=scopes
        )
        access_token_object.save()

        return self._convert_access_token_to_its_dto(access_token_object)

    def create_refresh_token(self, user_id, application_id, access_token_id):
        from oauth2_provider.models import RefreshToken

        refresh_token = self._generate_access_token()
        refresh_token_object = RefreshToken(
            user_id=user_id, token=refresh_token,
            application_id=application_id,
            access_token_id=access_token_id
        )
        refresh_token_object.save()

        return self._convert_refresh_token_to_its_dto(refresh_token_object)

    def get_refresh_token(self, refresh_token: str) -> RefreshTokenDTO:
        refresh_token_object = self._get_refresh_token_object(
            refresh_token=refresh_token
        )
        return self._convert_refresh_token_to_its_dto(refresh_token_object)

    def get_refresh_tokens_from_access_tokens(
            self, access_tokens: List[str]) -> List[str]:
        from oauth2_provider.models import RefreshToken
        refresh_tokens = list(RefreshToken.objects.filter(
            access_token__token__in=access_tokens).values_list(
            'token', flat=True))
        return refresh_tokens

    def expire_access_token_bulk(self, access_tokens: List[str]) -> None:
        from oauth2_provider.models import AccessToken
        access_token_objects = AccessToken.objects.filter(
            token__in=access_tokens)
        from django.utils import timezone
        access_token_objects.update(
            expires=timezone.now()
        )

    def expire_all_user_access_tokens(self, user_id):
        from oauth2_provider.models import AccessToken
        from django.utils import timezone

        access_token_objects = AccessToken.objects.filter(
            user_id=user_id, expires__gte=timezone.now()
        )
        from django.utils import timezone
        access_token_objects.update(
            expires=timezone.now()
        )

    def expire_refresh_token_bulk(self, refresh_tokens: List[str]) -> None:
        from oauth2_provider.models import RefreshToken
        refresh_token_objects = RefreshToken.objects.filter(
            token__in=refresh_tokens)
        from django.utils import timezone
        refresh_token_objects.update(
            revoked=timezone.now()
        )

    def expire_all_user_refresh_tokens(self, user_id):
        from oauth2_provider.models import RefreshToken
        refresh_token_objects = RefreshToken.objects.filter(
            user_id=user_id, revoked=None)
        from django.utils import timezone
        refresh_token_objects.update(
            revoked=timezone.now()
        )

    def get_access_token(self, access_token: str) -> AccessTokenDTO:
        from oauth2_provider.models import AccessToken as AccessTokenModel
        try:
            access_token = AccessTokenModel.objects.get(token=access_token)
        except AccessTokenModel.DoesNotExist:
            raise AccessTokenNotFoundException()

        return self._convert_access_token_to_its_dto(
            access_token_obj=access_token
        )

    @staticmethod
    def _generate_access_token():
        import string
        import random
        from builtins import range

        size = 30
        chars = string.ascii_uppercase + string.digits + string.ascii_lowercase
        return ''.join(random.choice(chars) for _ in range(size))

    @staticmethod
    def _convert_application_to_its_dto(application):
        from ib_users.interactors.storages.oauth2_storage import Application
        return Application(application_id=application.id)

    @staticmethod
    def _convert_refresh_token_to_its_dto(
            refresh_token_obj) -> RefreshTokenDTO:
        return RefreshTokenDTO(
            token=refresh_token_obj.token,
            access_token=refresh_token_obj.access_token,
            user_id=str(refresh_token_obj.user_id),
            revoked=refresh_token_obj.revoked
        )

    @staticmethod
    def _convert_access_token_to_its_dto(
            access_token_obj) -> AccessTokenDTO:
        from datetime import datetime
        now = datetime.now()
        return AccessTokenDTO(
            access_token_id=access_token_obj.id,
            token=access_token_obj.token,
            expires=(access_token_obj.expires - now).seconds,
            user_id=access_token_obj.user_id
        )

    @staticmethod
    def _get_refresh_token_object(refresh_token: str):
        from oauth2_provider.models import RefreshToken
        try:
            refresh_token_object = RefreshToken.objects.get(
                token=refresh_token
            )
            return refresh_token_object
        except RefreshToken.DoesNotExist:
            raise RefreshTokenNotFound()

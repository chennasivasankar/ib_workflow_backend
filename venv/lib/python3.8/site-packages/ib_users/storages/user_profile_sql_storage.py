from typing import List

from ib_users.models import UserProfile
from ib_users.interactors.storages.user_profile_storage import \
    UserProfileStorage
from ib_users.interactors.user_profile_interactor import GetUserProfileDTO, \
    UserProfileDTO, CreateUserProfileDTO


class UserProfileSQLStorage(UserProfileStorage):
    def create_user_profile(self, user_profile: CreateUserProfileDTO,
                            account_id: str) -> int:
        user_profile_object = UserProfile(
            name=user_profile.name,
            gender=user_profile.gender,
            dob=user_profile.dob,
            is_phone_number_verified=user_profile.is_phone_number_verified,
            is_email_verified=user_profile.is_email_verified,
            profile_pic_url=user_profile.profile_pic_url,
            phone_number=user_profile.phone_number,
            country_code=user_profile.country_code,
            email=user_profile.email,
            language_preference=user_profile.language_preference,
            account_id=account_id
        )
        user_profile_object.save()
        return user_profile_object.id

    def _get_user_profile_dto_from_model(self, user_profile: UserProfile) \
            -> GetUserProfileDTO:

        return GetUserProfileDTO(
            user_id=str(user_profile.account.user_id),
            name=user_profile.name,
            gender=user_profile.gender,
            dob=user_profile.dob,
            profile_pic_url=user_profile.profile_pic_url,
            phone_number=user_profile.phone_number,
            country_code=user_profile.country_code,
            email=user_profile.email,
            is_email_verified=user_profile.is_email_verified,
            is_phone_number_verified=user_profile.is_phone_number_verified,
            language_preference=user_profile.language_preference,
        )

    def get_user_profile(self, user_id: int) -> GetUserProfileDTO:
        user_profile = UserProfile.objects.select_related('account').get(
            account__user_id=user_id)
        return self._get_user_profile_dto_from_model(user_profile=user_profile)

    def get_user_profiles(self, user_ids: List[int]) -> \
            List[GetUserProfileDTO]:
        user_profiles = UserProfile.objects.filter(
            account__user_id__in=user_ids
        ).select_related('account')
        return [
            self._get_user_profile_dto_from_model(user_profile=user_profile)
            for user_profile in user_profiles
        ]

    def update_user_profile(
            self, user_id: int, update_profile_data: UserProfileDTO) \
            -> GetUserProfileDTO:

        user_profile_object = UserProfile.objects.get(account__user_id=user_id)
        if update_profile_data.name is not None:
            user_profile_object.name = update_profile_data.name

        if update_profile_data.gender is not None:
            user_profile_object.gender = update_profile_data.gender

        if update_profile_data.dob is not None:
            user_profile_object.dob = update_profile_data.dob

        if update_profile_data.profile_pic_url is not None:
            user_profile_object.profile_pic_url \
                = update_profile_data.profile_pic_url

        if update_profile_data.phone_number is not None:
            user_profile_object.phone_number = update_profile_data.phone_number

        if update_profile_data.country_code is not None:
            user_profile_object.country_code \
                = update_profile_data.country_code

        if update_profile_data.email is not None:
            user_profile_object.email = update_profile_data.email

        if update_profile_data.language_preference is not None:
            user_profile_object.language_preference \
                = update_profile_data.language_preference

        if update_profile_data.is_phone_number_verified is not None:
            user_profile_object.is_phone_number_verified = \
                update_profile_data.is_phone_number_verified

        if update_profile_data.is_email_verified is not None:
            user_profile_object.is_email_verified = \
                update_profile_data.is_email_verified

        user_profile_object.save()

        return self._get_user_profile_dto_from_model(
            user_profile=user_profile_object)

    def update_user_phone_number_verified(self, user_id: str):
        UserProfile.objects.filter(account__user_id=user_id).\
            update(is_phone_number_verified=True)

    def get_user_country_code_and_phone_number(self, user_id: str):
        user = UserProfile.objects.get(account__user_id=user_id)
        return user.country_code, user.phone_number

    def update_user_email_verified(self, user_id: str):
        UserProfile.objects.filter(account__user_id=user_id).\
            update(is_email_verified=True)

    def get_user_email(self, user_id: str):
        user = UserProfile.objects.get(account__user_id=user_id)
        return user.email

    def does_user_exists(self, user_id: str):
        return UserProfile.objects.filter(account__user_id=user_id).exists()

    def is_any_user_id_invalid(self, user_ids: List[str]) -> bool:
        user_ids = list(set(user_ids))

        user_profiles_count = \
            UserProfile.objects.filter(account__user_id__in=user_ids).count()

        user_ids_count = len(user_ids)

        return user_profiles_count != user_ids_count

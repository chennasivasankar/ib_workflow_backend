import uuid
from datetime import datetime, timedelta

from ib_users.interactors.exceptions.user_credentials_exceptions import \
    InvalidTokenException, TokenExpiredException
from ib_users.interactors.storages.user_password_reset_token_storage import \
    UserPasswordResetTokenStorage
from ib_users.models.user_password_reset_token import UserPasswordResetToken


class UserPasswordResetTokenStorageImpl(UserPasswordResetTokenStorage):
    def store_reset_password_token(self, user_id: str, token: str,
                                   expiry_time_in_seconds: int):
        UserPasswordResetToken.objects.create(
            user_id =uuid.UUID(user_id),
            token=token,
            expires_at=datetime.now() + timedelta(seconds=expiry_time_in_seconds)
        )

    def is_reset_password_token_active(self, user_id: str) -> (bool, str):
        try:
            user_token = UserPasswordResetToken.objects.get(
                user_id=uuid.UUID(user_id))
            try:
                self._check_token_is_expired(user_token)
                return True, user_token.token
            except TokenExpiredException:
                user_token.delete()
                return False, ""
        except UserPasswordResetToken.DoesNotExist:
            return False, ""

    def update_expiry_time(self, user_id: str, expiry_time_in_seconds: int):
        user_token = UserPasswordResetToken.objects.get(
            user_id=uuid.UUID(user_id))
        user_token.expires_at = datetime.now() + \
                                timedelta(seconds=expiry_time_in_seconds)
        user_token.save()

    def verify_token(self, user_id: str, token: str):
        try:
            user_token = UserPasswordResetToken.objects.get(user_id=user_id)
            if user_token.token != token:
                raise InvalidTokenException
            else:
                self._check_token_is_expired(user_token)
        except UserPasswordResetToken.DoesNotExist:
            raise InvalidTokenException

    @staticmethod
    def _check_token_is_expired(user_token):
        if user_token.expires_at <= datetime.now():
            raise TokenExpiredException


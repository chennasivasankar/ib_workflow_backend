from functools import reduce
from typing import List

from ib_users.utils.dtos import PhoneNumberDTO
from ib_users.interactors.storages.otp_blacklist_storage import OTPBlacklistStorage
from ib_users.models import OTPBlacklist


class OTPBlacklistStorageImpl(OTPBlacklistStorage):

    def is_phone_number_blacklisted(self, phone_number_dto: PhoneNumberDTO):
        return OTPBlacklist.objects.filter(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number
        ).exists()

    def is_email_blacklisted(self, email: str):
        return OTPBlacklist.objects.filter(
            email=email
        ).exists()

    def add_phone_number_to_black_list(self, phone_number_dto: PhoneNumberDTO):
        OTPBlacklist.objects.create(
            country_code=phone_number_dto.country_code,
            phone_number=phone_number_dto.phone_number
        )

    def add_email_to_blacklist(self, email: str):
        OTPBlacklist.objects.create(
            email=email
        )

    def remove_phone_numbers_from_blacklist(self,
                                    phone_number_dtos: List[PhoneNumberDTO]):

        from django.db.models import Q
        from operator import __or__ as OR
        q_obj_list = []
        for phone_number_dto in phone_number_dtos:
            current_q_obj = Q(country_code=phone_number_dto.country_code,
                              phone_number=phone_number_dto.phone_number)
            if current_q_obj not in q_obj_list:
                q_obj_list.append(current_q_obj)

        OTPBlacklist.objects.filter(reduce(OR, q_obj_list)).delete()

    def remove_emails_from_blacklist(self, emails: List[str]):
        OTPBlacklist.objects.filter(
            email__in=emails
        ).delete()


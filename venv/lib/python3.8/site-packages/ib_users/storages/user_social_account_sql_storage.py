from ib_users.constants.user_account_constants import \
    SocialAccountProviderType
from ib_users.exceptions.custom_exception_constants import TWITTER_NOT_LINKED, \
    GOOGLE_NOT_LINKED, FB_NOT_LINKED
from ib_users.exceptions.registration_exceptions import \
    AccountWithSocialDetailsAlreadyExistsException
from ib_users.interactors.storages.user_social_accounts_storage import \
    UserSocialAccountsStorage
from ib_users.models import UserSocialAccount, UserAccount
from ib_users.storages.user_account_sql_base_storage import \
    UserAccountSQLBaseStorage
from ib_users.validators.base_validator import CustomException


class UserSocialAccountsSQLStorage(UserAccountSQLBaseStorage,
                                   UserSocialAccountsStorage):
    def check_social_details_is_registered(
            self, social_id: str, social_provider: str):

        if UserSocialAccount.objects.filter(social_id=social_id).exists():
            raise \
                AccountWithSocialDetailsAlreadyExistsException(social_provider)

    def create_account_with_social_details(self, social_id: str,
                                           social_provider: str):
        return self._create_account(social_id=social_id,
                                    provider_type=social_provider)

    def get_user_id_given_twitter_social_id(self, social_id: str):
        user_account = self._get_user_account_given_twitter_social_id(
            social_id)
        return str(user_account.user_id)

    def get_user_id_given_google_social_id(self, social_id: str):
        user_account = self._get_user_account_given_google_social_id(
            social_id)
        return str(user_account.user_id)

    def get_user_id_given_fb_social_id(self, social_id: str):
        user_account = self._get_user_account_given_fb_social_id(
            social_id)
        return str(user_account.user_id)

    def link_social_account(self, social_id: str,
                            social_account_type: str, user_id: str):
        user_account = UserAccount.objects.get(user_id=user_id)
        try:
            user_social_account = UserSocialAccount.objects.get(
                provider_type=social_account_type,
                user_account=user_account
            )
            user_social_account.social_id = social_id
            user_social_account.save()
        except UserSocialAccount.DoesNotExist:
            UserSocialAccount.objects.create(
                provider_type=social_account_type,
                user_account=user_account,
                social_id=social_id
            )

    def is_social_account_available(self, user_id: str,
                                    social_account_type: str):
        return UserSocialAccount.objects.\
            filter(user_account__user_id=user_id).exists()

    def unlink_social_account(self, user_id: str, social_account_type: str):
        linked_social_account = UserSocialAccount.objects \
            .filter(user_account__user_id=user_id) \
            .filter(provider_type=social_account_type)
        linked_social_account.update(social_id=None)

    @staticmethod
    def _get_user_account_given_twitter_social_id(social_id: str):
        try:
            user_social_account = UserSocialAccount.objects.get(
                social_id=social_id,
                provider_type=SocialAccountProviderType.TWITTER.value)
            return user_social_account.user_account
        except UserSocialAccount.DoesNotExist:
            raise CustomException.from_exception_message_DTO(
                TWITTER_NOT_LINKED)

    @staticmethod
    def _get_user_account_given_google_social_id(social_id: str):
        try:
            user_social_account = UserSocialAccount.objects.get(
                social_id=social_id,
                provider_type=SocialAccountProviderType.GOOGLE.value)
            return user_social_account.user_account
        except UserSocialAccount.DoesNotExist:
            raise CustomException.from_exception_message_DTO(
                GOOGLE_NOT_LINKED)

    @staticmethod
    def _get_user_account_given_fb_social_id(social_id: str):
        try:
            user_social_account = UserSocialAccount.objects.get(
                social_id=social_id,
                provider_type=SocialAccountProviderType.FACEBOOK.value)
            return user_social_account.user_account
        except UserSocialAccount.DoesNotExist:
            raise CustomException.from_exception_message_DTO(
                FB_NOT_LINKED)

    @staticmethod
    def _create_account(social_id: str,
                        provider_type: str):
        import uuid
        registered_account = UserAccount.objects.create(
            user_id=uuid.uuid4()
        )
        UserSocialAccount.objects.create(
            user_account=registered_account,
            provider_type=provider_type,
            social_id=social_id
        )
        return str(registered_account.user_id)

    @staticmethod
    def _check_is_registered(social_id: str, exception_to_raise):
        if UserSocialAccount.objects.filter(social_id=social_id).exists():
            raise exception_to_raise

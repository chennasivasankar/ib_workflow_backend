import uuid
from typing import List

from ib_users.exceptions.custom_exception_constants import ExceptionMessages
from ib_users.interactors.storages.referrals_storage import ReferralsStorage, \
    ReferralDTO, ReferralDetailsDTO
from ib_users.models import ReferralDetails


class ReferralsSQLStorage(ReferralsStorage):

    def get_referral_details(
            self,
            referral_code: str) -> ReferralDTO:
        referral_details = ReferralDetails.objects.get(
            referral_code=referral_code)

        return ReferralDTO(
            user_id=referral_details.user_account.user_id,
            referral_limit=referral_details.referral_limit
        )

    def is_referral_code_linked_to_user(self, referral_code: str) -> bool:
        try:
            referral_details = ReferralDetails.objects.get(
                referral_code=referral_code)
            return referral_details.user_account is not None
        except ReferralDetails.DoesNotExist:
            return False

    def get_referrer_id(self, user_id: str) -> str:
        from ib_users.exceptions.referral_exceptions import \
            ReferrerDetailsDoesNotExist

        referral_details = self._get_referral_details(user_id=user_id)
        if referral_details.referred_by is None:
            raise ReferrerDetailsDoesNotExist(
                message=ExceptionMessages.REFERRER_DETAILS_DOES_NOT_EXIST)

        return referral_details.referred_by.user_account.user_id

    def is_referrer_exists(self, user_id: str) -> bool:
        referral_details = ReferralDetails.objects.get(
            user_account__user_id=user_id
        )
        return referral_details.referred_by is not None

    def get_referral_code(self, user_id: str) -> str:
        referral_details = self._get_referral_details(user_id=user_id)
        return referral_details.referral_code

    def create_new_referral_codes(self, referral_codes: list) -> \
            List[ReferralDetailsDTO]:
        from ib_users.constants.referral_constants import REFERRAL_LIMIT
        referral_details = [ReferralDetails(referral_code=referral_code,
                                            referral_limit=REFERRAL_LIMIT)
                            for referral_code in referral_codes]
        ReferralDetails.objects.bulk_create(referral_details)

        created_referral_codes_qs = ReferralDetails.objects.filter(
            referral_code__in=referral_codes)

        referral_code_details_dtos = [ReferralDetailsDTO(
            referral_code=referral_details.referral_code,
            referral_limit=referral_details.referral_limit
        ) for referral_details in created_referral_codes_qs.all()]

        return referral_code_details_dtos

    def link_user_with_referrer(self, user_id: str, referral_code: str):
        referrer_details = self.get_user_by_referral_code \
            (referral_code=referral_code)
        referral_details = self._get_referral_details(user_id=user_id)
        referral_details.referred_by_id = referrer_details.id
        referral_details.save()

    def is_referral_limit_reached(self, user_id: str):
        referral_details = self._get_referral_details(user_id=user_id)
        referrals_count = referral_details.referrer_details.all().count()
        return referral_details.referral_limit <= referrals_count

    def create_referral_details(self, user_id: uuid, referral_code: str):
        from ib_users.constants.referral_constants import REFERRAL_LIMIT
        referral_details = ReferralDetails.objects. \
            create(referral_code=referral_code,
                   referral_limit=REFERRAL_LIMIT,
                   user_account_id=user_id
                   )
        return referral_details.id

    @staticmethod
    def _get_referral_details(user_id):
        from ib_users.exceptions.referral_exceptions import \
            ReferralDetailsDoesNotExist

        try:
            referral_details = ReferralDetails.objects.get(
                user_account_id=user_id)
            return referral_details
        except ReferralDetails.DoesNotExist:
            raise ReferralDetailsDoesNotExist \
                (message=ExceptionMessages.REFERRAL_DETAILS_DOES_NOT_EXIST)

    def get_user_by_referral_code(self, referral_code):
        from ib_users.exceptions.referral_exceptions import \
            ReferralDetailsDoesNotExist
        try:
            referral_details = ReferralDetails.objects.get(
                referral_code=referral_code)
            return referral_details
        except ReferralDetails.DoesNotExist:
            from ib_users.exceptions.custom_exception_constants import \
                ExceptionMessages
            raise ReferralDetailsDoesNotExist(
                ExceptionMessages.REFERRAL_DETAILS_DOES_NOT_EXIST)

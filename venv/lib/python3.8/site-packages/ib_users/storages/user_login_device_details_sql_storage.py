from typing import List

from ib_users.exceptions.custom_exception_constants import \
    USER_NOT_MAPPED_TO_DEVICE, DEVICE_ID_DOES_NOT_EXIST, \
    ACCESS_TOKEN_NOT_MAPPED_TO_DEVICE
from ib_users.interactors.storages.user_login_device_details_storage import \
    UserLoginDeviceDetailsStorage, UserDeviceIdAndAccessTokenDTO, \
    UserIdAndDeviceIdDTO, UserDeviceLoginDTO
from ib_users.models import UserLoginDeviceDetails
from ib_users.validators.base_validator import CustomException


class UserLoginDeviceDetailsSQLStorage(UserLoginDeviceDetailsStorage):

    def create_given_login_device_mapping_in_storage(self,
                                                     user_device_login_dto: UserDeviceLoginDTO):
        UserLoginDeviceDetails.objects.create(
            user_account_id=user_device_login_dto.user_id,
            access_token=user_device_login_dto.access_token,
            device_id=user_device_login_dto.device_id)

    def update_access_token_in_access_token_and_device_id_map(self,
                                                              old_access_token: str,
                                                              new_access_token: str):
        UserLoginDeviceDetails.objects.filter(
            access_token=old_access_token).update(
            access_token=new_access_token)

    def remove_all_device_login_details_of_given_user(self, user_id):
        UserLoginDeviceDetails.objects.filter(
            user_account__user_id=user_id).delete()

    def remove_device_login_details_of_user_except_of_given_access_tokens(self,
                                                                          user_id,
                                                                          access_tokens):
        UserLoginDeviceDetails.objects.filter(user_account__user_id=user_id). \
            exclude(access_token__in=access_tokens).delete()

    def get_all_devices_login_details_of_given_user(self, user_id) \
            -> List[UserDeviceIdAndAccessTokenDTO]:
        user_device_login_objs = UserLoginDeviceDetails.objects.filter(
            user_account__user_id=user_id)

        # if not user_device_login_objs.exists():
        #     raise CustomException.from_exception_message_DTO(
        #         USER_NOT_MAPPED_TO_DEVICE)
        user_login_device_map_dto_list = \
            [UserDeviceIdAndAccessTokenDTO(item.device_id, item.access_token)
             for item in user_device_login_objs]
        return user_login_device_map_dto_list

    def remove_given_user_and_device_mapping(
            self,
            user_id_and_device_id_dto: UserIdAndDeviceIdDTO):
        UserLoginDeviceDetails.objects.filter(
            user_account__user_id=user_id_and_device_id_dto.user_id,
            device_id=user_id_and_device_id_dto.device_id).delete()

    def check_if_given_login_device_details_mapping_exists(
            self,
            user_id_and_device_id_dto: UserDeviceLoginDTO):
        user_login_device_details_objs = UserLoginDeviceDetails.objects.filter(
            device_id=user_id_and_device_id_dto.device_id)
        if not user_login_device_details_objs.exists():
            raise CustomException.from_exception_message_DTO(
                DEVICE_ID_DOES_NOT_EXIST)
        self._check_user_mapping_for_given_login_device_objs(
            user_login_device_details_objs=user_login_device_details_objs,
            user_logout_dto=user_id_and_device_id_dto)
        self._check_access_token_mapping_for_given_login_device_objs(
            user_login_device_details_objs=user_login_device_details_objs,
            user_logout_dto=user_id_and_device_id_dto)

    @staticmethod
    def _check_user_mapping_for_given_login_device_objs(
            user_login_device_details_objs,
            user_logout_dto: UserDeviceLoginDTO):
        if not user_login_device_details_objs.filter(
                user_account__user_id=user_logout_dto.user_id).exists():
            raise CustomException.from_exception_message_DTO(
                USER_NOT_MAPPED_TO_DEVICE)

    @staticmethod
    def _check_access_token_mapping_for_given_login_device_objs(
            user_login_device_details_objs,
            user_logout_dto: UserDeviceLoginDTO):
        try:
            user_login_device_details_objs.get(
                access_token=user_logout_dto.access_token)
        except UserLoginDeviceDetails.DoesNotExist:
            raise CustomException.from_exception_message_DTO(
                ACCESS_TOKEN_NOT_MAPPED_TO_DEVICE)

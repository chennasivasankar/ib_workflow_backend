from ib_users.exceptions.custom_exception_constants import ExceptionMessages
from ib_users.exceptions.referral_exceptions import \
    MaximumReferralsReached, \
    InvalidReferralCode, ReferralDetailsDoesNotExist, \
    ReferrerDetailsDoesNotExist, ReferrerAlreadyExists
from ib_users.interactors.storages.referrals_storage import ReferralsStorage
from ib_users.interactors.presenters.referrals_presenter import \
    ReferralsPresenter


class ReferralsInteractor:
    def __init__(self, storage: ReferralsStorage,
                 presenter: ReferralsPresenter):
        self.storage = storage
        self.presenter = presenter

    def get_user_id_and_referral_limit(self, referral_code: str):
        self._is_referral_code_assigned_to_user(
            referral_code=referral_code
        )

        referral_dto = \
            self.storage.get_referral_details(
                referral_code=referral_code)

        referral_json = self.presenter.get_user_id_and_referral_limit(
            referral_dto)
        return referral_json

    def get_referrer_user_id(self, user_id: str) -> str:
        referrer_id = self.storage.get_referrer_id(
            user_id=user_id
        )

        return referrer_id

    def get_or_create_referral_code(self, user_id: str) -> str:
        try:
            referral_code = self.storage.get_referral_code(
                user_id=user_id
            )
        except ReferralDetailsDoesNotExist:
            referral_code = self._create_referral_details_for_user(
                user_id=user_id)
        return referral_code

    def link_user_with_referrer(
            self, user_id: str, referral_code: str):
        self._is_given_referral_code_and_user_referral_code_are_equal(
            user_id=user_id, referral_code=referral_code)
        try:
            self._is_referral_code_assigned_to_user(
                referral_code=referral_code)
            referrer_details = self.storage.get_referral_details(
                referral_code=referral_code)
            self._is_referral_limit_reached(
                user_id=referrer_details.user_id
            )
        except InvalidReferralCode:
            pass

        self._is_referrer_exists(
            user_id=user_id)
        self.storage.link_user_with_referrer(
            user_id=user_id, referral_code=referral_code)

    def get_new_referral_codes(self, no_of_referral_codes):
        referral_codes = []
        index = 0
        counter = 0
        while index < no_of_referral_codes:
            referral_code = ''
            try:
                counter += 1
                from ib_users.utils.referral_code_utils import \
                    generate_new_referral_code
                referral_code = generate_new_referral_code()
                self.storage.get_user_by_referral_code(
                    referral_code=referral_code)
            except ReferralDetailsDoesNotExist:
                referral_codes.append(referral_code)
                index += 1
            finally:
                from ib_users.constants.referral_constants import \
                    REFERRAL_CODE_GENERATION_MAX_LIMIT
                if counter >= REFERRAL_CODE_GENERATION_MAX_LIMIT:
                    break

        referral_details_dtos = self.storage.create_new_referral_codes(
            referral_codes)
        response_referral_codes = \
            self.presenter. \
                get_referral_details(referral_code_dtos=referral_details_dtos)
        return response_referral_codes

    def _is_referral_code_assigned_to_user(
            self, referral_code: str):
        if not self.storage.is_referral_code_linked_to_user(referral_code):
            raise InvalidReferralCode(ExceptionMessages.INVALID_REFFERAL_CODE)

    def _is_given_referral_code_and_user_referral_code_are_equal(
            self, user_id: str, referral_code: str):
        user_referral_code = self.storage.get_referral_code(
            user_id=user_id
        )
        if user_referral_code == referral_code:
            raise InvalidReferralCode(
                ExceptionMessages.CANT_LINK_TO_OWN_REFERRAL_CODE)

    def _is_referral_limit_reached(
            self, user_id: str):
        if self.storage.is_referral_limit_reached(
                user_id=user_id):
            raise MaximumReferralsReached(ExceptionMessages.
                                          MAXIMUM_REFERRAL_LIMIT_REACHED)

    def _create_referral_details_for_user(self, user_id: str) -> str:
        from ib_users.utils.referral_code_utils import \
            generate_new_referral_code
        referral_code = generate_new_referral_code()
        self.storage.create_referral_details(user_id=user_id,
                                             referral_code=referral_code)
        return referral_code

    def _is_referrer_exists(self, user_id: str):
        is_referrer_exists = self.storage.is_referrer_exists(user_id=user_id)
        if is_referrer_exists:
            raise ReferrerAlreadyExists(
                message=
                ExceptionMessages.USER_ALREADY_LINKED_WITH_ANOTHER_REFERRER)

from ib_users.constants.otp_constants import OTPMessageFormatConstants
from ib_users.constants.user_credential_constants import \
    UserCredentialConstants
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.storages.user_password_reset_token_storage import \
    UserPasswordResetTokenStorage
from ib_users.interactors.third_party.email_sender import \
    EmailSender
from ib_users.interactors.user_credentials.reset_password_link_generator\
    .reset_password_link_generator import \
    ResetPasswordLinkGenerator
from ib_users.validators import EmailValidator
from ib_users.interactors.third_party.token_generator \
    import TokenGenerator


class SendLinkToResetPasswordEmailInteractor:
    def __init__(self,
                 account_storage: UserAccountsStorage,
                 token_storage: UserPasswordResetTokenStorage,
                 token_generator: TokenGenerator,
                 email_sender: EmailSender):
        self.account_storage = account_storage
        self.token_storage = token_storage
        self.token_generator = token_generator
        self.email_sender = email_sender

    def send_link_to_reset_password_email(self, email: str):
        EmailValidator.validate(email)
        user = self.account_storage.get_user_given_email(
            email=email)
        is_active, token = self.token_storage.is_reset_password_token_active(
            user_id=user.user_id)

        if is_active:
            self.token_storage.update_expiry_time(
                user_id=user.user_id,
                expiry_time_in_seconds=
                UserCredentialConstants.RESET_PASSWORD_TOKEN_EXPIRY_TIME_SECONDS)
        else:
            token = self.token_generator.get_token(user=user)
            self.token_storage.store_reset_password_token(
                user_id=user.user_id, token=token,
                expiry_time_in_seconds=
                UserCredentialConstants.RESET_PASSWORD_TOKEN_EXPIRY_TIME_SECONDS)

        link = ResetPasswordLinkGenerator.get_reset_password_link(token)
        self.email_sender.send_reset_password_link(email, link)



from ib_users.constants.user_credential_constants import \
    UserCredentialConstants
from ib_users.interactors.DTOs.common_dtos import PhoneNumberDTO
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.storages.user_password_reset_token_storage import \
    UserPasswordResetTokenStorage
from ib_users.interactors.third_party.sms_sender import SMSSender
from ib_users.interactors.user_credentials.reset_password_link_generator\
    .reset_password_link_generator import \
    ResetPasswordLinkGenerator
from ib_users.interactors.validators.phone_number_validator import \
    PhoneNumberValidator
from ib_users.interactors.third_party.token_generator \
    import TokenGenerator


class SendLinkToResetPasswordPhoneNumberInteractor:
    def __init__(self,
                 account_storage: UserAccountsStorage,
                 token_storage: UserPasswordResetTokenStorage,
                 token_generator: TokenGenerator,
                 phone_number_validator: PhoneNumberValidator,
                 sms_sender: SMSSender):
        self.account_storage = account_storage
        self.token_storage = token_storage
        self.token_generator = token_generator
        self.phone_number_validator = phone_number_validator
        self.sms_sender = sms_sender

    def send_link_to_reset_password_phone_number(
            self, phone_number_dto: PhoneNumberDTO):
        self.phone_number_validator.validate(phone_number_dto)
        user = self.account_storage.get_user_given_phone_number(
            phone_number_dto=phone_number_dto)
        is_active, token = self.token_storage.is_reset_password_token_active(
            user_id=user.user_id)

        if is_active:
            self.token_storage.update_expiry_time(
                user_id=user.user_id,
                expiry_time_in_seconds=
                UserCredentialConstants.RESET_PASSWORD_TOKEN_EXPIRY_TIME_SECONDS)
        else:
            token = self.token_generator.get_token(user)
            self.token_storage.store_reset_password_token(
                user_id=user.user_id, token=token,
                expiry_time_in_seconds=
                UserCredentialConstants.RESET_PASSWORD_TOKEN_EXPIRY_TIME_SECONDS)

        link = ResetPasswordLinkGenerator.get_reset_password_link(token)
        self.sms_sender.send_reset_password_link(
            phone_number_dto=phone_number_dto, link=link)



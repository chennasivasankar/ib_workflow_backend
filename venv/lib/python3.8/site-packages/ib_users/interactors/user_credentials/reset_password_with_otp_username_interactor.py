from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.third_party.otp_service import OTPService
from ib_users.interactors.user_credentials.DTOs.user_credentials_dtos import \
    ResetPasswordWithOTPUsernameDTO
from ib_users.utils.interactors.login_interactors_common import \
    is_phone_number_not_empty
from ib_users.validators import UsernameValidator, PasswordValidator


class ResetPasswordWithOTPUsernameInteractor:
    def __init__(
            self, storage: UserAccountsStorage, otp_service: OTPService):
        self.storage = storage
        self.otp_service = otp_service

    def reset_password_with_otp_username(
            self, reset_password_dto: ResetPasswordWithOTPUsernameDTO):
        PasswordValidator.validate(reset_password_dto.new_password)
        UsernameValidator.validate(reset_password_dto.username)
        user_contact_details = \
            self.storage.get_user_details_to_send_otp_given_username(reset_password_dto.username)
        if is_phone_number_not_empty(user_contact_details.phone_number):
            self.otp_service.validate_otp_send_to_phone_number(
                phone_number_dto=user_contact_details.phone_number,
                otp=reset_password_dto.otp)
        if user_contact_details.email:
            self.otp_service.validate_otp_send_to_email(
                email=user_contact_details.email, otp=reset_password_dto.otp)
        self.storage.update_user_password(
            user_id=user_contact_details.user_id,
            new_password=reset_password_dto.new_password)
from ib_users.interactors.storages.otp_blacklist_storage import \
    OTPBlacklistStorage
from ib_users.interactors.storages.otp_verification_storage import \
    OTPVerificationStorage
from ib_users.interactors.third_party.call_service import CallService
from ib_users.interactors.third_party.sms_sender import SMSSender
from ib_users.constants.otp_verification_constants import OTPStatus, \
    OTP_EXPIRY_TIME_IN_SEC, VerificationType, SendOTPThrough
from ib_users.exceptions.otp_verification_exceptions import ExceptionMessage, \
    MaxRetriesExceededException, OTPExpiredException, \
    InvalidOTPException
from ib_users.interactors.base_otp_verification_interactor import \
    BaseOTPVerificationInteractor
from ib_users.interactors.third_party.phone_number_validator import \
    PhoneNumberValidator
from ib_users.utils.dtos import PhoneNumberDTO
from ib_users.validators.otp_validator import validate_otp


class PhoneNumberOTPVerificationInteractor(BaseOTPVerificationInteractor):
    def __init__(self,
                 storage: OTPVerificationStorage,
                 otp_blacklist_storage: OTPBlacklistStorage,
                 verification_type: VerificationType):
        super().__init__(
            storage=storage,
            otp_blacklist_storage=otp_blacklist_storage,
            verification_type=verification_type
        )

    def verify_phone_number(self, phone_number_dto: PhoneNumberDTO,
                            phone_number_validator: PhoneNumberValidator,
                            send_otp_through: SendOTPThrough,
                            sms_sender: SMSSender,
                            call_service: CallService):
        phone_number_validator.validate(
            phone_number_dto=phone_number_dto
        )
        self._check_and_throw_exception_if_phone_number_is_blacklisted(
            phone_number_dto=phone_number_dto,
        )
        otp = self._create_or_update_phone_number_otp_verification_record(
            phone_number_dto=phone_number_dto
        )
        PhoneNumberOTPVerificationInteractor._send_otp_to_phone_number(
            phone_number_dto=phone_number_dto,
            otp=otp,
            send_otp_through=send_otp_through,
            sms_sender=sms_sender,
            call_service=call_service
        )

    def validate_otp_to_verify_phone_number(self,
                                            phone_number_dto: PhoneNumberDTO,
                                            otp_to_be_verified: str):

        validate_otp(otp_to_be_verified)
        self._check_and_throw_exception_if_max_retries_count_exceeded(
            phone_number_dto=phone_number_dto,
            verification_type=self.verification_type
        )
        self._check_and_throw_exception_if_otp_is_not_matched(
            phone_number_dto=phone_number_dto,
            otp_to_be_verified=otp_to_be_verified,
            verification_type=self.verification_type
        )
        self._check_and_throw_exception_if_otp_is_expired(
            phone_number_dto=phone_number_dto
        )
        self.storage.reset_retries_count(
            phone_number_dto=phone_number_dto,
            verification_type=self.verification_type
        )
        return True

    @staticmethod
    def _send_otp_to_phone_number(phone_number_dto: PhoneNumberDTO,
                                  otp: str,
                                  send_otp_through: SendOTPThrough,
                                  sms_sender: SMSSender,
                                  call_service: CallService):
        if send_otp_through == SendOTPThrough.SMS:
            sms_sender.send_otp(
                country_code=phone_number_dto.country_code,
                phone_number=phone_number_dto.phone_number,
                otp=otp
            )
        elif send_otp_through == SendOTPThrough.CALL:
            call_service.request_call(
                country_code=phone_number_dto.country_code,
                phone_number=phone_number_dto.phone_number,
                otp=otp
            )

    def _create_or_update_phone_number_otp_verification_record(self,
                                    phone_number_dto: PhoneNumberDTO) -> str:
        is_phone_number_whitelisted = self.storage. \
            is_phone_number_whitelisted(phone_number_dto=phone_number_dto)
        if is_phone_number_whitelisted:
            get_otp_details_dto = self.storage. \
                get_configured_otp_for_phone_number(
                phone_number_dto=phone_number_dto
            )
            otp = get_otp_details_dto.otp
        else:
            otp_status = self.storage.get_otp_status(
                phone_number_dto=phone_number_dto,
                verification_type=self.verification_type
            )
            otp = self._get_otp_from_create_or_update_phone_number_otp_verification_record(
                phone_number_dto=phone_number_dto,
                otp_status=otp_status
            )
        return otp

    def _get_otp_from_create_or_update_phone_number_otp_verification_record(
            self, phone_number_dto: PhoneNumberDTO, otp_status: OTPStatus
    ):
        new_otp = BaseOTPVerificationInteractor._generate_otp()
        if otp_status == OTPStatus.NOT_REQUESTED:
            self.storage.create_otp_verification(
                phone_number_dto=phone_number_dto,
                otp=new_otp,
                expiry_time_in_sec=OTP_EXPIRY_TIME_IN_SEC,
                verification_type=self.verification_type
            )
            return new_otp
        elif otp_status == OTPStatus.EXPIRED:
            self.storage.update_otp_details(
                phone_number_dto=phone_number_dto,
                otp=new_otp,
                expiry_time_in_sec=OTP_EXPIRY_TIME_IN_SEC,
                verification_type=self.verification_type
            )
            return new_otp
        else:
            otp_details = self.storage.get_otp_details(
                phone_number_dto=phone_number_dto,
                verification_type=self.verification_type
            )
            old_otp = otp_details.otp
            self.storage.update_otp_details(
                phone_number_dto=phone_number_dto,
                otp=old_otp,
                expiry_time_in_sec=OTP_EXPIRY_TIME_IN_SEC,
                verification_type=self.verification_type
            )
            return old_otp

    def _check_and_throw_exception_if_otp_is_expired(
                                            self,
                                            phone_number_dto: PhoneNumberDTO):
        otp_status = self.storage.get_otp_status(
            phone_number_dto=phone_number_dto,
            verification_type=self.verification_type
        )
        if otp_status == OTPStatus.EXPIRED:
            raise OTPExpiredException(
                ExceptionMessage.OTP_IS_EXPIRED
            )

    def _check_and_throw_exception_if_max_retries_count_exceeded(
                                         self,
                                         phone_number_dto: PhoneNumberDTO,
                                         verification_type: VerificationType):
        is_exceeded = self.storage.is_exceeded_max_retries_count(
            phone_number_dto=phone_number_dto,
            verification_type=verification_type
        )
        if is_exceeded:
            raise MaxRetriesExceededException(
                ExceptionMessage.RETRY_AFTER_X_DURATION
            )

    def _check_and_throw_exception_if_otp_is_not_matched(
                                         self,
                                         phone_number_dto: PhoneNumberDTO,
                                         otp_to_be_verified: str,
                                         verification_type: VerificationType):
        is_otp_matched = self.storage.is_otp_matched(
            phone_number_dto=phone_number_dto,
            otp_to_be_verified=otp_to_be_verified,
            verification_type=verification_type
        )
        if not is_otp_matched:
            self.storage.increase_retries_count_by_one(
                phone_number_dto=phone_number_dto,
                verification_type=verification_type
            )
            raise InvalidOTPException(ExceptionMessage.ENTER_A_VALID_OTP)

from typing import List

from ib_users.interactors.logout.logout_in_devices import \
    LogoutInDevices
from ib_users.interactors.third_party.user_tokens_generator import \
    UserAuthTokensGenerator
from ib_users.interactors.storages.user_login_device_details_storage import \
    UserLoginDeviceDetailsStorage


class LogoutInDevicesImpl(LogoutInDevices):

    def __init__(self, storage: UserLoginDeviceDetailsStorage,
                 login_token_generator: UserAuthTokensGenerator):
        super().__init__(storage, login_token_generator)

    def logout_in_devices_except_of_given_access_tokens(
            self,
            user_id,
            access_tokens: List[str]):
        user_devices_login_data = \
            self.storage.get_all_devices_login_details_of_given_user(user_id)

        device_ids = []
        access_tokens_to_remove = []
        for item in user_devices_login_data:
            if item.access_token not in access_tokens:
                access_tokens_to_remove.append(item.access_token)
                device_ids.append(item.device_id)

        self.login_token_generator. \
            expire_all_auth_tokens_related_to_given_list_of_access_tokens(
                access_tokens_to_remove)
        self.storage.remove_device_login_details_of_user_except_of_given_access_tokens(
            user_id=user_id, access_tokens=access_tokens_to_remove)
        return device_ids

    def logout_in_all_devices(self, user_id: str):
        user_devices_login_data = \
            self.storage.get_all_devices_login_details_of_given_user(user_id)

        device_ids = []
        access_tokens = []
        for item in user_devices_login_data:
            access_tokens.append(item.access_token)
            device_ids.append(item.device_id)

        self.login_token_generator. \
            expire_all_auth_tokens_related_to_given_list_of_access_tokens(
            access_tokens)
        self.storage.remove_all_device_login_details_of_given_user(user_id)
        return device_ids

from ib_users.constants.otp_verification_constants import OTPStatus, \
    VerificationType
from ib_users.exceptions.custom_exception_constants import OTP_NOT_REQUESTED
from ib_users.exceptions.otp_not_requested_exception import \
    OTPNotRequestException
from ib_users.interactors.storages.otp_verification_storage import \
    OTPVerificationStorage, GetOTPDetailsDTO
from ib_users.utils.dtos import PhoneNumberDTO


class UserOTPInteractor:

    def __init__(self, storage: OTPVerificationStorage):
        self.storage = storage

    def get_otp_details_for_phone_number(
            self, phone_number: str,
            country_code: str,
            verification_type: VerificationType) -> GetOTPDetailsDTO:
        phone_number_dto = PhoneNumberDTO(
            phone_number=phone_number, country_code=country_code
        )

        otp_status = self.storage.get_otp_status(
            phone_number_dto=phone_number_dto,
            verification_type=verification_type
        )
        self._handle_otp_status(otp_status)

        otp_details = self.storage.get_otp_details(
            phone_number_dto,
            verification_type=verification_type
        )
        return otp_details

    def get_otp_details_for_email(
            self, email: str,
            verification_type: VerificationType) -> GetOTPDetailsDTO:
        otp_status = self.storage.get_otp_status_by_email(
            email=email,
            verification_type=verification_type
        )
        self._handle_otp_status(otp_status)

        otp_details = self.storage.get_otp_details_by_email(
            email=email,
            verification_type=verification_type
        )
        return otp_details

    def get_otp_details_for_user_id(
            self, user_id: str,
            verification_type: VerificationType) -> GetOTPDetailsDTO:
        otp_status = self.storage.get_otp_status_by_user_id(
            user_id=user_id,
            verification_type=verification_type
        )

        self._handle_otp_status(otp_status)

        otp_details = self.storage.get_otp_details_by_user_id(
            user_id=user_id,
            verification_type=verification_type
        )

        return otp_details

    @staticmethod
    def _handle_otp_status(otp_status):
        if otp_status == OTPStatus.NOT_REQUESTED:
            raise OTPNotRequestException(
                OTP_NOT_REQUESTED.message, OTP_NOT_REQUESTED.code
            )

from ib_users.constants.otp_verification_constants import OTPStatus, \
    OTP_EXPIRY_TIME_IN_SEC, VerificationType, SendOTPThrough
from ib_users.exceptions.otp_verification_exceptions import ExceptionMessage, \
    MaxRetriesExceededException, OTPExpiredException, \
    InvalidOTPException
from ib_users.interactors.base_otp_verification_interactor import \
    BaseOTPVerificationInteractor
from ib_users.interactors.storages.otp_blacklist_storage import \
    OTPBlacklistStorage
from ib_users.interactors.storages.otp_verification_storage import \
    OTPVerificationStorage
from ib_users.interactors.third_party.call_service import CallService
from ib_users.interactors.third_party.email_sender import EmailSender
from ib_users.interactors.third_party.sms_sender import SMSSender
from ib_users.utils.dtos import PhoneNumberDTO
from ib_users.validators.otp_validator import validate_otp


class UserOTPVerificationInteractor(BaseOTPVerificationInteractor):
    def __init__(self,
                 storage: OTPVerificationStorage,
                 otp_blacklist_storage: OTPBlacklistStorage,
                 verification_type: VerificationType):
        super().__init__(
            storage=storage,
            otp_blacklist_storage=otp_blacklist_storage,
            verification_type=verification_type
        )

    def verify_user(self, phone_number_dto: PhoneNumberDTO,
                    send_otp_through: SendOTPThrough,
                    sms_sender: SMSSender,
                    call_service: CallService,
                    email: str,
                    email_sender: EmailSender,
                    user_id: str):
        if phone_number_dto:
            self._check_and_throw_exception_if_phone_number_is_blacklisted(
                phone_number_dto=phone_number_dto
            )
        if email:
            self._check_and_throw_exception_if_email_is_blacklisted(
                email=email
            )
        otp = self._create_or_update_reset_password_otp_verification_record(
            user_id=user_id
        )
        if phone_number_dto:
            UserOTPVerificationInteractor._send_otp_to_phone_number(
                phone_number_dto=phone_number_dto,
                otp=otp,
                send_otp_through=send_otp_through,
                sms_sender=sms_sender,
                call_service=call_service

            )
        if email:
            email_sender.send_otp(
                email=email,
                otp=otp
            )

    def validate_otp_to_verify_user(self, user_id: str,
                                    otp_to_be_verified: str):
        validate_otp(otp_to_be_verified)
        self. \
            _check_and_throw_exception_if_max_retries_count_exceeded_for_user_id(
            user_id=user_id,
            verification_type=self.verification_type
        )
        self._check_and_throw_exception_if_otp_is_not_matched_for_user_id(
            user_id=user_id,
            otp_to_be_verified=otp_to_be_verified,
            verification_type=self.verification_type
        )
        self._check_and_throw_exception_if_reset_password_otp_is_expired(
            user_id=user_id
        )
        self.storage.reset_retries_count_for_user_id(
            user_id=user_id,
            verification_type=self.verification_type
        )
        return True

    def _create_or_update_reset_password_otp_verification_record(self,
                                                                 user_id: str):
        otp_status = self.storage.get_otp_status_by_user_id(
            user_id=user_id,
            verification_type=self.verification_type
        )
        otp = BaseOTPVerificationInteractor._generate_otp()
        if otp_status == OTPStatus.NOT_REQUESTED:
            self.storage.create_otp_verification_by_user_id(
                user_id=user_id,
                otp=otp,
                expiry_time_in_sec=OTP_EXPIRY_TIME_IN_SEC,
                verification_type=self.verification_type
            )
        elif otp_status == OTPStatus.EXPIRED:
            self.storage.update_otp_details_by_user_id(
                user_id=user_id,
                otp=otp,
                expiry_time_in_sec=OTP_EXPIRY_TIME_IN_SEC,
                verification_type=self.verification_type
            )
        else:
            get_otp_details = self.storage.get_otp_details_by_user_id(
                user_id=user_id,
                verification_type=self.verification_type
            )
            otp = get_otp_details.otp
            self.storage.update_otp_details_by_user_id(
                user_id=user_id,
                otp=otp,
                expiry_time_in_sec=OTP_EXPIRY_TIME_IN_SEC,
                verification_type=self.verification_type
            )
        return otp

    @staticmethod
    def _send_otp_to_phone_number(phone_number_dto: PhoneNumberDTO,
                                  otp: str,
                                  send_otp_through: SendOTPThrough,
                                  sms_sender: SMSSender,
                                  call_service: CallService):
        if send_otp_through == SendOTPThrough.SMS:
            sms_sender.send_otp(
                country_code=phone_number_dto.country_code,
                phone_number=phone_number_dto.phone_number,
                otp=otp
            )
        elif send_otp_through == SendOTPThrough.CALL:
            call_service.request_call(
                country_code=phone_number_dto.country_code,
                phone_number=phone_number_dto.phone_number,
                otp=otp
            )

    def _check_and_throw_exception_if_max_retries_count_exceeded_for_user_id(
            self,
            user_id: str,
            verification_type: VerificationType):
        is_exceeded = self.storage.is_exceeded_max_retries_count_for_user_id(
            user_id=user_id,
            verification_type=verification_type
        )
        if is_exceeded:
            raise MaxRetriesExceededException(
                ExceptionMessage.RETRY_AFTER_X_DURATION
            )

    def _check_and_throw_exception_if_otp_is_not_matched_for_user_id(
            self,
            user_id: str,
            otp_to_be_verified: str,
            verification_type: VerificationType):
        is_otp_matched = self.storage.is_otp_matched_for_user_id(
            user_id=user_id,
            otp_to_be_verified=otp_to_be_verified,
            verification_type=verification_type
        )
        if not is_otp_matched:
            self.storage.increase_retries_count_by_one_for_user_id(
                user_id=user_id,
                verification_type=verification_type
            )
            raise InvalidOTPException(message=ExceptionMessage.ENTER_A_VALID_OTP)

    def _check_and_throw_exception_if_reset_password_otp_is_expired(
            self,
            user_id: str):
        otp_status = self.storage.get_otp_status_by_user_id(
            user_id=user_id,
            verification_type=self.verification_type
        )
        if otp_status == OTPStatus.EXPIRED:
            raise OTPExpiredException(
                ExceptionMessage.OTP_IS_EXPIRED
            )

from ib_users.interactors.presenters.registration_presenter import \
    RegistrationPresenter
from ib_users.interactors.registration.DTOs.registration_dtos import \
    CreateAccountWithPhoneNumberDTO
from ib_users.interactors.registration.registration_helper import RegistrationHelper
from ib_users.interactors.storages.user_accounts_storage import \
    UserAccountsStorage
from ib_users.interactors.validators.phone_number_validator import \
    PhoneNumberValidator
from ib_users.validators import PasswordValidator


class PhoneNumberRegistrationInteractor(RegistrationHelper):
    def __init__(self, accounts_storage: UserAccountsStorage,
                 presenter: RegistrationPresenter,
                 phone_numbers_validator: PhoneNumberValidator):
        super().__init__(accounts_storage, presenter)
        self.phone_numbers_validator = phone_numbers_validator

    def create_account_with_phone_number(
            self, create_account_dto:CreateAccountWithPhoneNumberDTO):
        self.phone_numbers_validator.validate(create_account_dto)
        if create_account_dto.username is not None:
            self.validate_username(create_account_dto.username)
        self.accounts_storage.check_user_exists_with_phone_number(create_account_dto)
        PasswordValidator.validate(create_account_dto.password)
        user_id = self.accounts_storage.create_account_with_phone_number(
            create_account_dto)
        return self.presenter.get_user_id(user_id)

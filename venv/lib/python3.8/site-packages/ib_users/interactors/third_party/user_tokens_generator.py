import abc
import datetime
from dataclasses import dataclass
from typing import List

from ib_users.interactors.storages.oauth2_storage import OAuth2Storage


@dataclass
class UserAuthTokensDTO:
    user_id: str
    access_token: str
    refresh_token: str
    expires_in: datetime.datetime


class UserAuthTokensGenerator:
    __metaclass__ = abc.ABCMeta

    def __init__(self, oauth2_storage: OAuth2Storage):
        self.oauth2_storage = oauth2_storage

    @abc.abstractmethod
    def create_user_auth_tokens(self, user_id, expiry_in_seconds=None) -> UserAuthTokensDTO:
        pass

    @abc.abstractmethod
    def get_updated_user_auth_tokens(self, refresh_token) -> UserAuthTokensDTO:
        pass

    @abc.abstractmethod
    def expire_all_auth_tokens_related_to_given_access_token(
            self, access_token):
        pass

    @abc.abstractmethod
    def expire_all_auth_tokens_related_to_given_list_of_access_tokens(
            self, access_tokens: List[str]):
        pass

    @abc.abstractmethod
    def get_user_id_for_access_token(self, access_token: str) -> str:
        pass

    @abc.abstractmethod
    def expire_all_user_tokens(self, user_id: str):
        pass

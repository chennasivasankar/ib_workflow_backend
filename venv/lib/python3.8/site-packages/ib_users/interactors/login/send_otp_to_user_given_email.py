from ib_users.exceptions.custom_exception_constants import \
    USER_ACCOUNT_IS_DEACTIVATED
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.third_party.otp_service import OTPService
from ib_users.utils.interactors.login_interactors_common import \
    are_email_and_phone_number_not_empty
from ib_users.validators import EmailValidator


class SendOTPToUserGivenEmail:
    def __init__(self, storage: UserAccountsStorage, otp_service: OTPService):
        self.storage = storage
        self.otp_service = otp_service

    def send_otp(self, email):
        from ib_users.constants.otp_constants import \
            OTPMessageFormatConstants
        EmailValidator.validate(email)
        otp_send_to_dto = self.storage.get_user_details_to_send_otp_given_email(
            email)

        user_account = self.storage.get_user_given_email(email=email)

        self.validate_user_account_for_active_state(
            user_id=user_account.user_id
        )

        if are_email_and_phone_number_not_empty(otp_send_to_dto):
            self.otp_service.send_otp_to_user(otp_send_to_dto.email,
                                              otp_send_to_dto.phone_number,
                                              OTPMessageFormatConstants.FORMAT_TO_LOGIN,
                                              OTPMessageFormatConstants.OTP_SUBJECT_TO_LOGIN)
        else:
            self.otp_service.send_otp_to_user_email(
                email=otp_send_to_dto.email,
                template=OTPMessageFormatConstants.FORMAT_TO_LOGIN,
                subject=OTPMessageFormatConstants.OTP_SUBJECT_TO_LOGIN)

    def validate_user_account_for_active_state(self, user_id):
        if not self.storage.is_user_account_active(user_id):
            from ib_users.validators.base_validator import CustomException
            raise CustomException.from_exception_message_DTO(
                USER_ACCOUNT_IS_DEACTIVATED
            )

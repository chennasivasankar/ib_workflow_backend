from ib_users.exceptions.custom_exception_constants import \
    USER_ACCOUNT_IS_DEACTIVATED
from ib_users.exceptions.oauth2_exceptions import AccessTokenNotFoundException
from ib_users.interactors.storages import UserAccountsStorage
from ib_users.interactors.storages.user_login_device_details_storage import \
    UserLoginDeviceDetailsStorage
from ib_users.interactors.third_party.user_tokens_generator import \
    UserAuthTokensGenerator


class RefreshAuthTokens:
    def __init__(self, login_token_generator: UserAuthTokensGenerator,
                 presenter, storage: UserLoginDeviceDetailsStorage,
                 accounts_storage: UserAccountsStorage):
        self.login_token_generator = login_token_generator
        self.presenter = presenter
        self.storage = storage
        self.accounts_storage = accounts_storage

    def refresh_tokens(self, refresh_token: str, access_token: str):

        try:
            user_id = self.login_token_generator.get_user_id_for_access_token(
                access_token=access_token
            )
        except AccessTokenNotFoundException:
            self.presenter.raise_exception_for_invalid_access_token()
            return

        self.validate_user_account_for_active_state(user_id)

        user_auth_tokens = self.login_token_generator. \
            get_updated_user_auth_tokens(refresh_token=refresh_token)

        self.storage.update_access_token_in_access_token_and_device_id_map(
            old_access_token=access_token,
            new_access_token=user_auth_tokens.access_token
        )

        return self.presenter.get_user_login_response(user_auth_tokens)

    def validate_user_account_for_active_state(self, user_id):
        if not self.accounts_storage.is_user_account_active(user_id):
            from ib_users.validators.base_validator import CustomException
            raise CustomException.from_exception_message_DTO(
                USER_ACCOUNT_IS_DEACTIVATED
            )

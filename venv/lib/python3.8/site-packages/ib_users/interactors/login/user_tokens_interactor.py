from ib_users.interactors.storages.user_account_base_storage import \
    UserAccountBaseStorage
from ib_users.interactors.third_party.user_tokens_generator import \
    UserAuthTokensGenerator
from ib_users.presenters import UserLoginJSONPresenter
from ib_users.exceptions.custom_exception_constants import \
    USER_ACCOUNT_IS_DEACTIVATED
from ib_users.validators.base_validator import CustomException


class UserAuthTokenInteractor:

    def __init__(self, auth_token_service: UserAuthTokensGenerator,
                 presenter: UserLoginJSONPresenter,
                 account_storage: UserAccountBaseStorage):
        self.auth_token_service = auth_token_service
        self.presenter = presenter
        self.account_storage = account_storage

    def get_user_auth_tokens(self, user_id: str, expiry_in_seconds=None):
        self.validate_user_account_for_active_state(user_id)
        user_auth_tokens = self.auth_token_service.\
            create_user_auth_tokens(user_id=user_id, expiry_in_seconds=expiry_in_seconds)
        return self.presenter.get_user_login_response(user_auth_tokens)

    def validate_user_account_for_active_state(self, user_id):
        if not self.account_storage.is_user_account_active(user_id):
            raise CustomException.from_exception_message_DTO(
                USER_ACCOUNT_IS_DEACTIVATED
            )

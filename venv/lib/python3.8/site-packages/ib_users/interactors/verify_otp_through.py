from ib_users.constants.otp_verification_constants import VerificationType
from ib_users.constants.sms_constants import ServiceProvider
from ib_users.exceptions.otp_verification_exceptions import \
    InvalidVerificationType, InvalidPhoneNumberOrEmailException
from ib_users.interactors.email_otp_verification_interactor import \
    EmailOTPVerificationInteractor
from ib_users.interactors.phone_number_otp_verification_interactor import \
    PhoneNumberOTPVerificationInteractor
from ib_users.interactors.third_party.phone_number_validator import \
    PhoneNumberValidator
from ib_users.interactors.user_otp_verification_interactor import \
    UserOTPVerificationInteractor
from ib_users.interactors.verify_through_otp_interface import \
    VerifyThroughOTPInterface
from ib_users.services.msg91_impl import MSG91Impl
from ib_users.services.sms_country_impl import SMSCountryImpl
from ib_users.storages.otp_blacklist_storage_impl import \
    OTPBlacklistStorageImpl
from ib_users.storages.otp_verification_sql_storage import \
    OTPVerificationSQLStorage
from ib_users.utils.dtos import PhoneNumberDTO
from ib_users.validators.email_validator import EmailValidator


class VerifyThroughOTPInteractor(VerifyThroughOTPInterface):
    def __init__(self, verification_type: VerificationType):
        super(VerifyThroughOTPInteractor, self).__init__(
            verification_type=verification_type
        )

    def verify_through_otp(self, **kwargs):
        email_sender = VerifyThroughOTPInteractor._create_email_sender(
            subject=kwargs.get("subject"),
            email_body_template=kwargs.get("email_body_template")
        )
        login_or_registration_with_otp = self.verification_type in [

            VerificationType.LOGIN_WITH_OTP,
            VerificationType.REGISTRATION_WITH_OTP
        ]
        if self.verification_type == VerificationType. \
                VERIFY_PHONE_NUMBER_WITH_OTP:
            self.verify_phone_number(
                phone_number_dto=kwargs.get("phone_number_dto"),
                send_otp_through=kwargs.get("send_otp_through"),
                sms_service_provider=kwargs.get("sms_service_provider"),
                call_template=kwargs.get("call_template"),
                sms_template=kwargs.get("sms_template")
            )

        elif self.verification_type == VerificationType.VERIFY_EMAIL_WITH_OTP:
            self.verify_email(
                email=kwargs.get("email"),
                email_sender=email_sender
            )
        elif self.verification_type == VerificationType.RESET_PASSWORD_WITH_OTP:
            self.verify_user(
                user_id=kwargs.get("user_id"), email=kwargs.get("email"),
                phone_number_dto=kwargs.get("phone_number_dto"),
                send_otp_through=kwargs.get("send_otp_through"),
                email_sender=email_sender,
                sms_service_provider=kwargs.get("sms_service_provider"),
                call_service=kwargs.get("call_service")
            )
        elif login_or_registration_with_otp:
            self.verify_through_otp_given_login_or_registration_with_otp(
                **kwargs)
        else:
            raise InvalidVerificationType()

    def verify_through_otp_given_login_or_registration_with_otp(self,
                                                                **kwargs):
        phone_number_dto = kwargs.get("phone_number_dto")
        email = kwargs.get("email")
        email_sender = VerifyThroughOTPInteractor._create_email_sender(
            subject=kwargs.get("subject"),
            email_body_template=kwargs.get("email_body_template")
        )
        if phone_number_dto and not email:
            self.verify_phone_number(
                phone_number_dto=kwargs.get("phone_number_dto"),
                send_otp_through=kwargs.get("send_otp_through"),
                sms_service_provider=kwargs.get("sms_service_provider"),
                call_template=kwargs.get("call_template"),
                sms_template=kwargs.get("sms_template")
            )
        elif email and not phone_number_dto:
            self.verify_email(
                email=kwargs.get("email"),
                email_sender=email_sender
            )
        elif phone_number_dto and email:
            pass
        else:
            raise InvalidPhoneNumberOrEmailException()

    def verify_phone_number(self,
                            phone_number_dto: PhoneNumberDTO,
                            send_otp_through,
                            sms_service_provider,
                            call_template=None,
                            sms_template=None):
        call_service = VerifyThroughOTPInteractor._create_call_service \
            (call_template=call_template)
        sms_sender = self._create_sms_sender(
            sms_template=sms_template,
            sms_service_provider=sms_service_provider
        )

        phone_number_validator = VerifyThroughOTPInteractor. \
            _create_phone_number_validator()

        phone_number_otp_verification_interactor = self. \
            _create_phone_number_otp_verification_interactor()
        phone_number_otp_verification_interactor.verify_phone_number(
            phone_number_dto=phone_number_dto,
            phone_number_validator=phone_number_validator,
            send_otp_through=send_otp_through,
            call_service=call_service,
            sms_sender=sms_sender
        )

    def verify_email(self, email: str, email_sender):
        email_validator = VerifyThroughOTPInteractor._create_email_validator()
        email_otp_verification_interactor = self. \
            _create_email_otp_verification_interactor()
        email_otp_verification_interactor.verify_email(
            email=email,
            email_validator=email_validator,
            email_sender=email_sender
        )

    def verify_user(self, user_id, email, phone_number_dto, send_otp_through,
                    email_sender,
                    sms_service_provider, call_service
                    ):
        user_otp_verification_interactor = self. \
            _create_user_otp_verification_interactor()

        from ib_users.constants.otp_constants import OTPMessageFormatConstants
        sms_sender = self._create_sms_sender(
            sms_template=OTPMessageFormatConstants.FORMAT_TO_RESET_PASSWORD,
            sms_service_provider=sms_service_provider
        )

        user_otp_verification_interactor.verify_user(
            phone_number_dto=phone_number_dto,
            send_otp_through=send_otp_through,
            sms_sender=sms_sender,
            call_service=call_service,
            email=email,
            email_sender=email_sender,
            user_id=user_id,
        )

    def validate_otp(self, **kwargs):
        phone_number_dto = kwargs.get("phone_number_dto")
        email = kwargs.get("email")
        otp_to_be_verified = kwargs.get("otp_to_be_verified")

        login_with_phone_number_otp = \
            self.verification_type == VerificationType.LOGIN_WITH_OTP \
            and phone_number_dto and not email
        login_with_email_otp = \
            self.verification_type == VerificationType.LOGIN_WITH_OTP and \
            email and not phone_number_dto

        registration_with_phone_number_otp = \
            self.verification_type == VerificationType.REGISTRATION_WITH_OTP and phone_number_dto and not email
        registration_with_email_otp = \
            self.verification_type == VerificationType.REGISTRATION_WITH_OTP and \
            email and not phone_number_dto

        if self.verification_type == VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP \
                or login_with_phone_number_otp or registration_with_phone_number_otp:
            phone_number_otp_verification_interactor = self. \
                _create_phone_number_otp_verification_interactor()
            phone_number_otp_verification_interactor. \
                validate_otp_to_verify_phone_number(
                phone_number_dto=phone_number_dto,
                otp_to_be_verified=otp_to_be_verified
            )
        elif self.verification_type == VerificationType.VERIFY_EMAIL_WITH_OTP or \
                login_with_email_otp or registration_with_email_otp:
            email_otp_verification_interactor = self. \
                _create_email_otp_verification_interactor()
            email_otp_verification_interactor.validate_otp_to_verify_email(
                email=email,
                otp_to_be_verified=otp_to_be_verified
            )
        elif self.verification_type == VerificationType.RESET_PASSWORD_WITH_OTP:
            user_otp_verification_interactor = self. \
                _create_user_otp_verification_interactor()
            user_otp_verification_interactor.validate_otp_to_verify_user(
                user_id=kwargs.get("user_id"),
                otp_to_be_verified=otp_to_be_verified
            )

    def _create_phone_number_otp_verification_interactor(self):
        storage = VerifyThroughOTPInteractor._create_otp_verification_storage()
        otp_blacklist_storage = VerifyThroughOTPInteractor. \
            _create_otp_blacklist_storage()
        otp_verification_interactor = PhoneNumberOTPVerificationInteractor(
            storage=storage,
            otp_blacklist_storage=otp_blacklist_storage,
            verification_type=self.verification_type
        )
        return otp_verification_interactor

    def _create_email_otp_verification_interactor(self):
        storage = VerifyThroughOTPInteractor._create_otp_verification_storage()
        otp_blacklist_storage = VerifyThroughOTPInteractor. \
            _create_otp_blacklist_storage()
        otp_verification_interactor = EmailOTPVerificationInteractor(
            storage=storage,
            otp_blacklist_storage=otp_blacklist_storage,
            verification_type=self.verification_type
        )
        return otp_verification_interactor

    def _create_user_otp_verification_interactor(self):
        storage = VerifyThroughOTPInteractor._create_otp_verification_storage()
        otp_blacklist_storage = VerifyThroughOTPInteractor. \
            _create_otp_blacklist_storage()
        otp_verification_interactor = UserOTPVerificationInteractor(
            storage=storage,
            otp_blacklist_storage=otp_blacklist_storage,
            verification_type=self.verification_type
        )
        return otp_verification_interactor

    @staticmethod
    def _create_otp_verification_storage():
        return OTPVerificationSQLStorage()

    @staticmethod
    def _create_otp_blacklist_storage():
        return OTPBlacklistStorageImpl()

    @staticmethod
    def _create_sms_sender(sms_template, sms_service_provider):
        if sms_service_provider == ServiceProvider.MSG91.value:
            return MSG91Impl(message_template=sms_template)
        elif sms_service_provider == ServiceProvider.SMS_COUNTRY.value:
            return SMSCountryImpl(message_template=sms_template)

    @staticmethod
    def _create_call_service(call_template):
        from ib_users.services.call_service_impl import CallServiceImpl
        return CallServiceImpl(message_template=call_template)

    @staticmethod
    def _create_email_sender(subject, email_body_template):
        from ib_users.services.email_sender_impl import EmailSenderImpl
        return EmailSenderImpl(subject=subject,
                               email_body_template=email_body_template)

    @staticmethod
    def _create_email_validator():
        return EmailValidator()

    @staticmethod
    def _create_phone_number_validator():
        return PhoneNumberValidator()

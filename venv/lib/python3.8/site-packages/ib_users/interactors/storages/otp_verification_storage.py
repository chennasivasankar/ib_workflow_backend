import abc
from dataclasses import dataclass

from ib_users.constants.otp_verification_constants import VerificationType
from ib_users.utils.dtos import PhoneNumberDTO


@dataclass
class GetOTPDetailsDTO:
    otp: str


class OTPVerificationStorage:
    __metaclass__ = abc.ABCMeta

    @abc.abstractmethod
    def get_otp_status(self, phone_number_dto: PhoneNumberDTO,
                       verification_type: VerificationType):
        pass

    @abc.abstractmethod
    def create_otp_verification(self, phone_number_dto: PhoneNumberDTO,
                                otp: str, expiry_time_in_sec: int,
                                verification_type: VerificationType):
        pass

    @abc.abstractmethod
    def update_otp_details(self, phone_number_dto: PhoneNumberDTO,
                           otp: str, expiry_time_in_sec: int,
                           verification_type: VerificationType):
        pass

    @abc.abstractmethod
    def is_exceeded_max_retries_count(self,
                                      phone_number_dto: PhoneNumberDTO,
                                      verification_type: VerificationType) -> bool:
        pass

    @abc.abstractmethod
    def get_otp_details(self, phone_number_dto: PhoneNumberDTO,
                        verification_type: VerificationType) \
            -> GetOTPDetailsDTO:
        pass

    @abc.abstractmethod
    def is_otp_matched(self, phone_number_dto: PhoneNumberDTO,
                       otp_to_be_verified: str,
                       verification_type: VerificationType):
        pass

    @abc.abstractmethod
    def increase_retries_count_by_one(self, phone_number_dto: PhoneNumberDTO,
                                      verification_type: VerificationType):
        pass

    @abc.abstractmethod
    def get_otp_status_by_email(self, email: str,
                                verification_type: VerificationType):
        pass

    @abc.abstractmethod
    def create_otp_verification_for_email(self, email: str,
                                          otp: str, expiry_time_in_sec: int,
                                          verification_type: VerificationType):
        pass

    @abc.abstractmethod
    def update_otp_details_by_email(self, email: str, otp: str,
                                    expiry_time_in_sec: int,
                                    verification_type: VerificationType):
        pass

    @abc.abstractmethod
    def get_otp_details_by_email(self, email: str,
                                 verification_type: VerificationType) \
            -> GetOTPDetailsDTO:
        pass

    @abc.abstractmethod
    def is_exceeded_max_retries_count_for_email(self, email: str,
                                                verification_type: VerificationType) -> bool:
        pass

    @abc.abstractmethod
    def is_otp_matched_for_email(self, email: str,
                                 otp_to_be_verified: str,
                                 verification_type: VerificationType) -> bool:
        pass

    @abc.abstractmethod
    def increase_retries_count_by_one_for_email(self, email: str,
                                                verification_type: VerificationType):
        pass

    @abc.abstractmethod
    def is_phone_number_whitelisted(self, phone_number_dto: PhoneNumberDTO) \
            -> bool:
        pass

    @abc.abstractmethod
    def get_configured_otp_for_phone_number(self,
                                            phone_number_dto: PhoneNumberDTO) -> GetOTPDetailsDTO:
        pass

    @abc.abstractmethod
    def is_email_whitelisted(self, email: str):
        pass

    @abc.abstractmethod
    def get_configured_otp_for_email(self, email: str):
        pass

    @abc.abstractmethod
    def reset_retries_count(self, phone_number_dto: PhoneNumberDTO,
                            verification_type: VerificationType):
        pass

    @abc.abstractmethod
    def reset_retries_count_for_email(self, email: str,
                                      verification_type: VerificationType):
        pass

    @abc.abstractmethod
    def get_otp_status_by_user_id(self, user_id: str,
                                  verification_type: VerificationType):
        pass

    @abc.abstractmethod
    def update_otp_details_by_user_id(self, user_id: str,
                                      otp: str,
                                      expiry_time_in_sec: int,
                                      verification_type: VerificationType):
        pass

    @abc.abstractmethod
    def create_otp_verification_by_user_id(self, user_id: str,
                                           otp: str,
                                           expiry_time_in_sec: int,
                                           verification_type: VerificationType):
        pass

    @abc.abstractmethod
    def get_otp_details_by_user_id(self, user_id: str,
                                   verification_type: VerificationType) -> \
            GetOTPDetailsDTO:
        pass

    @abc.abstractmethod
    def is_otp_matched_for_user_id(self, user_id: str,
                                   otp_to_be_verified: str,
                                   verification_type: VerificationType) -> \
            bool:
        pass

    @abc.abstractmethod
    def increase_retries_count_by_one_for_user_id(self, user_id: str,
                                                  verification_type: VerificationType):
        pass

    @abc.abstractmethod
    def reset_retries_count_for_user_id(self, user_id: str,
                                        verification_type: VerificationType):
        pass

    @abc.abstractmethod
    def is_exceeded_max_retries_count_for_user_id(self, user_id: str,
                                                  verification_type: VerificationType):
        pass

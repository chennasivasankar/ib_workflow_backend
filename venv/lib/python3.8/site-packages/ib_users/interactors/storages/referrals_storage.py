import abc
import uuid
from dataclasses import dataclass
from typing import List


@dataclass
class ReferralDTO:
    user_id: str
    referral_limit: str


@dataclass
class ReferralDetailsDTO:
    referral_limit: str
    referral_code: str


@dataclass
class ReferralCodeDTO:
    referral_code: str
    referral_limit: int


class ReferralsStorage:
    @abc.abstractmethod
    def get_referral_details(
            self, referral_code: str) -> ReferralDTO:
        pass

    @abc.abstractmethod
    def is_referral_code_linked_to_user(self, referral_code: str) -> bool:
        pass

    @abc.abstractmethod
    def get_referrer_id(self, user_id: str) -> str:
        pass

    @abc.abstractmethod
    def is_referrer_exists(self, user_id: str) -> bool:
        pass

    @abc.abstractmethod
    def get_referral_code(self, user_id: str) -> str:
        pass

    @abc.abstractmethod
    def create_new_referral_codes(self, referral_codes: list) -> \
            List[ReferralDetailsDTO]:
        pass

    @abc.abstractmethod
    def link_user_with_referrer(self, user_id: str,
                                referral_code: str):
        pass

    @abc.abstractmethod
    def is_referral_limit_reached(self, user_id: str):
        pass

    @abc.abstractmethod
    def get_user_by_referral_code(self, referral_code: str):
        pass

    @abc.abstractmethod
    def create_referral_details(self, user_id: uuid, referral_code: str):
        pass

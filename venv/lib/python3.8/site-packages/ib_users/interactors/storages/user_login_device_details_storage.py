import abc
from dataclasses import dataclass
from typing import List


@dataclass
class UserIdAndDeviceIdDTO:
    user_id: str
    device_id: str


@dataclass
class UserDeviceLoginDTO(UserIdAndDeviceIdDTO):
    access_token: str


@dataclass
class UserDeviceIdAndAccessTokenDTO:
    device_id: str
    access_token: str


class UserLoginDeviceDetailsStorage:
    __metaclass__ = abc.ABCMeta

    @abc.abstractmethod
    def check_if_given_login_device_details_mapping_exists(
            self,
            user_device_login_dto: UserDeviceLoginDTO):
        pass

    @abc.abstractmethod
    def get_all_devices_login_details_of_given_user(self, user_id) -> List[
        UserDeviceIdAndAccessTokenDTO]:
        pass

    @abc.abstractmethod
    def remove_given_user_and_device_mapping(
            self,
            user_id_and_device_id_dto: UserIdAndDeviceIdDTO):
        pass

    @abc.abstractmethod
    def remove_all_device_login_details_of_given_user(self, user_id):
        pass

    @abc.abstractmethod
    def remove_device_login_details_of_user_except_of_given_access_tokens(
            self,
            user_id,
            access_tokens):
        pass

    @abc.abstractmethod
    def update_access_token_in_access_token_and_device_id_map(
            self,
            old_access_token:str,
            new_access_token:str):
        pass

    @abc.abstractmethod
    def create_given_login_device_mapping_in_storage(self, user_device_login_dto: UserDeviceLoginDTO):
        pass

import abc
import datetime
from dataclasses import dataclass
from typing import List


@dataclass
class AccessTokenDTO:
    access_token_id: int
    token: str
    expires: datetime.datetime
    user_id: str


@dataclass
class RefreshTokenDTO:
    token: str
    access_token: int
    user_id: str
    revoked: datetime.datetime


@dataclass
class Application:
    application_id: int


class OAuth2Storage:
    __metaclass__ = abc.ABCMeta

    @abc.abstractmethod
    def get_or_create_default_application(self, user_id: int) -> \
            (Application, bool):
        pass

    @abc.abstractmethod
    def create_access_token(self, user_id: int, application_id: int,
                            scopes: str,
                            expiry_in_seconds: int) -> AccessTokenDTO:
        pass

    @abc.abstractmethod
    def create_refresh_token(self, user_id: int, application_id: int,
                             access_token_id: int) -> RefreshTokenDTO:
        pass

    @abc.abstractmethod
    def get_refresh_token(self, refresh_token: str) -> RefreshTokenDTO:
        pass

    @abc.abstractmethod
    def get_refresh_tokens_from_access_tokens(
            self, access_tokens: List[str]) -> List[str]:
        pass

    @abc.abstractmethod
    def expire_access_token_bulk(self, access_tokens: List[str]) -> None:
        pass

    @abc.abstractmethod
    def expire_refresh_token_bulk(self, refresh_tokens: List[str]) -> None:
        pass

    @abc.abstractmethod
    def get_access_token(self, access_token: str) -> AccessTokenDTO:
        pass

    @abc.abstractmethod
    def expire_all_user_access_tokens(self, user_id: str):
        pass

    @abc.abstractmethod
    def expire_all_user_refresh_tokens(self, user_id: str):
        pass

from ib_users.constants.user_profile.error_messages import \
    PHONE_NUMBER_ALREADY_LINKED_TO_ACCOUNT, \
    PHONE_NUMBER_DOES_NOT_EXIST, \
    COUNTRY_CODE_AND_PHONE_NUMBER_DOES_NOT_EXIST, \
    COUNTRY_CODE_DOES_NOT_EXIST, EMAIL_DOES_NOT_EXIST, \
    EMAIL_ALREADY_LINKED

from ib_users.constants.user_profile.error_types import \
    COUNTRY_CODE_DOES_NOT_EXIST_ERROR_TYPE, \
    COUNTRY_CODE_AND_PHONE_NUMBER_DOES_NOT_EXIST_ERROR_TYPE, \
    PHONE_NUMBER_DOES_NOT_EXIST_ERROR_TYPE, \
    PHONE_NUMBER_ALREADY_LINKED_TO_ACCOUNT_ERROR_TYPE, \
    EMAIL_ALREADY_LINKED_ERROR_TYPE, \
    EMAIL_DOES_NOT_EXIST_ERROR_TYPE

from ib_users.validators.base_validator import CustomException


class InvalidUserException(CustomException):
    pass


class PhoneNumberOrCountryCodeInvalidException(CustomException):
    pass


class PhoneNumberDoesNotExistException(CustomException):
    def __init__(self, message=PHONE_NUMBER_DOES_NOT_EXIST,
                 exception_type=PHONE_NUMBER_DOES_NOT_EXIST_ERROR_TYPE):
        self.error_message = message
        self.error_type = exception_type


class CountryCodeDoesNotExistException(CustomException):
    def __init__(self, message=COUNTRY_CODE_DOES_NOT_EXIST,
                 exception_type=COUNTRY_CODE_DOES_NOT_EXIST_ERROR_TYPE):
        self.error_message = message
        self.error_type = exception_type


class CountryCodeAndPhoneNumberDoesNotExistException(CustomException):
    def __init__(self, message=COUNTRY_CODE_AND_PHONE_NUMBER_DOES_NOT_EXIST,
                 exception_type=COUNTRY_CODE_AND_PHONE_NUMBER_DOES_NOT_EXIST_ERROR_TYPE):
        self.error_message = message
        self.error_type = exception_type


class PhoneNumberAlreadyLinkedException(CustomException):
    def __init__(self, message=PHONE_NUMBER_ALREADY_LINKED_TO_ACCOUNT,
                 exception_type=PHONE_NUMBER_ALREADY_LINKED_TO_ACCOUNT_ERROR_TYPE):
        self.error_message = message
        self.error_type = exception_type


class InvalidGenderException(CustomException):
    pass


class InvalidLanguageException(CustomException):
    pass


class EmailDoesNotExistException(CustomException):
    def __init__(self, message=EMAIL_DOES_NOT_EXIST,
                 exception_type=EMAIL_DOES_NOT_EXIST_ERROR_TYPE):
        self.error_message = message
        self.error_type = exception_type


class EmailAlreadyLinkedException(CustomException):
    def __init__(self, message=EMAIL_ALREADY_LINKED,
                 exception_type=EMAIL_ALREADY_LINKED_ERROR_TYPE):
        self.error_message = message
        self.error_type = exception_type


class InvalidEmailException(CustomException):
    pass

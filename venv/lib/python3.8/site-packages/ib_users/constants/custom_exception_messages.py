from dataclasses import dataclass
from ib_users.constants.user_profile.enums import Gender, Language
from ib_users.constants.user_account_constants import UserAccountConstants


@dataclass
class ExceptionMessageDTO:
    message: str
    code: str


USERNAME_CAN_NOT_BE_EMPTY = ExceptionMessageDTO(
    "Username can't be empty",
    "USERNAME_CAN_NOT_BE_EMPTY"
)

USER_MAX_NAME_LENGTH_IS = ExceptionMessageDTO(
    "Max username length is {val} characters".format(val=UserAccountConstants.MAX_USER_NAME_LENGTH),
    "MAX_USER_NAME_LENGTH_IS"
)

USER_NAME_SPECIAL_CHARACTERS = ExceptionMessageDTO(
    "Username with special characters other than @/./+/-/_ are not allowed",
    "USER_NAME_SPECIAL_CHARACTERS"
)

PASSWORD_MIN_LENGTH_IS = ExceptionMessageDTO(
    "Min password length is {val} characters".format(val= UserAccountConstants.MIN_PASSWORD_LENGTH),
    "PASSWORD_MIN_LENGTH_IS"
)

PASSWORD_AT_LEAST_1_SPECIAL_CHARACTER = ExceptionMessageDTO(
    "Password must contain at least 1 non-alphanumeric character",
    "PASSWORD_AT_LEAST_1_SPECIAL_CHARACTER"
)

NOT_REGISTERED_USER = ExceptionMessageDTO(
    "User is not registered",
    "NOT_REGISTERED_USER"
)

INCORRECT_PASSWORD = ExceptionMessageDTO(
    "Given password is incorrect",
    "INCORRECT_PASSWORD"
)

INVALID_EMAIL = ExceptionMessageDTO(
    "Enter valid email address",
    "INVALID_EMAIL"
)

INVALID_PHONE_NUMBER = ExceptionMessageDTO(
    "Enter valid phone number",
    "INVALID_PHONE_NUMBER"
)

INVALID_FB_ACCESS_TOKEN = ExceptionMessageDTO(
    "Enter valid fb credentials",
    "INVALID_FB_ACCESS_TOKEN"
)

FB_NOT_LINKED = ExceptionMessageDTO(
    "Facebook account is not linked",
    "FB_NOT_LINKED"
)

INVALID_GOOGLE_ACCESS_TOKEN = ExceptionMessageDTO(
    "Enter valid google credentials",
    "INVALID_GOOGLE_ACCESS_TOKEN"
)

GOOGLE_NOT_LINKED = ExceptionMessageDTO(
    "Google account is not linked",
    "GOOGLE_NOT_LINKED"
)

INVALID_TWITTER_ACCESS_TOKEN = ExceptionMessageDTO(
    "Enter valid twitter credentials",
    "INVALID_TWITTER_ACCESS_TOKEN"
)

TWITTER_NOT_LINKED = ExceptionMessageDTO(
    "Twitter account is not linked",
    "TWITTER_NOT_LINKED"
)

INVALID_OTP = ExceptionMessageDTO(
    "Invalid OTP",
    "INVALID_OTP"
)

INVALID_REFRESH_TOKEN = ExceptionMessageDTO(
    "Invalid refresh token",
    "INVALID_REFRESH_TOKEN"
)

INVALID_ACCESS_TOKEN = ExceptionMessageDTO(
    "Invalid access token",
    "INVALID_ACCESS_TOKEN"
)

EXPIRED_REFRESH_TOKEN = ExceptionMessageDTO(
    "Refresh token is expired",
    "EXPIRED_REFRESH_TOKEN"
)

USER_NOT_MAPPED_TO_DEVICE = ExceptionMessageDTO(
    "No profile matching requested user id",
    'USER_NOT_MAPPED_TO_DEVICE'
)

DEVICE_ID_CANNOT_BE_EMPTY = ExceptionMessageDTO(
    "Device id cannot be empty",
    'DEVICE_ID_CANNOT_BE_EMPTY'
)

DEVICE_ID_DOES_NOT_EXIST = ExceptionMessageDTO(
    "Device id does not exist",
    'DEVICE_ID_DOES_NOT_EXIST'
)

INVALID_DOB = ExceptionMessageDTO(
    "Enter valid DOB of format YYY-MM-DD",
    "INVALID_DOB"
)

USER_ACCOUNT_IS_DEACTIVATED = ExceptionMessageDTO(
    "USer Account is deactivated",
    "USER_ACCOUNT_IS_DEACTIVATED"
)

INVALID_GENDER = ExceptionMessageDTO(
    "Invalid gender. Gender must be one of {}".format(
        Gender.get_list_of_values()),
    "INVALID_GENDER"
)

INVALID_LANGUAGE = ExceptionMessageDTO(
    "Invalid language. Language must be one of {}".format(
        Language.get_list_of_values()),
    "INVALID_LANGUAGE"
)

EMAIL_ALREADY_IN_USE = ExceptionMessageDTO(
    "Email is already linked to another user account",
    "EMAIL_ALREADY_IN_USE"
)

PHONE_NUMBER_ALREADY_IN_USE = ExceptionMessageDTO(
    "Phone number is already linked to another user account",
    "PHONE_NUMBER_ALREADY_IN_USE"
)

from typing import List

from ib_users.exceptions.oauth2_exceptions import RefreshTokenExpired
from ib_users.interactors.storages.oauth2_storage import RefreshTokenDTO
from ib_users.interactors.third_party.user_tokens_generator import \
    UserAuthTokensGenerator, UserAuthTokensDTO


class OAuthUserAuthTokensService(UserAuthTokensGenerator):

    def expire_all_auth_tokens_related_to_given_list_of_access_tokens(
            self, access_tokens: List[str]):
        refresh_tokens = self.oauth2_storage. \
            get_refresh_tokens_from_access_tokens(
            access_tokens=access_tokens
        )
        self.oauth2_storage.expire_access_token_bulk(
            access_tokens=access_tokens)
        self.oauth2_storage.expire_refresh_token_bulk(
            refresh_tokens=refresh_tokens)

    def expire_all_auth_tokens_related_to_given_access_token(
            self, access_token):
        self.expire_all_auth_tokens_related_to_given_list_of_access_tokens(
            access_tokens=[access_token]
        )

    def get_updated_user_auth_tokens(self, refresh_token) -> UserAuthTokensDTO:
        """
        reference: https://auth0.com/learn/refresh-tokens/
        creates a new tokens
        :param refresh_token:
        :return:
        :raises
            RefreshTokenNotFound
            RefreshTokenExpired
        """
        # todo: add transaction.atomic
        refresh_token_object = self.oauth2_storage.get_refresh_token(
            refresh_token=refresh_token
        )
        self._validate_refresh_token(
            refresh_token_object=refresh_token_object
        )
        auth_tokens = self.create_user_auth_tokens(
            user_id=refresh_token_object.user_id
        )
        self.oauth2_storage.expire_access_token_bulk(
            access_tokens=[refresh_token_object.access_token])
        self.oauth2_storage.expire_refresh_token_bulk(
            refresh_tokens=[refresh_token])
        return auth_tokens

    def create_user_auth_tokens(self, user_id, expiry_in_seconds=None):
        from django.conf import settings

        application, _ = self.oauth2_storage.get_or_create_default_application(
            user_id=user_id
        )

        if not expiry_in_seconds:
            expiry_in_seconds = settings.DEFAULT_ACCESS_TOKEN_EXPIRY_IN_SECONDS

        access_token_obj = self.oauth2_storage.create_access_token(
            user_id=user_id,
            application_id=application.application_id,
            scopes=settings.DEFAULT_OAUTH_SCOPES,
            expiry_in_seconds=expiry_in_seconds
        )

        refresh_token_obj = self.oauth2_storage.create_refresh_token(
            user_id=user_id,
            application_id=application.application_id,
            access_token_id=access_token_obj.access_token_id
        )

        return UserAuthTokensDTO(
            user_id=user_id,
            access_token=access_token_obj.token,
            refresh_token=refresh_token_obj.token,
            expires_in=access_token_obj.expires
        )

    @staticmethod
    def _validate_refresh_token(
            refresh_token_object: RefreshTokenDTO) -> None:
        if refresh_token_object.revoked:
            raise RefreshTokenExpired()

    def get_user_id_for_access_token(self, access_token):
        access_token_dto = \
            self.oauth2_storage.get_access_token(access_token=access_token)
        return access_token_dto.user_id

    def expire_all_user_tokens(self, user_id):
        self.oauth2_storage.expire_all_user_access_tokens(user_id=user_id)
        self.oauth2_storage.expire_all_user_refresh_tokens(user_id=user_id)

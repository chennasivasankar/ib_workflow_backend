from ib_users.constants.user_account_constants import \
    SocialAccountProviderType
from ib_users.exceptions.social_service_exceptions import \
    InvalidSocialAccessToken
from ib_users.interactors.third_party.social_account import SocialAccount
from ib_users.exceptions.user_account_exceptions import InvalidAction
from ib_users.exceptions.custom_exception_constants import ExceptionMessages


class GoogleAccount(SocialAccount):
    def check_and_throw_exception_if_given_string_is_empty(self, string: str):
        if not string:
            raise InvalidAction(ExceptionMessages.SOCIAL_ACCESS_TOKEN_IS_EMPTY.
                                format(SocialAccountProviderType.GOOGLE.value))

    def get_social_account_type(self) -> str:
        return SocialAccountProviderType.GOOGLE.value

    def get_social_id(self, **kwargs) -> str:
        import requests

        user_info_url = "https://www.googleapis.com/oauth2/v2/userinfo"
        authorization_header = {
            "Authorization": "OAuth {}".format(kwargs['access_token'])
        }

        request_object = requests.get(
            user_info_url, headers=authorization_header, verify=False
        )
        google_plus_profile_details = request_object.json()
        if 'error' in google_plus_profile_details:
            raise InvalidSocialAccessToken.get_for_invalid_google_token_exception()
        return google_plus_profile_details['id']

from open_facebook.exceptions import OpenFacebookException

from ib_users.constants.user_account_constants import \
    SocialAccountProviderType

from ib_users.exceptions.custom_exception_constants import ExceptionMessages
from ib_users.exceptions.social_service_exceptions import \
    InvalidSocialAccessToken
from ib_users.exceptions.user_account_exceptions import InvalidAction
from ib_users.interactors.third_party.social_account import SocialAccount


class FacebookAccount(SocialAccount):
    def check_and_throw_exception_if_given_string_is_empty(self, string: str):
        if not string:
            raise InvalidAction(ExceptionMessages.SOCIAL_ACCESS_TOKEN_IS_EMPTY.
                                format(SocialAccountProviderType.FACEBOOK.value))

    def get_social_account_type(self) -> str:
        return SocialAccountProviderType.FACEBOOK.value

    def get_social_id(self, **kwargs) -> str:
        from open_facebook import OpenFacebook

        graph = OpenFacebook(
            access_token=kwargs['access_token'], version='v2.8'
        )
        try:
            user = graph.get('me', fields='id')
        except OpenFacebookException:
            raise InvalidSocialAccessToken.get_for_invalid_fb_token_exception()

        return user['id']

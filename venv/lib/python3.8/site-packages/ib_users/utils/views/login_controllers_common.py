from django_swagger_utils.drf_server.exceptions import BadRequest, \
    ExpectationFailed

from ib_users.constants.config import TRUE_STR
from ib_users.constants.otp_verification_constants import VerificationType
from ib_users.exceptions.invalid_login_type_exception import \
    InvalidLoginTypeException
from ib_users.exceptions.otp_verification_exceptions import \
    PhoneNumberIsBlackListedException, EmailIsBlackListedException, \
    MaxRetriesExceededException, InvalidOTPException, OTPExpiredException
from ib_users.interactors import UserAuthTokenInteractor, LoginWithUsername, \
    LoginWithEmail, LoginWithPhoneNumber, LoginWithFB, LoginWithGoogle, \
    LoginWithPhoneNumberAndOTP, LoginWithEmailAndOTP, LogoutInDevicesImpl
from ib_users.interactors.DTOs.common_dtos import PhoneNumberDTO
from ib_users.interactors.login.base_login import BaseLogin
from ib_users.interactors.login.login_user_to_device import LoginUserToDevice
from ib_users.interactors.login.login_with_email_and_otp import EmailAndOTPDTO
from ib_users.interactors.login.login_with_phone_number_and_otp import \
    PhoneNumberAndOTPDTO
from ib_users.interactors.login.login_with_twitter import TwitterLoginDTO, \
    LoginWithTwitter
from ib_users.interactors.storages import UserNameAndPasswordDTO
from ib_users.interactors.storages.user_accounts_storage import \
    EmailAndPasswordDTO, PhoneNumberAndPasswordDTO
from ib_users.interactors.storages.user_login_device_details_storage import \
    UserDeviceLoginDTO
from ib_users.interactors.verify_otp_through import VerifyThroughOTPInteractor
from ib_users.presenters import UserLoginJSONPresenter
from ib_users.storages import UserAccountsSQLStorage
from ib_users.storages.oauth2_sql_storage import OAuth2SQLStorage
from ib_users.storages.user_login_device_details_sql_storage import \
    UserLoginDeviceDetailsSQLStorage
from ib_users.storages.user_social_account_sql_storage import \
    UserSocialAccountsSQLStorage
from ib_users.third_party.otp_service_impl import OTPServiceImpl
from ib_users.third_party.social_account.facebook_account import \
    FacebookAccount
from ib_users.third_party.social_account.google_account import GoogleAccount
from ib_users.third_party.social_account.twitter_account import TwitterAccount
from ib_users.validators.base_validator import CustomException
from ib_users.validators.phone_number_validator_impl import \
    PhoneNumberValidatorImpl


def get_login_interactor_with_username_and_dto_given_request_data(
        request_data):
    username = request_data["username"]
    password = request_data["password"]
    username_login_dto = UserNameAndPasswordDTO(username, password)
    login_interactor = LoginWithUsername(storage=UserAccountsSQLStorage())
    return login_interactor, username_login_dto


def get_login_interactor_with_email_and_dto_given_request_data(request_data):
    email = request_data["email"]
    password = request_data["password"]
    login_interactor = LoginWithEmail(storage=UserAccountsSQLStorage())
    email_login_dto = EmailAndPasswordDTO(email, password)
    return email_login_dto, login_interactor


def get_login_interactor_with_phone_number_and_dto_given_request_data(
        request_data):
    phone_number = request_data["phone_number"]
    country_code = request_data["country_code"]
    password = request_data["password"]
    phone_number_dto = PhoneNumberDTO(phone_number=phone_number,
                                      country_code=country_code)
    phone_number_login_dto = PhoneNumberAndPasswordDTO(phone_number_dto,
                                                       password)
    login_interactor = LoginWithPhoneNumber(storage=UserAccountsSQLStorage(),
                                            phone_number_validator=PhoneNumberValidatorImpl())
    return login_interactor, phone_number_login_dto


def get_login_dto_and_interactor_with_twitter_details_from_request_data(
        request_data):
    twitter_access_token = request_data["social_access_token"]
    twitter_secret_token = request_data["social_secret_token"]

    twitter_login_dto = TwitterLoginDTO(twitter_access_token,
                                        twitter_secret_token)

    login_interactor = LoginWithTwitter(storage=UserSocialAccountsSQLStorage(),
                                        twitter_service=TwitterAccount())
    return login_interactor, twitter_login_dto


def get_login_dto_and_interactor_with_fb_details_from_request_data(
        request_data):
    fb_access_token = request_data["social_access_token"]
    login_interactor = LoginWithFB(storage=UserSocialAccountsSQLStorage(),
                                   fb_service=FacebookAccount())
    return login_interactor, fb_access_token


def get_login_dto_and_interactor_with_google_details_from_request_data(
        request_data):
    google_access_token = request_data["social_access_token"]
    login_interactor = LoginWithGoogle(storage=UserSocialAccountsSQLStorage(),
                                       google_service=GoogleAccount())
    return login_interactor, google_access_token


def get_login_interactor_with_email_otp_and_dto_given_request_data(
        request_data):
    email = request_data["email"]
    otp = request_data["otp"]
    verify_otp_interactor = VerifyThroughOTPInteractor(
        VerificationType.LOGIN_WITH_OTP)
    login_interactor = LoginWithEmailAndOTP(storage=UserAccountsSQLStorage(),
                                            otp_service=OTPServiceImpl(
                                                verify_otp_interactor))
    email_login_dto = EmailAndOTPDTO(email, otp)
    return login_interactor, email_login_dto


def get_login_interactor_with_phone_number_otp_and_dto_given_request_data(
        request_data):
    phone_number = request_data["phone_number"]
    country_code = request_data["country_code"]
    otp = request_data["otp"]
    phone_number_dto = PhoneNumberDTO(phone_number=phone_number,
                                      country_code=country_code)
    phone_number_login_dto = PhoneNumberAndOTPDTO(phone_number_dto, otp)
    verify_otp_interactor = VerifyThroughOTPInteractor(
        VerificationType.LOGIN_WITH_OTP)
    login_interactor = LoginWithPhoneNumberAndOTP(
        storage=UserAccountsSQLStorage(),
        phone_number_validator=PhoneNumberValidatorImpl(),
        otp_service=OTPServiceImpl(verify_otp_interactor))
    return login_interactor, phone_number_login_dto


def validate_inputs_and_get_auth_tokens(login_interactor: BaseLogin,
                                        login_dto):
    user_id = validate_login_inputs(
        login_interactor=login_interactor,
        login_dto=login_dto
    )
    return generate_auth_tokens(user_id)


def validate_inputs_and_create_user_device_mapping(login_interactor: BaseLogin,
                                                   login_dto,
                                                   device_id,
                                                   restrict_access_to_specific_device=False):
    from ib_users.third_party.oauth_user_auth_tokens_service import \
        OAuthUserAuthTokensService
    user_id = validate_login_inputs(login_interactor, login_dto)
    auth_tokens = generate_auth_tokens(user_id)
    user_login_device_details_sql_storage = UserLoginDeviceDetailsSQLStorage()
    login_user_to_device = LoginUserToDevice(
        user_login_device_details_sql_storage)

    user_device_login_dto = UserDeviceLoginDTO(
        user_id=user_id,
        device_id=device_id,
        access_token=auth_tokens["access_token"])

    logout_in_devices = None
    if restrict_access_to_specific_device:
        login_token_generator = OAuthUserAuthTokensService(
            oauth2_storage=OAuth2SQLStorage())
        logout_in_devices = LogoutInDevicesImpl(
            user_login_device_details_sql_storage, login_token_generator)

    login_user_to_device.create_given_login_device_mapping(
        user_device_login_dto=user_device_login_dto,
        restrict_access_to_specific_device=restrict_access_to_specific_device,
        logout_in_devices_interactor=logout_in_devices
    )
    return auth_tokens


def validate_login_inputs(login_interactor: BaseLogin, login_dto) -> str:
    try:
        return login_interactor.get_user_id_for_given_login_data(login_dto)
    except CustomException as custom_exception:
        raise BadRequest(
            message=custom_exception.error_message,
            res_status=custom_exception.error_type)
    except (PhoneNumberIsBlackListedException, EmailIsBlackListedException,
            MaxRetriesExceededException, OTPExpiredException,
            InvalidOTPException) as e:
        raise ExpectationFailed(
            message=e.message,
            res_status=e.error_type)


def login_user_to_device(
        login_interactor: BaseLogin,
        login_dto,
        device_id,
):
    from django.conf import settings
    return validate_inputs_and_create_user_device_mapping(
        login_interactor=login_interactor,
        login_dto=login_dto,
        device_id=device_id,
        restrict_access_to_specific_device=
        settings.RESTRICT_USER_TO_SINGLE_LOGIN_SESSION == TRUE_STR
    )


def generate_auth_tokens(user_id):
    from ib_users.third_party.oauth_user_auth_tokens_service import \
        OAuthUserAuthTokensService
    oauth2_sql_storage = OAuth2SQLStorage()
    login_token_generator = OAuthUserAuthTokensService(
        oauth2_storage=oauth2_sql_storage)
    presenter = UserLoginJSONPresenter()
    account_storage = UserAccountsSQLStorage()

    user_auth_token_interactor = UserAuthTokenInteractor(
        login_token_generator,
        presenter,
        account_storage=account_storage
    )

    success_response_json = user_auth_token_interactor.get_user_auth_tokens(
        user_id)
    return success_response_json


def get_login_interactor_and_login_dto_for_login_type(login_type,
                                                      request_data):
    from ib_users.constants.user_login_constants import LoginType

    if login_type == LoginType.LOGIN_WITH_USERNAME_AND_PASSWORD.value:
        login_interactor, login_dto = \
            get_login_interactor_with_username_and_dto_given_request_data(
                request_data)
    elif login_type == LoginType.LOGIN_WITH_EMAIL_AND_PASSWORD.value:
        login_dto, login_interactor = \
            get_login_interactor_with_email_and_dto_given_request_data(
                request_data)
    elif login_type == LoginType.LOGIN_WITH_PHONE_NUMBER_AND_PASSWORD.value:
        login_interactor, login_dto = \
            get_login_interactor_with_phone_number_and_dto_given_request_data(
                request_data)
    elif login_type == LoginType.LOGIN_WITH_TWITTER.value:
        login_interactor, login_dto = \
            get_login_dto_and_interactor_with_twitter_details_from_request_data(
                request_data)
    elif login_type == LoginType.LOGIN_WITH_FB.value:
        login_interactor, login_dto = \
            get_login_dto_and_interactor_with_fb_details_from_request_data(
                request_data)
    elif login_type == LoginType.LOGIN_WITH_GOOGLE.value:
        login_interactor, login_dto = \
            get_login_dto_and_interactor_with_google_details_from_request_data(
                request_data)
    elif login_type == LoginType.LOGIN_WITH_EMAIL_AND_OTP.value:
        request_data['otp'] = request_data['password']
        login_interactor, login_dto = \
            get_login_interactor_with_email_otp_and_dto_given_request_data(
                request_data)
    elif login_type == LoginType.LOGIN_WITH_PHONE_NUMBER_AND_OTP.value:
        request_data['otp'] = request_data['password']
        login_interactor, login_dto = \
            get_login_interactor_with_phone_number_otp_and_dto_given_request_data(
                request_data
            )
    else:
        raise InvalidLoginTypeException

    return login_interactor, login_dto

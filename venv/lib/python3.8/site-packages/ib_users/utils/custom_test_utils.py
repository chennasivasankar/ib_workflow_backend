from uuid import UUID

import mock
from django_swagger_utils.utils.test import CustomAPITestCase

from ib_users.constants.user_account_constants import SocialAccountProviderType
from ib_users.utils.test_utils.email_sender_mock import EmailSenderMock
from ib_users.utils.test_utils.facebook_account_mock import FacebookAccountMock
from ib_users.utils.test_utils.google_account_mock import GoogleAccountMock
from ib_users.utils.test_utils.oauth_user_auth_tokens_service_mock import \
    OAuthUserAuthTokensServiceMock
from ib_users.utils.test_utils.twitter_account_mock import TwitterAccountMock

TEST_UUIDS = [UUID('b46618fd-d64e-4b11-bb2e-14e0c67ecd4{}'.format(i)) for i in
              range(
                  9)]
UUID_POOL = iter(TEST_UUIDS)


def generate_uuid():
    """
    Generate UUIDs
    :return:
    """
    from uuid import UUID

    return next(iter([
        UUID('e360ac3e-81d9-4b85-8fb3-0ad19529953b'),
        UUID('827af7bf-6712-425c-b0d6-ec12cb9e4d33'),
        UUID('f4934b55-1ade-4445-b345-261647899efb'),
        UUID('9dd3a507-f749-4210-8093-3a529e949e13'),
        UUID('4d362f71-5cfc-485e-8d5c-cc91c68ff0f5'),
        UUID('526e682d-a715-4a5a-9372-3b10d8da5366'),
        UUID('f33eb5ef-f806-4d7c-9c00-75c72fedd772'),
        UUID('b546e4f5-74ed-42ee-ad92-3a95865148d3'),
        UUID('154a2229-07a2-4764-94bd-31e114f06ade'),
        UUID('dd39acee-860b-45be-855d-24dc2dc44f2e')
    ]))


class CustomTestUtils(CustomAPITestCase):
    USER_ACCOUNT_DATA = [
        {
            "username": "username001",
            "password": "Qwerty123!",
            "phone_number": "9884683977",
            "country_code": "91",
            "email": "username001@company.com"
        },
        {
            "username": "username002",
            "password": "Qwerty123!",
            "phone_number": "9884683976",
            "country_code": "91",
            "email": "username002@company.com"
        },
        {
            "username": "username003",
            "password": "Qwerty123!",
            "phone_number": "9884683978",
            "country_code": "91",
            "email": "username003@company.com"
        },
        {
            "username": "username004",
            "password": "Qwerty123!",
            "phone_number": "9884683979",
            "country_code": "91",
            "email": "username004@company.com"
        }
    ]
    USER_LOGIN_DEVICE_DETAILS = [
        {
            "access_token": "access_token_1",
            "device_id": "device_id_1"
        },
        {
            "access_token": "access_token_2",
            "device_id": "device_id_2"
        },
        {
            "access_token": "access_token_3",
            "device_id": "device_id_3"
        },
        {
            "access_token": "access_token_4",
            "device_id": "device_id_4"
        }
    ]
    USER_SOCIAL_ACCOUNT_DETAILS = [
        {
            "provider_type": SocialAccountProviderType.FACEBOOK.value,
            "social_id": "social_id_1"
        },
        {
            "provider_type": SocialAccountProviderType.GOOGLE.value,
            "social_id": "social_id_2"
        },
        {
            "provider_type": SocialAccountProviderType.TWITTER.value,
            "social_id": "social_id_3"
        },
        {
            "provider_type": SocialAccountProviderType.FACEBOOK.value,
            "social_id": "social_id_4"
        }
    ]

    def populate_user_account(self, data=None):
        from ib_users.models import UserAccount

        import uuid
        if data is None:
            data = self.USER_ACCOUNT_DATA

        objs = []
        username_list = UserAccount.objects.all().values_list(
            'username', flat=True)
        existing_usernames = []
        from copy import deepcopy
        for index, each in enumerate(data):
            if each["username"] in username_list:
                existing_usernames.append(each["username"])
                continue
            each_detail = deepcopy(each)
            if "user_id" not in each_detail:
                each_detail['user_id'] = uuid.uuid4()
            password = each_detail.pop("password")
            obj = UserAccount(**each_detail)
            obj.set_password(password)
            # obj.user_id = generate_uuid()
            obj.save()
            objs.append(obj)

        existing_objs = UserAccount.objects.filter(
            username__in=existing_usernames)
        objs += existing_objs

        return objs

    def populate_user_login_device_details(self, data=None):
        if data is None:
            user_account_objs = self.populate_user_account()
            total_objs = len(user_account_objs)
            data = self.USER_LOGIN_DEVICE_DETAILS

            for i, each in enumerate(data):
                each["user_account"] = user_account_objs[i % total_objs]

        from ib_users.models import UserLoginDeviceDetails

        objs = []
        for each in data:
            obj = UserLoginDeviceDetails(**each)
            objs.append(obj)

        UserLoginDeviceDetails.objects.bulk_create(objs=objs)

    def populate_user_social_account(self, data=None):
        if data is None:
            user_account_objs = self.populate_user_account()
            total_objs = len(user_account_objs)
            from ib_users.constants.user_account_constants import \
                SocialAccountProviderType
            data = self.USER_SOCIAL_ACCOUNT_DETAILS

            for i, each in enumerate(data):
                each["user_account"] = user_account_objs[i % total_objs]

        from ib_users.models import UserSocialAccount

        objs = []
        for each in data:
            obj = UserSocialAccount(**each)
            objs.append(obj)

        UserSocialAccount.objects.bulk_create(objs=objs)

    @staticmethod
    def populate_user_opt_details(verification_type, **kwargs):

        from ib_users.models import OTPVerification

        OTPVerification.objects.create(
            verification_type=verification_type.value,
            **kwargs
        )

    @mock.patch('ib_users.third_party.oauth_user_auth_tokens_service.'
                'OAuthUserAuthTokensService', OAuthUserAuthTokensServiceMock)
    @mock.patch('ib_users.third_party.social_account.facebook_account.'
                'FacebookAccount', FacebookAccountMock)
    @mock.patch('ib_users.third_party.social_account.google_account.'
                'GoogleAccount', GoogleAccountMock)
    @mock.patch('ib_users.third_party.social_account.twitter_account.'
                'TwitterAccount', TwitterAccountMock)
    @mock.patch('ib_users.services.email_sender_impl.EmailSenderImpl',
                EmailSenderMock)
    @mock.patch('uuid.uuid4', generate_uuid)
    def default_test_case(self):
        return super().default_test_case()

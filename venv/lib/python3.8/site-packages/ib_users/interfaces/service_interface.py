from typing import Optional, List

from ib_users.constants.otp_verification_constants import VerificationType
from ib_users.constants.user_account_constants import UserAccountConstants, \
    SocialAccountProviderType
from ib_users.interactors import SendOTPToUserGivenPhoneNumber
from ib_users.interactors import SocialRegistrationInteractor
from ib_users.interactors.registration.DTOs.registration_dtos import \
    CreateAccountWithPhoneNumberDTO, CreateAccountWithEmailDTO
from ib_users.interactors.storages.otp_verification_storage import \
    GetOTPDetailsDTO
from ib_users.interactors.storages.user_accounts_storage import PhoneNumberDTO
from ib_users.interactors.third_party.user_tokens_generator import \
    UserAuthTokensDTO
from ib_users.interactors.user_profile_interactor import UserProfileDTO, \
    GetUserProfileDTO, UserProfileInteractor, CreateUserProfileDTO
from ib_users.presenters.registration_json_presenter import \
    RegistrationJSONPresenter
from ib_users.storages import UserAccountsSQLStorage
from ib_users.storages.oauth2_sql_storage import OAuth2SQLStorage
from ib_users.storages.user_social_account_sql_storage import \
    UserSocialAccountsSQLStorage
from ib_users.third_party.oauth_user_auth_tokens_service import \
    OAuthUserAuthTokensService
from ib_users.third_party.social_account import FacebookAccount, GoogleAccount


class ServiceInterface:

    @staticmethod
    def create_user_account_with_phone_number(
            phone_number: str, country_code: str,
            password: Optional[str] = None, username: Optional[str] = None
    ) -> str:
        from ib_users.interactors.registration. \
            phone_number_registration_interactor import \
            PhoneNumberRegistrationInteractor
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.presenters.registration_json_presenter import \
            RegistrationJSONPresenter
        from ib_users.validators.phone_number_validator_impl import \
            PhoneNumberValidatorImpl

        interactor = PhoneNumberRegistrationInteractor(
            accounts_storage=UserAccountsSQLStorage(),
            presenter=RegistrationJSONPresenter(),
            phone_numbers_validator=PhoneNumberValidatorImpl()
        )

        if not password:
            password = UserAccountConstants.DEFAULT_PASSWORD
        create_account_dto = CreateAccountWithPhoneNumberDTO(
            phone_number=phone_number,
            country_code=country_code,
            password=password,
            username=username
        )
        user_id_dict = interactor.create_account_with_phone_number(
            create_account_dto
        )
        return user_id_dict['user_id']

    @staticmethod
    def send_otp_to_verify_account_phone_number(
            user_id: str
    ):
        from ib_users.interactors.user_profile_interactor \
            import UserProfileInteractor
        from ib_users.storages.user_profile_sql_storage \
            import UserProfileSQLStorage
        from ib_users.presenters.user_profile_json_presenter \
            import UserProfileJSONPresenter
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.constants.otp_verification_constants import \
            VerificationType
        from ib_users.storages import UserAccountsSQLStorage

        storage = UserProfileSQLStorage()
        presenter = UserProfileJSONPresenter()

        accounts_storage = UserAccountsSQLStorage()

        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP)

        interactor = UserProfileInteractor(storage=storage,
                                           presenter=presenter)

        interactor.verify_user_phone_number(
            otp_service=OTPServiceImpl(verify_otp_interactor),
            accounts_storage=accounts_storage, user_id=user_id
        )

    @staticmethod
    def verify_account_phone_number_otp(user_id: str, otp: str):
        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        from ib_users.presenters.user_profile_json_presenter import \
            UserProfileJSONPresenter
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.constants.otp_verification_constants import \
            VerificationType
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor

        storage = UserProfileSQLStorage()
        presenter = UserProfileJSONPresenter()

        interactor = UserProfileInteractor(storage=storage,
                                           presenter=presenter)

        accounts_storage = UserAccountsSQLStorage()
        otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.VERIFY_PHONE_NUMBER_WITH_OTP)

        interactor.verify_and_link_user_phone_number_to_account(
            accounts_storage=accounts_storage,
            otp_service=OTPServiceImpl(otp_interactor),
            user_id=user_id,
            otp=otp
        )

    @staticmethod
    def create_user_account_with_email(
            email: str,
            password: Optional[str] = None, username: Optional[str] = None
    ) -> str:
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.presenters.registration_json_presenter import \
            RegistrationJSONPresenter
        from ib_users.interactors.registration.email_registration_interactor \
            import EmailRegistrationInteractor

        if not password:
            password = UserAccountConstants.DEFAULT_PASSWORD
        storage = UserAccountsSQLStorage()
        presenter = RegistrationJSONPresenter()
        interactor = EmailRegistrationInteractor(
            accounts_storage=storage, presenter=presenter)

        create_account_dto = CreateAccountWithEmailDTO(
            email=email,
            password=password,
            username=username
        )
        user_id_dict = interactor.create_account_with_email(
            create_account_dto
        )
        return user_id_dict['user_id']

    @staticmethod
    def send_otp_to_verify_account_email(
            user_id: str
    ):
        from ib_users.interactors.user_profile_interactor \
            import UserProfileInteractor
        from ib_users.storages.user_profile_sql_storage \
            import UserProfileSQLStorage
        from ib_users.presenters.user_profile_json_presenter \
            import UserProfileJSONPresenter
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.constants.otp_verification_constants import \
            VerificationType
        from ib_users.storages import UserAccountsSQLStorage

        storage = UserProfileSQLStorage()
        presenter = UserProfileJSONPresenter()

        accounts_storage = UserAccountsSQLStorage()

        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.VERIFY_EMAIL_WITH_OTP)

        interactor = UserProfileInteractor(storage=storage,
                                           presenter=presenter)

        interactor.verify_user_email(
            otp_service=OTPServiceImpl(verify_otp_interactor),
            accounts_storage=accounts_storage, user_id=user_id
        )

    @staticmethod
    def verify_account_email_otp(user_id: str, otp: str):
        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        from ib_users.presenters.user_profile_json_presenter import \
            UserProfileJSONPresenter
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.constants.otp_verification_constants import \
            VerificationType
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor

        storage = UserProfileSQLStorage()
        presenter = UserProfileJSONPresenter()

        interactor = UserProfileInteractor(storage=storage,
                                           presenter=presenter)

        accounts_storage = UserAccountsSQLStorage()
        otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.VERIFY_EMAIL_WITH_OTP)

        interactor.verify_and_link_user_email_to_account(
            accounts_storage=accounts_storage,
            otp_service=OTPServiceImpl(otp_interactor),
            user_id=user_id,
            otp=otp
        )

    @staticmethod
    def update_user_profile(user_id: str, user_profile: UserProfileDTO) -> \
            GetUserProfileDTO:
        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        from ib_users.presenters.user_profile_json_presenter import \
            UserProfileJSONPresenter
        from ib_users.storages import UserAccountsSQLStorage

        storage = UserProfileSQLStorage()
        presenter = UserProfileJSONPresenter()
        interactor = UserProfileInteractor(storage=storage,
                                           presenter=presenter)
        accounts_storage = UserAccountsSQLStorage()

        updated_profile_data = interactor.update_user_profile(
            user_id=user_id, update_profile_data=user_profile,
            accounts_storage=accounts_storage)
        return GetUserProfileDTO(**updated_profile_data)

    @staticmethod
    def request_login_otp(phone_number: str, country_code: str):
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.storages import UserAccountsSQLStorage
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.validators.phone_number_validator_impl import \
            PhoneNumberValidatorImpl

        phone_number_dto = PhoneNumberDTO(phone_number=phone_number,
                                          country_code=country_code)

        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.LOGIN_WITH_OTP)
        otp_sender_to_user = SendOTPToUserGivenPhoneNumber(
            storage=UserAccountsSQLStorage(),
            otp_service=OTPServiceImpl(verify_otp_interactor),
            phone_number_validator=PhoneNumberValidatorImpl())

        otp_sender_to_user.send_otp(phone_number_dto)

    @staticmethod
    def verify_login_otp(phone_number: str, country_code: str, otp: str) \
            -> UserAuthTokensDTO:
        from ib_users.utils.views.login_controllers_common import \
            get_login_interactor_with_phone_number_otp_and_dto_given_request_data
        from ib_users.utils.views.login_controllers_common import \
            validate_inputs_and_get_auth_tokens

        request_data = {
            "phone_number": phone_number,
            "country_code": country_code,
            "otp": otp
        }
        login_interactor, phone_number_login_dto = \
            get_login_interactor_with_phone_number_otp_and_dto_given_request_data(
                request_data
            )

        auth_tokens = validate_inputs_and_get_auth_tokens(
            login_interactor, phone_number_login_dto
        )
        return UserAuthTokensDTO(**auth_tokens)

    @staticmethod
    def get_user_id_give_phone_number_and_country_code(
            phone_number: str, country_code: str) -> str:
        from ib_users.interactors.user_account_interactor import \
            UserAccountInteractor
        from ib_users.interactors.storages.user_social_accounts_storage \
            import UserSocialAccountsStorage

        account_storage = UserAccountsSQLStorage()
        social_account_storage = UserSocialAccountsStorage()
        interactor = UserAccountInteractor(
            account_storage=account_storage,
            social_account_storage=social_account_storage
        )
        return interactor.get_user_id_given_phone_number(
            phone_number=phone_number,
            country_code=country_code
        )

    @staticmethod
    def get_user_id_give_email(email: str) -> str:
        from ib_users.interactors.user_account_interactor import \
            UserAccountInteractor
        from ib_users.interactors.storages.user_social_accounts_storage \
            import UserSocialAccountsStorage

        account_storage = UserAccountsSQLStorage()
        social_account_storage = UserSocialAccountsStorage()
        interactor = UserAccountInteractor(
            account_storage=account_storage,
            social_account_storage=social_account_storage
        )
        return interactor.get_user_id_given_email(email=email)

    @staticmethod
    def get_user_profile(user_id: str) -> GetUserProfileDTO:
        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        from ib_users.presenters.user_profile_json_presenter import \
            UserProfileJSONPresenter

        storage = UserProfileSQLStorage()
        presenter = UserProfileJSONPresenter()
        user_profile_interactor = UserProfileInteractor(
            storage=storage, presenter=presenter)
        user_profile = user_profile_interactor.get_user_profile(
            user_id=user_id)
        return GetUserProfileDTO(**user_profile)

    @staticmethod
    def get_user_profile_bulk(user_ids: List[str]) -> List[GetUserProfileDTO]:
        from ib_users.interactors.user_profile_interactor import \
            UserProfileInteractor
        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        from ib_users.presenters.user_profile_json_presenter import \
            UserProfileJSONPresenter

        storage = UserProfileSQLStorage()
        presenter = UserProfileJSONPresenter()
        user_profile_interactor = UserProfileInteractor(
            storage=storage, presenter=presenter)
        user_profiles = user_profile_interactor.get_user_profiles(
            user_ids=user_ids)
        return [GetUserProfileDTO(**user_profile)
                for user_profile in user_profiles]

    @staticmethod
    def create_user_profile(user_id: str, user_profile: CreateUserProfileDTO):
        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        from ib_users.storages import UserAccountsSQLStorage

        if user_profile.dob:
            user_profile.dob = user_profile.dob.strftime('%Y-%m-%d')

        storage = UserProfileSQLStorage()
        interactor = UserProfileInteractor(storage=storage, presenter=None)
        accounts_storage = UserAccountsSQLStorage()

        return interactor.create_user_profile(
            user_id=user_id, create_profile_data=user_profile,
            accounts_storage=accounts_storage
        )

    @staticmethod
    def create_auth_tokens_for_user(user_id: str, expiry_in_seconds=None):
        from ib_users.storages.oauth2_sql_storage import OAuth2SQLStorage
        from ib_users.third_party.oauth_user_auth_tokens_service import \
            OAuthUserAuthTokensService
        from ib_users.presenters import UserLoginJSONPresenter
        from ib_users.interactors import UserAuthTokenInteractor

        oauth2_sql_storage = OAuth2SQLStorage()
        login_token_generator = OAuthUserAuthTokensService(
            oauth2_storage=oauth2_sql_storage)
        presenter = UserLoginJSONPresenter()
        account_storage = UserAccountsSQLStorage()

        user_auth_token_interactor = UserAuthTokenInteractor(
            login_token_generator,
            presenter, account_storage=account_storage
        )

        success_response_json = user_auth_token_interactor.\
            get_user_auth_tokens(user_id=user_id, expiry_in_seconds=expiry_in_seconds)
        return UserAuthTokensDTO(**success_response_json)

    @staticmethod
    def link_phone_number_to_user_profile_without_verification(
            user_id: str,
            phone_number_dto: PhoneNumberDTO
    ):
        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        storage = UserProfileSQLStorage()
        accounts_storage = UserAccountsSQLStorage()
        interactor = UserProfileInteractor(storage=storage, presenter=None)
        interactor.link_user_phone_number_to_account(
            user_id=user_id,
            phone_number_dto=phone_number_dto,
            accounts_storage=accounts_storage
        )

    @staticmethod
    def link_email_to_user_account(user_id: str):
        from ib_users.storages.user_profile_sql_storage import \
            UserProfileSQLStorage
        storage = UserProfileSQLStorage()
        accounts_storage = UserAccountsSQLStorage()
        interactor = UserProfileInteractor(storage=storage, presenter=None)
        interactor.link_user_email_to_account(
            user_id=user_id,
            accounts_storage=accounts_storage
        )

    @staticmethod
    def update_password(user_id: str, new_password: str,
                        current_password: str):
        from ib_users.interactors.user_credentials. \
            update_user_password_interactor import UpdateUserPasswordInteractor

        storage = UserAccountsSQLStorage()
        interactor = UpdateUserPasswordInteractor(storage=storage)

        interactor.update_user_password(
            user_id=user_id,
            current_password=current_password,
            new_password=new_password
        )

    @staticmethod
    def send_reset_password_otp_to_email(email: str):
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.interactors.user_credentials.send_otp_email_interactor \
            import SendOTPEmailInteractor
        from ib_users.third_party.otp_service_impl import OTPServiceImpl

        storage = UserAccountsSQLStorage()
        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.RESET_PASSWORD_WITH_OTP)
        otp_service = OTPServiceImpl(verify_otp_interactor)

        interactor = SendOTPEmailInteractor(storage=storage,
                                            otp_service=otp_service)

        interactor.send_otp_to_email(email=email)

    @staticmethod
    def send_reset_password_otp_to_phone_number(country_code: str,
                                                phone_number: str):
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.interactors.user_credentials. \
            send_otp_phone_number_interactor import \
            SendOTPPhoneNumberInteractor
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.validators.phone_number_validator_impl import \
            PhoneNumberValidatorImpl

        phone_number_dto = PhoneNumberDTO(
            phone_number=phone_number,
            country_code=country_code)

        storage = UserAccountsSQLStorage()
        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.RESET_PASSWORD_WITH_OTP)

        interactor = SendOTPPhoneNumberInteractor(
            storage=storage, otp_service=OTPServiceImpl(verify_otp_interactor),
            phone_numbers_validator=PhoneNumberValidatorImpl())

        interactor.send_otp_to_phone_number(
            phone_number_dto=phone_number_dto
        )

    @staticmethod
    def verify_reset_password_otp_to_email(email: str, otp: str,
                                           new_password: str):
        from ib_users.interactors.user_credentials.DTOs.user_credentials_dtos \
            import ResetPasswordWithOTPEmailDTO
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.interactors.user_credentials. \
            reset_password_with_otp_email_interactor import \
            ResetPasswordWithOTPEmailInteractor
        from ib_users.third_party.otp_service_impl import OTPServiceImpl

        reset_password_dto = ResetPasswordWithOTPEmailDTO(
            email=email, otp=otp, new_password=new_password)

        storage = UserAccountsSQLStorage()
        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.RESET_PASSWORD_WITH_OTP)
        otp_service = OTPServiceImpl(verify_otp_interactor)

        interactor = ResetPasswordWithOTPEmailInteractor(
            storage=storage, otp_service=otp_service
        )

        interactor.reset_password_with_otp_email(
            reset_password_dto=reset_password_dto
        )

    @staticmethod
    def verify_reset_password_otp_to_phone_number(
            phone_number: str, country_code: str, otp: str, new_password: str):

        from ib_users.interactors.user_credentials.DTOs.user_credentials_dtos \
            import ResetPasswordWithOTPPhoneNumberDTO
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.interactors.user_credentials. \
            reset_password_with_otp_phone_number_interactor import \
            ResetPasswordWithOTPPhoneNumberInteractor
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.validators.phone_number_validator_impl import \
            PhoneNumberValidatorImpl

        reset_password_dto = ResetPasswordWithOTPPhoneNumberDTO(
            phone_number=phone_number, country_code=country_code,
            otp=otp, new_password=new_password)

        storage = UserAccountsSQLStorage()
        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.RESET_PASSWORD_WITH_OTP)
        phone_number_validator = PhoneNumberValidatorImpl()
        interactor = ResetPasswordWithOTPPhoneNumberInteractor(
            storage=storage,
            otp_service=OTPServiceImpl(verify_otp_interactor),
            phone_number_validator=phone_number_validator)

        interactor.reset_password_with_otp_phone_number(
            reset_password_dto=reset_password_dto)

    @staticmethod
    def login_with_device_details(login_type: str, device_id: str, **kwargs):
        from ib_users.utils.views.login_controllers_common import \
            get_login_interactor_and_login_dto_for_login_type

        login_interactor, login_dto = \
            get_login_interactor_and_login_dto_for_login_type(
                login_type=login_type,
                request_data=kwargs
            )

        from ib_users.utils.views.login_controllers_common import \
            login_user_to_device
        return login_user_to_device(
            login_interactor=login_interactor,
            login_dto=login_dto,
            device_id=device_id
        )

    @staticmethod
    def create_user_account_with_google_details(google_token):
        presenter = RegistrationJSONPresenter()
        interactor = SocialRegistrationInteractor(
            accounts_storage=UserSocialAccountsSQLStorage(),
            presenter=presenter,
            social_sdk=GoogleAccount())

        return interactor.create_account_with_social_details(
            social_provider=SocialAccountProviderType.GOOGLE.value,
            access_token=google_token)

    @staticmethod
    def create_user_account_with_facebook_details(fb_token):
        presenter = RegistrationJSONPresenter()
        interactor = SocialRegistrationInteractor(
            accounts_storage=UserSocialAccountsSQLStorage(),
            presenter=presenter,
            social_sdk=FacebookAccount())

        return interactor.create_account_with_social_details(
            social_provider=SocialAccountProviderType.FACEBOOK.value,
            access_token=fb_token
        )

    @staticmethod
    def refresh_auth_tokens(access_token, refresh_token):
        from ib_users.storages.oauth2_sql_storage import OAuth2SQLStorage
        from ib_users.third_party.oauth_user_auth_tokens_service import \
            OAuthUserAuthTokensService
        from ib_users.interactors import RefreshAuthTokens
        from ib_users.presenters import UserLoginJSONPresenter
        from ib_users.storages.user_login_device_details_sql_storage import \
            UserLoginDeviceDetailsSQLStorage

        oauth2_sql_storage = OAuth2SQLStorage()

        login_token_generator = OAuthUserAuthTokensService(
            oauth2_storage=oauth2_sql_storage)
        accounts_storage = UserAccountsSQLStorage()

        login_interactor = RefreshAuthTokens(
            login_token_generator=login_token_generator,
            presenter=UserLoginJSONPresenter(),
            storage=UserLoginDeviceDetailsSQLStorage(),
            accounts_storage=accounts_storage
        )

        success_response_json = login_interactor.refresh_tokens(
            refresh_token=refresh_token,
            access_token=access_token)
        return UserAuthTokensDTO(**success_response_json)

    @staticmethod
    def send_login_otp_to_phone_number(phone_number: str, country_code: str):
        from ib_users.interactors.verify_otp_through import \
            VerifyThroughOTPInteractor
        from ib_users.third_party.otp_service_impl import OTPServiceImpl
        from ib_users.validators.phone_number_validator_impl import \
            PhoneNumberValidatorImpl

        phone_number_dto = PhoneNumberDTO(phone_number=phone_number,
                                          country_code=country_code)

        verify_otp_interactor = VerifyThroughOTPInteractor(
            VerificationType.LOGIN_WITH_OTP)
        otp_sender_to_user = SendOTPToUserGivenPhoneNumber(
            storage=UserAccountsSQLStorage(),
            otp_service=OTPServiceImpl(verify_otp_interactor),
            phone_number_validator=PhoneNumberValidatorImpl())
        otp_sender_to_user.send_otp(phone_number_dto)

    @staticmethod
    def get_user_otp_by_phone_number(
            phone_number: str, country_code: str,
            verification_type: VerificationType
    ) -> GetOTPDetailsDTO:
        from ib_users.interactors.user_otp_interactor import UserOTPInteractor
        from ib_users.storages.otp_verification_sql_storage import \
            OTPVerificationSQLStorage

        interactor = UserOTPInteractor(storage=OTPVerificationSQLStorage())
        return interactor.get_otp_details_for_phone_number(
            phone_number=phone_number,
            country_code=country_code,
            verification_type=verification_type
        )

    @staticmethod
    def deactivate_user(user_id):
        from ib_users.interactors.deactivate_user_interactor import \
            DeactivateUserInteractor

        account_storage = UserAccountsSQLStorage()
        oauth2_storage = OAuth2SQLStorage()

        auth_service = OAuthUserAuthTokensService(
            oauth2_storage=oauth2_storage
        )

        interactor = DeactivateUserInteractor(
            auth_service=auth_service,
            storage=account_storage
        )
        return interactor.deactivate(user_id=user_id)

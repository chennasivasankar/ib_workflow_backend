# from django

import logging

from django.utils.deprecation import MiddlewareMixin

logger = logging.getLogger()


class ResponseStatusCode4xx5xxMiddleware(MiddlewareMixin):

    def process_response(self, request, response):
        # skipping 500 error as they will be reported by default

        if response.status_code >= 400 and response.status_code != 500:
            from django.http.response import HttpResponseNotFound
            from django.http import HttpResponse
            from rest_framework.response import Response
            if isinstance(response, HttpResponseNotFound):
                self.capture_customer_exception_error(response)
            elif isinstance(response, Response) and response.status_code == 401:
                logger.info({"response_status": response.status_code, "content": response.content})
            elif isinstance(response, HttpResponse):
                self.capture_customer_exception_error(response)
            else:
                self.capture_response_error(response)

        return response

    def capture_customer_exception_error(self, response):
        import json
        try:
            from django.conf import settings
            custom_exceptions_to_log_in_sentry = getattr(
                settings, 'CUSTOM_EXCEPTIONS_TO_LOG_IN_SENTRY', []
            )
            from copy import deepcopy
            response_content = deepcopy(response.content)
            response_dict = json.loads(response_content)
            if 'res_status' in response_dict:
                res_status = response_dict['res_status']
                if res_status not in custom_exceptions_to_log_in_sentry:
                    return
        except (ValueError, AttributeError):
            pass
        self.capture_response_error(response)

    def capture_response_error(self, response):
        import sentry_sdk
        import logging
        sentry_sdk.capture_message(
            message=self.get_exception_message(response),
            level=logging.ERROR
        )

    @staticmethod
    def get_exception_message(response):
        try:
            import json
            return "{} Error: {}".format(response.status_code,
                                         response.content)
        except (ValueError, AttributeError):
            return "{} Error: {}".format(response.status_code,
                                         str(response))

def unhandled_exceptions(e, event, context):
    """Exception handler reports exceptions to sentry but does not capture them."""

    from sentry_sdk import configure_scope
    with configure_scope() as scope:

        if 'httpMethod' in event:
            extra_tags = {
                'http_method': event['httpMethod'],
                'path': event['path']
            }
            if 'Host' in event['headers']:
                extra_tags['host'] = event['headers']['Host']
            if 'User-Agent' in event['headers']:
                extra_tags['user_agent'] = event['headers']['User-Agent']
            if 'requestContext' in event and 'stage' in event[
                'requestContext']:
                extra_tags['stage'] = event['requestContext']['stage']

            for key, value in extra_tags.items():
                scope.set_tag(key, value)

        scope.set_extra("event", event)

    from sentry_sdk import capture_exception
    capture_exception(e)
    return False


def capture_exceptions(e, event, context):
    """
    Exception handler that makes exceptions disappear after processing them.

    zappa_settings.py["stage"]["remote_env] = "exception_handler": "ib_sentry_wrapper.utils.zappa_sentry.capture_exceptions",
    """

    unhandled_exceptions(e, event, context)
    return True
